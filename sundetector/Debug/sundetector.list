
sundetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c8  080072c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080072c8  080072c8  000172c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d0  080072d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080072d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  08007348  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08007348  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ccc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbf  00000000  00000000  00037d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003a930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003bd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028543  00000000  00000000  0003cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d83  00000000  00000000  0006552b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108bab  00000000  00000000  0007a2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00182e59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b94  00000000  00000000  00182eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070d0 	.word	0x080070d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080070d0 	.word	0x080070d0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART2 and Loop until the end of transmission */
  if (ch == '\n')
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b0a      	cmp	r3, #10
 80004dc:	d106      	bne.n	80004ec <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 80004de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e2:	2201      	movs	r2, #1
 80004e4:	4907      	ldr	r1, [pc, #28]	; (8000504 <__io_putchar+0x34>)
 80004e6:	4808      	ldr	r0, [pc, #32]	; (8000508 <__io_putchar+0x38>)
 80004e8:	f005 fc64 	bl	8005db4 <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80004ec:	1d39      	adds	r1, r7, #4
 80004ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004f2:	2201      	movs	r2, #1
 80004f4:	4804      	ldr	r0, [pc, #16]	; (8000508 <__io_putchar+0x38>)
 80004f6:	f005 fc5d 	bl	8005db4 <HAL_UART_Transmit>

  return ch;
 80004fa:	687b      	ldr	r3, [r7, #4]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	080070e8 	.word	0x080070e8
 8000508:	2000023c 	.word	0x2000023c

0800050c <connectWifi>:
		HAL_Delay(100);
	}
}

void connectWifi(const char *ssid , const char *pwd)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b09e      	sub	sp, #120	; 0x78
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]

	char _wifi[100] = "";
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2260      	movs	r2, #96	; 0x60
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f006 f8f6 	bl	8006714 <memset>

	uint8_t state = 1;
 8000528:	2301      	movs	r3, #1
 800052a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t i;
	uint8_t j;
	uint8_t k;
	uint8_t ch;
	strcat(_wifi,"|2|1|");
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe48 	bl	80001c8 <strlen>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4413      	add	r3, r2
 8000542:	4a33      	ldr	r2, [pc, #204]	; (8000610 <connectWifi+0x104>)
 8000544:	6810      	ldr	r0, [r2, #0]
 8000546:	6018      	str	r0, [r3, #0]
 8000548:	8892      	ldrh	r2, [r2, #4]
 800054a:	809a      	strh	r2, [r3, #4]
	strcat(_wifi,ssid);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	4618      	mov	r0, r3
 8000554:	f006 fa16 	bl	8006984 <strcat>
	strcat(_wifi,",");
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fe33 	bl	80001c8 <strlen>
 8000562:	4603      	mov	r3, r0
 8000564:	461a      	mov	r2, r3
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	4413      	add	r3, r2
 800056c:	4929      	ldr	r1, [pc, #164]	; (8000614 <connectWifi+0x108>)
 800056e:	461a      	mov	r2, r3
 8000570:	460b      	mov	r3, r1
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	8013      	strh	r3, [r2, #0]
	strcat(_wifi,pwd);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	6839      	ldr	r1, [r7, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f006 fa01 	bl	8006984 <strcat>
	strcat(_wifi,"|\r");
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fe1e 	bl	80001c8 <strlen>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4413      	add	r3, r2
 8000596:	4a20      	ldr	r2, [pc, #128]	; (8000618 <connectWifi+0x10c>)
 8000598:	8811      	ldrh	r1, [r2, #0]
 800059a:	7892      	ldrb	r2, [r2, #2]
 800059c:	8019      	strh	r1, [r3, #0]
 800059e:	709a      	strb	r2, [r3, #2]
	printf("%s\n",_wifi);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4618      	mov	r0, r3
 80005a6:	f006 f9d5 	bl	8006954 <puts>
	//HAL_UART_Transmit(&huart3,_wifi,sizeof(_wifi),10);
	//USART2TransferCompleted = 0;
	//HAL_UART_Transmit(&huart2,_wifi,100,10);

	for(j=0;j<50;j++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80005b0:	e00f      	b.n	80005d2 <connectWifi+0xc6>
		HAL_UART_Transmit (&huart3, (uint8_t*) _wifi+j, 1, 0xFFFF);
 80005b2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80005b6:	f107 0210 	add.w	r2, r7, #16
 80005ba:	18d1      	adds	r1, r2, r3
 80005bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c0:	2201      	movs	r2, #1
 80005c2:	4816      	ldr	r0, [pc, #88]	; (800061c <connectWifi+0x110>)
 80005c4:	f005 fbf6 	bl	8005db4 <HAL_UART_Transmit>
	for(j=0;j<50;j++)
 80005c8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80005cc:	3301      	adds	r3, #1
 80005ce:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80005d2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80005d6:	2b31      	cmp	r3, #49	; 0x31
 80005d8:	d9eb      	bls.n	80005b2 <connectWifi+0xa6>

	//while(!USART2TransferCompleted);
	//Usart_SendString(USART3, _wifi);
	memset(_wifi,'\0',50);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	2232      	movs	r2, #50	; 0x32
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f006 f896 	bl	8006714 <memset>
	while(1){
	  if (!RB_isempty (&gtUart2Fifo))
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <connectWifi+0x114>)
 80005ea:	f000 fb3a 	bl	8000c62 <RB_isempty>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1f9      	bne.n	80005e8 <connectWifi+0xdc>
	  {
		  ch = RB_read (&gtUart2Fifo);
 80005f4:	480a      	ldr	r0, [pc, #40]	; (8000620 <connectWifi+0x114>)
 80005f6:	f000 fb13 	bl	8000c20 <RB_read>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]
	      HAL_UART_Transmit (&huart2, &ch, 1, 0xFF);
 80005fe:	f107 010f 	add.w	r1, r7, #15
 8000602:	23ff      	movs	r3, #255	; 0xff
 8000604:	2201      	movs	r2, #1
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <connectWifi+0x118>)
 8000608:	f005 fbd4 	bl	8005db4 <HAL_UART_Transmit>
	  if (!RB_isempty (&gtUart2Fifo))
 800060c:	e7ec      	b.n	80005e8 <connectWifi+0xdc>
 800060e:	bf00      	nop
 8000610:	080071f4 	.word	0x080071f4
 8000614:	080071fc 	.word	0x080071fc
 8000618:	08007128 	.word	0x08007128
 800061c:	20000100 	.word	0x20000100
 8000620:	20000230 	.word	0x20000230
 8000624:	2000023c 	.word	0x2000023c

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fe74 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f84a 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 fa44 	bl	8000ac0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000638:	f000 f9c4 	bl	80009c4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800063c:	f000 f93c 	bl	80008b8 <MX_TIM4_Init>
  MX_DMA_Init();
 8000640:	f000 fa20 	bl	8000a84 <MX_DMA_Init>
  MX_ADC1_Init();
 8000644:	f000 f892 	bl	800076c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000648:	f000 f9ec 	bl	8000a24 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800064c:	2100      	movs	r1, #0
 800064e:	4817      	ldr	r0, [pc, #92]	; (80006ac <main+0x84>)
 8000650:	f004 fa5e 	bl	8004b10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000654:	2104      	movs	r1, #4
 8000656:	4815      	ldr	r0, [pc, #84]	; (80006ac <main+0x84>)
 8000658:	f004 fa5a 	bl	8004b10 <HAL_TIM_PWM_Start>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <main+0x88>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <main+0x88>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f042 0220 	orr.w	r2, r2, #32
 800066a:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  if (HAL_ADCEx_Calibration_Start (&hadc1,10) != HAL_OK)
 800066c:	210a      	movs	r1, #10
 800066e:	4811      	ldr	r0, [pc, #68]	; (80006b4 <main+0x8c>)
 8000670:	f002 f8ae 	bl	80027d0 <HAL_ADCEx_Calibration_Start>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <main+0x56>
    {
      Error_Handler ();
 800067a:	f000 faa5 	bl	8000bc8 <Error_Handler>
    }

  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&uwADCxConvertedValue, 4)!=HAL_OK)
 800067e:	2204      	movs	r2, #4
 8000680:	490d      	ldr	r1, [pc, #52]	; (80006b8 <main+0x90>)
 8000682:	480c      	ldr	r0, [pc, #48]	; (80006b4 <main+0x8c>)
 8000684:	f001 fa3a 	bl	8001afc <HAL_ADC_Start_DMA>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <main+0x6a>
	   	{
	  	  Error_Handler ();
 800068e:	f000 fa9b 	bl	8000bc8 <Error_Handler>
	   	}
  //uint8_t ch;

  connectWifi(WIFISSID,WIFIPWS);
 8000692:	490a      	ldr	r1, [pc, #40]	; (80006bc <main+0x94>)
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <main+0x98>)
 8000696:	f7ff ff39 	bl	800050c <connectWifi>
	  {
		  ch = RB_read (&gtUart2Fifo);
	      HAL_UART_Transmit (&huart2, &ch, 1, 0xFF);
	  }
	  */
	  printf("hello world\n");
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <main+0x9c>)
 800069c:	f006 f95a 	bl	8006954 <puts>
	  //HAL_UART_Transmit(&huart3, "hello world\n", sizeof("hello world\n"), 10);
	  HAL_Delay(1000);
 80006a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a4:	f000 feb4 	bl	8001410 <HAL_Delay>
	  printf("hello world\n");
 80006a8:	e7f7      	b.n	800069a <main+0x72>
 80006aa:	bf00      	nop
 80006ac:	200000b4 	.word	0x200000b4
 80006b0:	2000023c 	.word	0x2000023c
 80006b4:	20000184 	.word	0x20000184
 80006b8:	200000ac 	.word	0x200000ac
 80006bc:	08007200 	.word	0x08007200
 80006c0:	0800720c 	.word	0x0800720c
 80006c4:	08007210 	.word	0x08007210

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b096      	sub	sp, #88	; 0x58
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2244      	movs	r2, #68	; 0x44
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 f81c 	bl	8006714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ee:	f002 fe59 	bl	80033a4 <HAL_PWREx_ControlVoltageScaling>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f8:	f000 fa66 	bl	8000bc8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000704:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	2310      	movs	r3, #16
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070e:	2302      	movs	r3, #2
 8000710:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000716:	2308      	movs	r3, #8
 8000718:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800071a:	2307      	movs	r3, #7
 800071c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fe90 	bl	8003450 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000736:	f000 fa47 	bl	8000bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2303      	movs	r3, #3
 8000740:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	2101      	movs	r1, #1
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fa62 	bl	8003c1c <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075e:	f000 fa33 	bl	8000bc8 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3758      	adds	r7, #88	; 0x58
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800078e:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <MX_ADC1_Init+0x134>)
 8000790:	4a44      	ldr	r2, [pc, #272]	; (80008a4 <MX_ADC1_Init+0x138>)
 8000792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000794:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <MX_ADC1_Init+0x134>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800079a:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <MX_ADC1_Init+0x134>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b3f      	ldr	r3, [pc, #252]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007a6:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ac:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007ae:	2204      	movs	r2, #4
 80007b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b2:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007b8:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80007be:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007c0:	2204      	movs	r2, #4
 80007c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c4:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007d8:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007da:	2201      	movs	r2, #1
 80007dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ee:	482c      	ldr	r0, [pc, #176]	; (80008a0 <MX_ADC1_Init+0x134>)
 80007f0:	f001 f82e 	bl	8001850 <HAL_ADC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007fa:	f000 f9e5 	bl	8000bc8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4825      	ldr	r0, [pc, #148]	; (80008a0 <MX_ADC1_Init+0x134>)
 800080a:	f002 f841 	bl	8002890 <HAL_ADCEx_MultiModeConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000814:	f000 f9d8 	bl	8000bc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_ADC1_Init+0x13c>)
 800081a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081c:	2306      	movs	r3, #6
 800081e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000820:	2305      	movs	r3, #5
 8000822:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000824:	237f      	movs	r3, #127	; 0x7f
 8000826:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000828:	2304      	movs	r3, #4
 800082a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4619      	mov	r1, r3
 8000834:	481a      	ldr	r0, [pc, #104]	; (80008a0 <MX_ADC1_Init+0x134>)
 8000836:	f001 fa33 	bl	8001ca0 <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000840:	f000 f9c2 	bl	8000bc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_ADC1_Init+0x140>)
 8000846:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000848:	230c      	movs	r3, #12
 800084a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <MX_ADC1_Init+0x134>)
 8000852:	f001 fa25 	bl	8001ca0 <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800085c:	f000 f9b4 	bl	8000bc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_ADC1_Init+0x144>)
 8000862:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000864:	2312      	movs	r3, #18
 8000866:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_ADC1_Init+0x134>)
 800086e:	f001 fa17 	bl	8001ca0 <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000878:	f000 f9a6 	bl	8000bc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_ADC1_Init+0x148>)
 800087e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000880:	2318      	movs	r3, #24
 8000882:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_ADC1_Init+0x134>)
 800088a:	f001 fa09 	bl	8001ca0 <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000894:	f000 f998 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000184 	.word	0x20000184
 80008a4:	50040000 	.word	0x50040000
 80008a8:	04300002 	.word	0x04300002
 80008ac:	08600004 	.word	0x08600004
 80008b0:	0c900008 	.word	0x0c900008
 80008b4:	10c00010 	.word	0x10c00010

080008b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d8:	463b      	mov	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
 80008e6:	615a      	str	r2, [r3, #20]
 80008e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <MX_TIM4_Init+0x104>)
 80008ec:	4a34      	ldr	r2, [pc, #208]	; (80009c0 <MX_TIM4_Init+0x108>)
 80008ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 80008f0:	4b32      	ldr	r3, [pc, #200]	; (80009bc <MX_TIM4_Init+0x104>)
 80008f2:	221f      	movs	r2, #31
 80008f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b31      	ldr	r3, [pc, #196]	; (80009bc <MX_TIM4_Init+0x104>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <MX_TIM4_Init+0x104>)
 80008fe:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000902:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000904:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <MX_TIM4_Init+0x104>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_TIM4_Init+0x104>)
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000910:	482a      	ldr	r0, [pc, #168]	; (80009bc <MX_TIM4_Init+0x104>)
 8000912:	f004 f845 	bl	80049a0 <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800091c:	f000 f954 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092a:	4619      	mov	r1, r3
 800092c:	4823      	ldr	r0, [pc, #140]	; (80009bc <MX_TIM4_Init+0x104>)
 800092e:	f004 fc25 	bl	800517c <HAL_TIM_ConfigClockSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000938:	f000 f946 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800093c:	481f      	ldr	r0, [pc, #124]	; (80009bc <MX_TIM4_Init+0x104>)
 800093e:	f004 f886 	bl	8004a4e <HAL_TIM_PWM_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000948:	f000 f93e 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4818      	ldr	r0, [pc, #96]	; (80009bc <MX_TIM4_Init+0x104>)
 800095c:	f005 f936 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000966:	f000 f92f 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096a:	2360      	movs	r3, #96	; 0x60
 800096c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1750;
 800096e:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8000972:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	480e      	ldr	r0, [pc, #56]	; (80009bc <MX_TIM4_Init+0x104>)
 8000984:	f004 faea 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800098e:	f000 f91b 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8000992:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	2204      	movs	r2, #4
 800099c:	4619      	mov	r1, r3
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <MX_TIM4_Init+0x104>)
 80009a0:	f004 fadc 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 80009aa:	f000 f90d 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <MX_TIM4_Init+0x104>)
 80009b0:	f000 fa66 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 80009b4:	bf00      	nop
 80009b6:	3738      	adds	r7, #56	; 0x38
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000b4 	.word	0x200000b4
 80009c0:	40000800 	.word	0x40000800

080009c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_USART2_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART2_UART_Init+0x58>)
 8000a08:	f005 f986 	bl	8005d18 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a12:	f000 f8d9 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000023c 	.word	0x2000023c
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a2a:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <MX_USART3_UART_Init+0x5c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a68:	f005 f956 	bl	8005d18 <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a72:	f000 f8a9 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000100 	.word	0x20000100
 8000a80:	40004800 	.word	0x40004800

08000a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_DMA_Init+0x38>)
 8000a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <MX_DMA_Init+0x38>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6493      	str	r3, [r2, #72]	; 0x48
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_DMA_Init+0x38>)
 8000a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	200b      	movs	r0, #11
 8000aa8:	f002 f87d 	bl	8002ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aac:	200b      	movs	r0, #11
 8000aae:	f002 f896 	bl	8002bde <HAL_NVIC_EnableIRQ>

}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a24      	ldr	r2, [pc, #144]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_GPIO_Init+0xc4>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2120      	movs	r1, #32
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f002 fc0b 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_GPIO_Init+0xc8>)
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_GPIO_Init+0xcc>)
 8000b58:	f002 fa54 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f002 fa45 	bl	8003004 <HAL_GPIO_Init>

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000
 8000b88:	10210000 	.word	0x10210000
 8000b8c:	48000800 	.word	0x48000800

08000b90 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void
HAL_UART_RxCpltCallback (UART_HandleTypeDef *UartHandle)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint8_t rx;

  if (UartHandle->Instance == USART3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_UART_RxCpltCallback+0x30>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d109      	bne.n	8000bb6 <HAL_UART_RxCpltCallback+0x26>
    {
      rx = (uint8_t) (UartHandle->Instance->RDR & (uint8_t) 0x00FF);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	73fb      	strb	r3, [r7, #15]
      RB_write (&gtUart2Fifo, rx);
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <HAL_UART_RxCpltCallback+0x34>)
 8000bb2:	f000 f80e 	bl	8000bd2 <RB_write>
    }
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004800 	.word	0x40004800
 8000bc4:	20000230 	.word	0x20000230

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>

08000bd2 <RB_write>:
		memset(ptRB->data, 0, ptRB->size);
}

void
RB_write(RingFifo_t * ptRB, unsigned char data)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	70fb      	strb	r3, [r7, #3]
  if(RB_isfull(ptRB))
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 f852 	bl	8000c88 <RB_isfull>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d116      	bne.n	8000c18 <RB_write+0x46>
    return;
    
	ptRB->data[ptRB->wrIdx] = data;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	8852      	ldrh	r2, [r2, #2]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	78fa      	ldrb	r2, [r7, #3]
 8000bf6:	701a      	strb	r2, [r3, #0]
	ptRB->wrIdx = (ptRB->size-1) & (ptRB->wrIdx+1);	
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	885b      	ldrh	r3, [r3, #2]
 8000c06:	3301      	adds	r3, #1
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	805a      	strh	r2, [r3, #2]
 8000c16:	e000      	b.n	8000c1a <RB_write+0x48>
    return;
 8000c18:	bf00      	nop
}
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <RB_read>:

unsigned char
RB_read(RingFifo_t * ptRB)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

	unsigned char val = ptRB->data[ptRB->rdIdx];
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	8892      	ldrh	r2, [r2, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	73fb      	strb	r3, [r7, #15]
	ptRB->rdIdx = (ptRB->size-1) & (ptRB->rdIdx+1);	
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	889b      	ldrh	r3, [r3, #4]
 8000c44:	3301      	adds	r3, #1
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	809a      	strh	r2, [r3, #4]
	
	return val;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <RB_isempty>:

unsigned char
RB_isempty(RingFifo_t * ptRB)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	return (ptRB->rdIdx == ptRB->wrIdx);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	889a      	ldrh	r2, [r3, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	885b      	ldrh	r3, [r3, #2]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	bf0c      	ite	eq
 8000c76:	2301      	moveq	r3, #1
 8000c78:	2300      	movne	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <RB_isfull>:

unsigned char
RB_isfull(RingFifo_t * ptRB)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	return ((ptRB->size-1) & ptRB->rdIdx) == ((ptRB->size-1) & (ptRB->wrIdx+1));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	889b      	ldrh	r3, [r3, #4]
 8000c94:	461a      	mov	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	885b      	ldrh	r3, [r3, #2]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	405a      	eors	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bf0c      	ite	eq
 8000caa:	2301      	moveq	r3, #1
 8000cac:	2300      	movne	r3, #0
 8000cae:	b2db      	uxtb	r3, r3
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ac      	sub	sp, #176	; 0xb0
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2288      	movs	r2, #136	; 0x88
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f005 fcf5 	bl	8006714 <memset>
  if(hadc->Instance==ADC1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a3c      	ldr	r2, [pc, #240]	; (8000e20 <HAL_ADC_MspInit+0x11c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d171      	bne.n	8000e18 <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8000d56:	2308      	movs	r3, #8
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 f95f 	bl	8004028 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000d70:	f7ff ff2a 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <HAL_ADC_MspInit+0x120>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <HAL_ADC_MspInit+0x120>)
 8000d7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <HAL_ADC_MspInit+0x120>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8c:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <HAL_ADC_MspInit+0x120>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d90:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <HAL_ADC_MspInit+0x120>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <HAL_ADC_MspInit+0x120>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CDS1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000da4:	230f      	movs	r3, #15
 8000da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000daa:	230b      	movs	r3, #11
 8000dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	481a      	ldr	r0, [pc, #104]	; (8000e28 <HAL_ADC_MspInit+0x124>)
 8000dbe:	f002 f921 	bl	8003004 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000dc4:	4a1a      	ldr	r2, [pc, #104]	; (8000e30 <HAL_ADC_MspInit+0x12c>)
 8000dc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000df2:	2220      	movs	r2, #32
 8000df4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000dfe:	f001 ff09 	bl	8002c14 <HAL_DMA_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000e08:	f7ff fede 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000e10:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_ADC_MspInit+0x128>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	37b0      	adds	r7, #176	; 0xb0
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	50040000 	.word	0x50040000
 8000e24:	40021000 	.word	0x40021000
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	200001e8 	.word	0x200001e8
 8000e30:	40020008 	.word	0x40020008

08000e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <HAL_TIM_Base_MspInit+0x44>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d113      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_TIM_Base_MspInit+0x48>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <HAL_TIM_Base_MspInit+0x48>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6593      	str	r3, [r2, #88]	; 0x58
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_TIM_Base_MspInit+0x48>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	201e      	movs	r0, #30
 8000e64:	f001 fe9f 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e68:	201e      	movs	r0, #30
 8000e6a:	f001 feb8 	bl	8002bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40000800 	.word	0x40000800
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <HAL_TIM_MspPostInit+0x64>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d11b      	bne.n	8000eda <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_TIM_MspPostInit+0x68>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <HAL_TIM_MspPostInit+0x68>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_TIM_MspPostInit+0x68>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eba:	23c0      	movs	r3, #192	; 0xc0
 8000ebc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_TIM_MspPostInit+0x6c>)
 8000ed6:	f002 f895 	bl	8003004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3720      	adds	r7, #32
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40000800 	.word	0x40000800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	48000400 	.word	0x48000400

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ae      	sub	sp, #184	; 0xb8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	2288      	movs	r2, #136	; 0x88
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f005 fbff 	bl	8006714 <memset>
  if(huart->Instance==USART2)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a4a      	ldr	r2, [pc, #296]	; (8001044 <HAL_UART_MspInit+0x154>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d144      	bne.n	8000faa <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 f87b 	bl	8004028 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f38:	f7ff fe46 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3c:	4b42      	ldr	r3, [pc, #264]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f40:	4a41      	ldr	r2, [pc, #260]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f46:	6593      	str	r3, [r2, #88]	; 0x58
 8000f48:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b3c      	ldr	r3, [pc, #240]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	4a3b      	ldr	r2, [pc, #236]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f60:	4b39      	ldr	r3, [pc, #228]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f84:	2307      	movs	r3, #7
 8000f86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f002 f836 	bl	8003004 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2026      	movs	r0, #38	; 0x26
 8000f9e:	f001 fe02 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fa2:	2026      	movs	r0, #38	; 0x26
 8000fa4:	f001 fe1b 	bl	8002bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fa8:	e047      	b.n	800103a <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a27      	ldr	r2, [pc, #156]	; (800104c <HAL_UART_MspInit+0x15c>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d142      	bne.n	800103a <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 f831 	bl	8004028 <HAL_RCCEx_PeriphCLKConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000fcc:	f7ff fdfc 	bl	8000bc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fda:	6593      	str	r3, [r2, #88]	; 0x58
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	4a16      	ldr	r2, [pc, #88]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_UART_MspInit+0x158>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001000:	2330      	movs	r3, #48	; 0x30
 8001002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001018:	2307      	movs	r3, #7
 800101a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001022:	4619      	mov	r1, r3
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <HAL_UART_MspInit+0x160>)
 8001026:	f001 ffed 	bl	8003004 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2027      	movs	r0, #39	; 0x27
 8001030:	f001 fdb9 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001034:	2027      	movs	r0, #39	; 0x27
 8001036:	f001 fdd2 	bl	8002bde <HAL_NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	37b8      	adds	r7, #184	; 0xb8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40004400 	.word	0x40004400
 8001048:	40021000 	.word	0x40021000
 800104c:	40004800 	.word	0x40004800
 8001050:	48000800 	.word	0x48000800

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f996 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA1_Channel1_IRQHandler+0x10>)
 80010ae:	f001 fec9 	bl	8002e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001e8 	.word	0x200001e8

080010bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <TIM4_IRQHandler+0x10>)
 80010c2:	f003 fe2b 	bl	8004d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000b4 	.word	0x200000b4

080010d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	*/
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
		Index++;
	}
	__HAL_UART_CLEAR_PEFLAG(&huart3);
	*/

	if ((__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(&huart3, UART_IT_RXNE) != RESET))
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <USART3_IRQHandler+0x34>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 0320 	and.w	r3, r3, #32
 80010ee:	2b20      	cmp	r3, #32
 80010f0:	d10d      	bne.n	800110e <USART3_IRQHandler+0x2e>
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <USART3_IRQHandler+0x34>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d006      	beq.n	800110e <USART3_IRQHandler+0x2e>
	{
		HAL_UART_RxCpltCallback (&huart3);
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <USART3_IRQHandler+0x34>)
 8001102:	f7ff fd45 	bl	8000b90 <HAL_UART_RxCpltCallback>
	    __HAL_UART_CLEAR_PEFLAG(&huart3);
 8001106:	4b03      	ldr	r3, [pc, #12]	; (8001114 <USART3_IRQHandler+0x34>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2201      	movs	r2, #1
 800110c:	621a      	str	r2, [r3, #32]

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000100 	.word	0x20000100

08001118 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	e00a      	b.n	8001140 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800112a:	f3af 8000 	nop.w
 800112e:	4601      	mov	r1, r0
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	b2ca      	uxtb	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbf0      	blt.n	800112a <_read+0x12>
	}

return len;
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e009      	b.n	8001178 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9af 	bl	80004d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbf1      	blt.n	8001164 <_write+0x12>
	}
	return len;
 8001180:	687b      	ldr	r3, [r7, #4]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_close>:

int _close(int file)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	return -1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b2:	605a      	str	r2, [r3, #4]
	return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_isatty>:

int _isatty(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	return 1;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
	return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <_sbrk+0x5c>)
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <_sbrk+0x60>)
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <_sbrk+0x64>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <_sbrk+0x64>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <_sbrk+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	429a      	cmp	r2, r3
 8001222:	d207      	bcs.n	8001234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001224:	f005 fa4c 	bl	80066c0 <__errno>
 8001228:	4603      	mov	r3, r0
 800122a:	220c      	movs	r2, #12
 800122c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	e009      	b.n	8001248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <_sbrk+0x64>)
 8001244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20018000 	.word	0x20018000
 8001254:	00000400 	.word	0x00000400
 8001258:	2000008c 	.word	0x2000008c
 800125c:	200002d8 	.word	0x200002d8

08001260 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <SystemInit+0x5c>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126a:	4a14      	ldr	r2, [pc, #80]	; (80012bc <SystemInit+0x5c>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <SystemInit+0x60>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <SystemInit+0x60>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <SystemInit+0x60>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <SystemInit+0x60>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <SystemInit+0x60>)
 800128c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001290:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001294:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <SystemInit+0x60>)
 8001298:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800129c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <SystemInit+0x60>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <SystemInit+0x60>)
 80012a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SystemInit+0x60>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00
 80012c0:	40021000 	.word	0x40021000

080012c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c8:	f7ff ffca 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012ce:	e003      	b.n	80012d8 <LoopCopyDataInit>

080012d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012d6:	3104      	adds	r1, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012d8:	480a      	ldr	r0, [pc, #40]	; (8001304 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012e0:	d3f6      	bcc.n	80012d0 <CopyDataInit>
	ldr	r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <LoopForever+0x12>)
	b	LoopFillZerobss
 80012e4:	e002      	b.n	80012ec <LoopFillZerobss>

080012e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012e8:	f842 3b04 	str.w	r3, [r2], #4

080012ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <LoopForever+0x16>)
	cmp	r2, r3
 80012ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012f0:	d3f9      	bcc.n	80012e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f2:	f005 f9eb 	bl	80066cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f6:	f7ff f997 	bl	8000628 <main>

080012fa <LoopForever>:

LoopForever:
    b LoopForever
 80012fa:	e7fe      	b.n	80012fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001300:	080072d8 	.word	0x080072d8
	ldr	r0, =_sdata
 8001304:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001308:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800130c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001310:	200002d4 	.word	0x200002d4

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>
	...

08001318 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_Init+0x3c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_Init+0x3c>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132e:	2003      	movs	r0, #3
 8001330:	f001 fc2e 	bl	8002b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001334:	2000      	movs	r0, #0
 8001336:	f000 f80f 	bl	8001358 <HAL_InitTick>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	e001      	b.n	800134a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001346:	f7ff fcb9 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800134a:	79fb      	ldrb	r3, [r7, #7]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40022000 	.word	0x40022000

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_InitTick+0x6c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d023      	beq.n	80013b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_InitTick+0x70>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_InitTick+0x6c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fc39 	bl	8002bfa <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10f      	bne.n	80013ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d809      	bhi.n	80013a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001394:	2200      	movs	r2, #0
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f001 fc03 	bl	8002ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_InitTick+0x74>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e007      	b.n	80013b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e004      	b.n	80013b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e001      	b.n	80013b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008
 80013f4:	200002c0 	.word	0x200002c0

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200002c0 	.word	0x200002c0

08001410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff ffee 	bl	80013f8 <HAL_GetTick>
 800141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d005      	beq.n	8001436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_Delay+0x44>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001436:	bf00      	nop
 8001438:	f7ff ffde 	bl	80013f8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8f7      	bhi.n	8001438 <HAL_Delay+0x28>
  {
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008

08001458 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	609a      	str	r2, [r3, #8]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	609a      	str	r2, [r3, #8]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3360      	adds	r3, #96	; 0x60
 80014d2:	461a      	mov	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <LL_ADC_SetOffset+0x44>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	4313      	orrs	r3, r2
 80014f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014f8:	bf00      	nop
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	03fff000 	.word	0x03fff000

08001508 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3360      	adds	r3, #96	; 0x60
 8001516:	461a      	mov	r2, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3360      	adds	r3, #96	; 0x60
 8001544:	461a      	mov	r2, r3
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3330      	adds	r3, #48	; 0x30
 80015a0:	461a      	mov	r2, r3
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	4413      	add	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	211f      	movs	r1, #31
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	0e9b      	lsrs	r3, r3, #26
 80015c8:	f003 011f 	and.w	r1, r3, #31
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	431a      	orrs	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015dc:	bf00      	nop
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3314      	adds	r3, #20
 80015f8:	461a      	mov	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	0e5b      	lsrs	r3, r3, #25
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	4413      	add	r3, r2
 8001606:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	0d1b      	lsrs	r3, r3, #20
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	2107      	movs	r1, #7
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	401a      	ands	r2, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	0d1b      	lsrs	r3, r3, #20
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	431a      	orrs	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001632:	bf00      	nop
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001658:	43db      	mvns	r3, r3
 800165a:	401a      	ands	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0318 	and.w	r3, r3, #24
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001664:	40d9      	lsrs	r1, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	400b      	ands	r3, r1
 800166a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800166e:	431a      	orrs	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	0007ffff 	.word	0x0007ffff

08001688 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 031f 	and.w	r3, r3, #31
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6093      	str	r3, [r2, #8]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016dc:	d101      	bne.n	80016e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001704:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800172c:	d101      	bne.n	8001732 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001750:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001754:	f043 0201 	orr.w	r2, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001778:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800177c:	f043 0202 	orr.w	r2, r3, #2
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <LL_ADC_IsEnabled+0x18>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <LL_ADC_IsEnabled+0x1a>
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d101      	bne.n	80017ce <LL_ADC_IsDisableOngoing+0x18>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <LL_ADC_IsDisableOngoing+0x1a>
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017f0:	f043 0204 	orr.w	r2, r3, #4
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b04      	cmp	r3, #4
 8001816:	d101      	bne.n	800181c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b08      	cmp	r3, #8
 800183c:	d101      	bne.n	8001842 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e136      	b.n	8001ad8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fa43 	bl	8000d04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff19 	bl	80016c8 <LL_ADC_IsDeepPowerDownEnabled>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff feff 	bl	80016a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff34 	bl	8001718 <LL_ADC_IsInternalRegulatorEnabled>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d115      	bne.n	80018e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff18 	bl	80016f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018c0:	4b87      	ldr	r3, [pc, #540]	; (8001ae0 <HAL_ADC_Init+0x290>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	099b      	lsrs	r3, r3, #6
 80018c6:	4a87      	ldr	r2, [pc, #540]	; (8001ae4 <HAL_ADC_Init+0x294>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	3301      	adds	r3, #1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018d4:	e002      	b.n	80018dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f9      	bne.n	80018d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff16 	bl	8001718 <LL_ADC_IsInternalRegulatorEnabled>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10d      	bne.n	800190e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f043 0210 	orr.w	r2, r3, #16
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	f043 0201 	orr.w	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff76 	bl	8001804 <LL_ADC_REG_IsConversionOngoing>
 8001918:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 80cf 	bne.w	8001ac6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f040 80cb 	bne.w	8001ac6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001934:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001938:	f043 0202 	orr.w	r2, r3, #2
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff23 	bl	8001790 <LL_ADC_IsEnabled>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d115      	bne.n	800197c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001950:	4865      	ldr	r0, [pc, #404]	; (8001ae8 <HAL_ADC_Init+0x298>)
 8001952:	f7ff ff1d 	bl	8001790 <LL_ADC_IsEnabled>
 8001956:	4604      	mov	r4, r0
 8001958:	4864      	ldr	r0, [pc, #400]	; (8001aec <HAL_ADC_Init+0x29c>)
 800195a:	f7ff ff19 	bl	8001790 <LL_ADC_IsEnabled>
 800195e:	4603      	mov	r3, r0
 8001960:	431c      	orrs	r4, r3
 8001962:	4863      	ldr	r0, [pc, #396]	; (8001af0 <HAL_ADC_Init+0x2a0>)
 8001964:	f7ff ff14 	bl	8001790 <LL_ADC_IsEnabled>
 8001968:	4603      	mov	r3, r0
 800196a:	4323      	orrs	r3, r4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4619      	mov	r1, r3
 8001976:	485f      	ldr	r0, [pc, #380]	; (8001af4 <HAL_ADC_Init+0x2a4>)
 8001978:	f7ff fd6e 	bl	8001458 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7e5b      	ldrb	r3, [r3, #25]
 8001980:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001986:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800198c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001992:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d106      	bne.n	80019b8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	3b01      	subs	r3, #1
 80019b0:	045b      	lsls	r3, r3, #17
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d009      	beq.n	80019d4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_ADC_Init+0x2a8>)
 80019dc:	4013      	ands	r3, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff09 	bl	8001804 <LL_ADC_REG_IsConversionOngoing>
 80019f2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff16 	bl	800182a <LL_ADC_INJ_IsConversionOngoing>
 80019fe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d13d      	bne.n	8001a82 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d13a      	bne.n	8001a82 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a10:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a18:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a28:	f023 0302 	bic.w	r3, r3, #2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	69b9      	ldr	r1, [r7, #24]
 8001a32:	430b      	orrs	r3, r1
 8001a34:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d118      	bne.n	8001a72 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a4a:	f023 0304 	bic.w	r3, r3, #4
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a56:	4311      	orrs	r1, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a62:	430a      	orrs	r2, r1
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	e007      	b.n	8001a82 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d10c      	bne.n	8001aa4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	f023 010f 	bic.w	r1, r3, #15
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa2:	e007      	b.n	8001ab4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 020f 	bic.w	r2, r2, #15
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	f023 0303 	bic.w	r3, r3, #3
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
 8001ac4:	e007      	b.n	8001ad6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ad6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3724      	adds	r7, #36	; 0x24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	053e2d63 	.word	0x053e2d63
 8001ae8:	50040000 	.word	0x50040000
 8001aec:	50040100 	.word	0x50040100
 8001af0:	50040200 	.word	0x50040200
 8001af4:	50040300 	.word	0x50040300
 8001af8:	fff0c007 	.word	0xfff0c007

08001afc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b08:	4850      	ldr	r0, [pc, #320]	; (8001c4c <HAL_ADC_Start_DMA+0x150>)
 8001b0a:	f7ff fdbd 	bl	8001688 <LL_ADC_GetMultimode>
 8001b0e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fe75 	bl	8001804 <LL_ADC_REG_IsConversionOngoing>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f040 808e 	bne.w	8001c3e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_Start_DMA+0x34>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e089      	b.n	8001c44 <HAL_ADC_Start_DMA+0x148>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d002      	beq.n	8001b4a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b09      	cmp	r3, #9
 8001b48:	d172      	bne.n	8001c30 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fc98 	bl	8002480 <ADC_Enable>
 8001b50:	4603      	mov	r3, r0
 8001b52:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d165      	bne.n	8001c26 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a37      	ldr	r2, [pc, #220]	; (8001c50 <HAL_ADC_Start_DMA+0x154>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d002      	beq.n	8001b7e <HAL_ADC_Start_DMA+0x82>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e000      	b.n	8001b80 <HAL_ADC_Start_DMA+0x84>
 8001b7e:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <HAL_ADC_Start_DMA+0x158>)
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d002      	beq.n	8001b8e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	f023 0206 	bic.w	r2, r3, #6
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb2:	e002      	b.n	8001bba <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <HAL_ADC_Start_DMA+0x15c>)
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <HAL_ADC_Start_DMA+0x160>)
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <HAL_ADC_Start_DMA+0x164>)
 8001bd0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	221c      	movs	r2, #28
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0210 	orr.w	r2, r2, #16
 8001bf0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0201 	orr.w	r2, r2, #1
 8001c00:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3340      	adds	r3, #64	; 0x40
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f001 f8b7 	bl	8002d84 <HAL_DMA_Start_IT>
 8001c16:	4603      	mov	r3, r0
 8001c18:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fddc 	bl	80017dc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001c24:	e00d      	b.n	8001c42 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001c2e:	e008      	b.n	8001c42 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c3c:	e001      	b.n	8001c42 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	50040300 	.word	0x50040300
 8001c50:	50040100 	.word	0x50040100
 8001c54:	50040000 	.word	0x50040000
 8001c58:	08002603 	.word	0x08002603
 8001c5c:	080026db 	.word	0x080026db
 8001c60:	080026f7 	.word	0x080026f7

08001c64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0b6      	sub	sp, #216	; 0xd8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x22>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e3c7      	b.n	8002452 <HAL_ADC_ConfigChannel+0x7b2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fd98 	bl	8001804 <LL_ADC_REG_IsConversionOngoing>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 83a8 	bne.w	800242c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d824      	bhi.n	8001d2e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	3b02      	subs	r3, #2
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d81b      	bhi.n	8001d26 <HAL_ADC_ConfigChannel+0x86>
 8001cee:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <HAL_ADC_ConfigChannel+0x54>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d0d 	.word	0x08001d0d
 8001cfc:	08001d15 	.word	0x08001d15
 8001d00:	08001d1d 	.word	0x08001d1d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	220c      	movs	r2, #12
 8001d08:	605a      	str	r2, [r3, #4]
          break;
 8001d0a:	e011      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2212      	movs	r2, #18
 8001d10:	605a      	str	r2, [r3, #4]
          break;
 8001d12:	e00d      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2218      	movs	r2, #24
 8001d18:	605a      	str	r2, [r3, #4]
          break;
 8001d1a:	e009      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d22:	605a      	str	r2, [r3, #4]
          break;
 8001d24:	e004      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2206      	movs	r2, #6
 8001d2a:	605a      	str	r2, [r3, #4]
          break;
 8001d2c:	e000      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d2e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f7ff fc27 	bl	8001590 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fd5c 	bl	8001804 <LL_ADC_REG_IsConversionOngoing>
 8001d4c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fd68 	bl	800182a <LL_ADC_INJ_IsConversionOngoing>
 8001d5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 81a6 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f040 81a1 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6819      	ldr	r1, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f7ff fc32 	bl	80015e8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d00a      	beq.n	8001dbc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001db6:	f7ff fb83 	bl	80014c0 <LL_ADC_SetOffset>
 8001dba:	e17b      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fba0 	bl	8001508 <LL_ADC_GetOffsetChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10a      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x148>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fb95 	bl	8001508 <LL_ADC_GetOffsetChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	f003 021f 	and.w	r2, r3, #31
 8001de6:	e01e      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x186>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fb8a 	bl	8001508 <LL_ADC_GetOffsetChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e16:	2320      	movs	r3, #32
 8001e18:	e004      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d105      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x19e>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0e9b      	lsrs	r3, r3, #26
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	e018      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x1d0>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001e62:	2320      	movs	r3, #32
 8001e64:	e004      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001e66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d106      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fb59 	bl	8001534 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2101      	movs	r1, #1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fb3d 	bl	8001508 <LL_ADC_GetOffsetChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10a      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x20e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fb32 	bl	8001508 <LL_ADC_GetOffsetChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	0e9b      	lsrs	r3, r3, #26
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	e01e      	b.n	8001eec <HAL_ADC_ConfigChannel+0x24c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fb27 	bl	8001508 <LL_ADC_GetOffsetChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ecc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ed4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001edc:	2320      	movs	r3, #32
 8001ede:	e004      	b.n	8001eea <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001ee0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x264>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	e018      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x296>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	e004      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d106      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2101      	movs	r1, #1
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff faf6 	bl	8001534 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fada 	bl	8001508 <LL_ADC_GetOffsetChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10a      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x2d4>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2102      	movs	r1, #2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff facf 	bl	8001508 <LL_ADC_GetOffsetChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	f003 021f 	and.w	r2, r3, #31
 8001f72:	e01e      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x312>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fac4 	bl	8001508 <LL_ADC_GetOffsetChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	e004      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x32a>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	0e9b      	lsrs	r3, r3, #26
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	e016      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x358>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001fe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001fea:	2320      	movs	r3, #32
 8001fec:	e004      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d106      	bne.n	800200a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2200      	movs	r2, #0
 8002002:	2102      	movs	r1, #2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fa95 	bl	8001534 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2103      	movs	r1, #3
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fa79 	bl	8001508 <LL_ADC_GetOffsetChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10a      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x396>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2103      	movs	r1, #3
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fa6e 	bl	8001508 <LL_ADC_GetOffsetChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	0e9b      	lsrs	r3, r3, #26
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	e017      	b.n	8002066 <HAL_ADC_ConfigChannel+0x3c6>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2103      	movs	r1, #3
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fa63 	bl	8001508 <LL_ADC_GetOffsetChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800204e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002050:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002058:	2320      	movs	r3, #32
 800205a:	e003      	b.n	8002064 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800205c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_ADC_ConfigChannel+0x3de>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	e011      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x402>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800208c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800208e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002096:	2320      	movs	r3, #32
 8002098:	e003      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800209a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d106      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2200      	movs	r2, #0
 80020ac:	2103      	movs	r1, #3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fa40 	bl	8001534 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fb69 	bl	8001790 <LL_ADC_IsEnabled>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f040 813f 	bne.w	8002344 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6819      	ldr	r1, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f7ff fab4 	bl	8001640 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a8e      	ldr	r2, [pc, #568]	; (8002318 <HAL_ADC_ConfigChannel+0x678>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	f040 8130 	bne.w	8002344 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10b      	bne.n	800210c <HAL_ADC_ConfigChannel+0x46c>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0e9b      	lsrs	r3, r3, #26
 80020fa:	3301      	adds	r3, #1
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	2b09      	cmp	r3, #9
 8002102:	bf94      	ite	ls
 8002104:	2301      	movls	r3, #1
 8002106:	2300      	movhi	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e019      	b.n	8002140 <HAL_ADC_ConfigChannel+0x4a0>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800211a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800211c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800211e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e003      	b.n	8002130 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3301      	adds	r3, #1
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	2b09      	cmp	r3, #9
 8002138:	bf94      	ite	ls
 800213a:	2301      	movls	r3, #1
 800213c:	2300      	movhi	r3, #0
 800213e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002140:	2b00      	cmp	r3, #0
 8002142:	d079      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x4c0>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	3301      	adds	r3, #1
 8002158:	069b      	lsls	r3, r3, #26
 800215a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800215e:	e015      	b.n	800218c <HAL_ADC_ConfigChannel+0x4ec>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800216e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002170:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002178:	2320      	movs	r3, #32
 800217a:	e003      	b.n	8002184 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800217c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3301      	adds	r3, #1
 8002186:	069b      	lsls	r3, r3, #26
 8002188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x50c>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	3301      	adds	r3, #1
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	e017      	b.n	80021dc <HAL_ADC_ConfigChannel+0x53c>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80021c4:	2320      	movs	r3, #32
 80021c6:	e003      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80021c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	ea42 0103 	orr.w	r1, r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x562>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	3301      	adds	r3, #1
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	051b      	lsls	r3, r3, #20
 8002200:	e018      	b.n	8002234 <HAL_ADC_ConfigChannel+0x594>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e003      	b.n	8002226 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800221e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002234:	430b      	orrs	r3, r1
 8002236:	e080      	b.n	800233a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002240:	2b00      	cmp	r3, #0
 8002242:	d107      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x5b4>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	3301      	adds	r3, #1
 800224c:	069b      	lsls	r3, r3, #26
 800224e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002252:	e015      	b.n	8002280 <HAL_ADC_ConfigChannel+0x5e0>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800226c:	2320      	movs	r3, #32
 800226e:	e003      	b.n	8002278 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3301      	adds	r3, #1
 800227a:	069b      	lsls	r3, r3, #26
 800227c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x600>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	3301      	adds	r3, #1
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	e017      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x630>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	61fb      	str	r3, [r7, #28]
  return result;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2101      	movs	r1, #1
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	ea42 0103 	orr.w	r1, r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10d      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x65c>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	3301      	adds	r3, #1
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	3b1e      	subs	r3, #30
 80022f4:	051b      	lsls	r3, r3, #20
 80022f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022fa:	e01d      	b.n	8002338 <HAL_ADC_ConfigChannel+0x698>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	613b      	str	r3, [r7, #16]
  return result;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d103      	bne.n	800231c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002314:	2320      	movs	r3, #32
 8002316:	e005      	b.n	8002324 <HAL_ADC_ConfigChannel+0x684>
 8002318:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3301      	adds	r3, #1
 8002326:	f003 021f 	and.w	r2, r3, #31
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	3b1e      	subs	r3, #30
 8002332:	051b      	lsls	r3, r3, #20
 8002334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002338:	430b      	orrs	r3, r1
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	6892      	ldr	r2, [r2, #8]
 800233e:	4619      	mov	r1, r3
 8002340:	f7ff f952 	bl	80015e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b44      	ldr	r3, [pc, #272]	; (800245c <HAL_ADC_ConfigChannel+0x7bc>)
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d07a      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002350:	4843      	ldr	r0, [pc, #268]	; (8002460 <HAL_ADC_ConfigChannel+0x7c0>)
 8002352:	f7ff f8a7 	bl	80014a4 <LL_ADC_GetCommonPathInternalCh>
 8002356:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a41      	ldr	r2, [pc, #260]	; (8002464 <HAL_ADC_ConfigChannel+0x7c4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d12c      	bne.n	80023be <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d126      	bne.n	80023be <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3c      	ldr	r2, [pc, #240]	; (8002468 <HAL_ADC_ConfigChannel+0x7c8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d004      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x6e4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a3b      	ldr	r2, [pc, #236]	; (800246c <HAL_ADC_ConfigChannel+0x7cc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d15d      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002388:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800238c:	4619      	mov	r1, r3
 800238e:	4834      	ldr	r0, [pc, #208]	; (8002460 <HAL_ADC_ConfigChannel+0x7c0>)
 8002390:	f7ff f875 	bl	800147e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002394:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_ADC_ConfigChannel+0x7d0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	4a36      	ldr	r2, [pc, #216]	; (8002474 <HAL_ADC_ConfigChannel+0x7d4>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	099b      	lsrs	r3, r3, #6
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023ae:	e002      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f9      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023bc:	e040      	b.n	8002440 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2d      	ldr	r2, [pc, #180]	; (8002478 <HAL_ADC_ConfigChannel+0x7d8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d118      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x75a>
 80023c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d112      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a23      	ldr	r2, [pc, #140]	; (8002468 <HAL_ADC_ConfigChannel+0x7c8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_ADC_ConfigChannel+0x748>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a22      	ldr	r2, [pc, #136]	; (800246c <HAL_ADC_ConfigChannel+0x7cc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d12d      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f0:	4619      	mov	r1, r3
 80023f2:	481b      	ldr	r0, [pc, #108]	; (8002460 <HAL_ADC_ConfigChannel+0x7c0>)
 80023f4:	f7ff f843 	bl	800147e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f8:	e024      	b.n	8002444 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1f      	ldr	r2, [pc, #124]	; (800247c <HAL_ADC_ConfigChannel+0x7dc>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d120      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11a      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <HAL_ADC_ConfigChannel+0x7c8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d115      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800241a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800241e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002422:	4619      	mov	r1, r3
 8002424:	480e      	ldr	r0, [pc, #56]	; (8002460 <HAL_ADC_ConfigChannel+0x7c0>)
 8002426:	f7ff f82a 	bl	800147e <LL_ADC_SetCommonPathInternalCh>
 800242a:	e00c      	b.n	8002446 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	f043 0220 	orr.w	r2, r3, #32
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800243e:	e002      	b.n	8002446 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002440:	bf00      	nop
 8002442:	e000      	b.n	8002446 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800244e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002452:	4618      	mov	r0, r3
 8002454:	37d8      	adds	r7, #216	; 0xd8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	80080000 	.word	0x80080000
 8002460:	50040300 	.word	0x50040300
 8002464:	c7520000 	.word	0xc7520000
 8002468:	50040000 	.word	0x50040000
 800246c:	50040200 	.word	0x50040200
 8002470:	20000000 	.word	0x20000000
 8002474:	053e2d63 	.word	0x053e2d63
 8002478:	cb840000 	.word	0xcb840000
 800247c:	80000001 	.word	0x80000001

08002480 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff f97f 	bl	8001790 <LL_ADC_IsEnabled>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d14d      	bne.n	8002534 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	4b28      	ldr	r3, [pc, #160]	; (8002540 <ADC_Enable+0xc0>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00d      	beq.n	80024c2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e039      	b.n	8002536 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f93a 	bl	8001740 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024cc:	f7fe ff94 	bl	80013f8 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024d2:	e028      	b.n	8002526 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff f959 	bl	8001790 <LL_ADC_IsEnabled>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d104      	bne.n	80024ee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f929 	bl	8001740 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ee:	f7fe ff83 	bl	80013f8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d914      	bls.n	8002526 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d00d      	beq.n	8002526 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f043 0210 	orr.w	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	f043 0201 	orr.w	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e007      	b.n	8002536 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d1cf      	bne.n	80024d4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	8000003f 	.word	0x8000003f

08002544 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff f930 	bl	80017b6 <LL_ADC_IsDisableOngoing>
 8002556:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f917 	bl	8001790 <LL_ADC_IsEnabled>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d047      	beq.n	80025f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d144      	bne.n	80025f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030d 	and.w	r3, r3, #13
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10c      	bne.n	8002596 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff f8f1 	bl	8001768 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2203      	movs	r2, #3
 800258c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800258e:	f7fe ff33 	bl	80013f8 <HAL_GetTick>
 8002592:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002594:	e029      	b.n	80025ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f043 0210 	orr.w	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e023      	b.n	80025fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025b2:	f7fe ff21 	bl	80013f8 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d914      	bls.n	80025ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00d      	beq.n	80025ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	f043 0210 	orr.w	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e007      	b.n	80025fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1dc      	bne.n	80025b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002618:	2b00      	cmp	r3, #0
 800261a:	d14b      	bne.n	80026b4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d021      	beq.n	800267a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe ff95 	bl	800156a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d032      	beq.n	80026ac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d12b      	bne.n	80026ac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d11f      	bne.n	80026ac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	655a      	str	r2, [r3, #84]	; 0x54
 8002678:	e018      	b.n	80026ac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d111      	bne.n	80026ac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7ff fad9 	bl	8001c64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80026b2:	e00e      	b.n	80026d2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7ff fae3 	bl	8001c8c <HAL_ADC_ErrorCallback>
}
 80026c6:	e004      	b.n	80026d2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff fac5 	bl	8001c78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002714:	f043 0204 	orr.w	r2, r3, #4
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7ff fab5 	bl	8001c8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <LL_ADC_IsEnabled>:
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <LL_ADC_IsEnabled+0x18>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <LL_ADC_IsEnabled+0x1a>
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_StartCalibration>:
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002762:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800276c:	4313      	orrs	r3, r2
 800276e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	609a      	str	r2, [r3, #8]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_ADC_IsCalibrationOnGoing>:
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002796:	d101      	bne.n	800279c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_ADC_REG_IsConversionOngoing>:
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d101      	bne.n	80027c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_ADCEx_Calibration_Start+0x1c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e04d      	b.n	8002888 <HAL_ADCEx_Calibration_Start+0xb8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff fea5 	bl	8002544 <ADC_Disable>
 80027fa:	4603      	mov	r3, r0
 80027fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d136      	bne.n	8002872 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800280c:	f023 0302 	bic.w	r3, r3, #2
 8002810:	f043 0202 	orr.w	r2, r3, #2
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff96 	bl	8002750 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002824:	e014      	b.n	8002850 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3301      	adds	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002832:	d30d      	bcc.n	8002850 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002838:	f023 0312 	bic.w	r3, r3, #18
 800283c:	f043 0210 	orr.w	r2, r3, #16
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e01b      	b.n	8002888 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff94 	bl	8002782 <LL_ADC_IsCalibrationOnGoing>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e2      	bne.n	8002826 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002864:	f023 0303 	bic.w	r3, r3, #3
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
 8002870:	e005      	b.n	800287e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b09f      	sub	sp, #124	; 0x7c
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e093      	b.n	80029d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80028b6:	2300      	movs	r3, #0
 80028b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80028ba:	2300      	movs	r3, #0
 80028bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a47      	ldr	r2, [pc, #284]	; (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d102      	bne.n	80028ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028c8:	4b46      	ldr	r3, [pc, #280]	; (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	e001      	b.n	80028d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10b      	bne.n	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e072      	b.n	80029d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ff59 	bl	80027aa <LL_ADC_REG_IsConversionOngoing>
 80028f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff53 	bl	80027aa <LL_ADC_REG_IsConversionOngoing>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d154      	bne.n	80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800290a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800290c:	2b00      	cmp	r3, #0
 800290e:	d151      	bne.n	80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002912:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d02c      	beq.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800291c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800292e:	035b      	lsls	r3, r3, #13
 8002930:	430b      	orrs	r3, r1
 8002932:	431a      	orrs	r2, r3
 8002934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002936:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002938:	4829      	ldr	r0, [pc, #164]	; (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800293a:	f7ff fef6 	bl	800272a <LL_ADC_IsEnabled>
 800293e:	4604      	mov	r4, r0
 8002940:	4828      	ldr	r0, [pc, #160]	; (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002942:	f7ff fef2 	bl	800272a <LL_ADC_IsEnabled>
 8002946:	4603      	mov	r3, r0
 8002948:	431c      	orrs	r4, r3
 800294a:	4828      	ldr	r0, [pc, #160]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800294c:	f7ff feed 	bl	800272a <LL_ADC_IsEnabled>
 8002950:	4603      	mov	r3, r0
 8002952:	4323      	orrs	r3, r4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d137      	bne.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002960:	f023 030f 	bic.w	r3, r3, #15
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	6811      	ldr	r1, [r2, #0]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	6892      	ldr	r2, [r2, #8]
 800296c:	430a      	orrs	r2, r1
 800296e:	431a      	orrs	r2, r3
 8002970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002972:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002974:	e028      	b.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002980:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002982:	4817      	ldr	r0, [pc, #92]	; (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002984:	f7ff fed1 	bl	800272a <LL_ADC_IsEnabled>
 8002988:	4604      	mov	r4, r0
 800298a:	4816      	ldr	r0, [pc, #88]	; (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800298c:	f7ff fecd 	bl	800272a <LL_ADC_IsEnabled>
 8002990:	4603      	mov	r3, r0
 8002992:	431c      	orrs	r4, r3
 8002994:	4815      	ldr	r0, [pc, #84]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002996:	f7ff fec8 	bl	800272a <LL_ADC_IsEnabled>
 800299a:	4603      	mov	r3, r0
 800299c:	4323      	orrs	r3, r4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d112      	bne.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029aa:	f023 030f 	bic.w	r3, r3, #15
 80029ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029b2:	e009      	b.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80029c6:	e000      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	377c      	adds	r7, #124	; 0x7c
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	bf00      	nop
 80029e0:	50040000 	.word	0x50040000
 80029e4:	50040100 	.word	0x50040100
 80029e8:	50040300 	.word	0x50040300
 80029ec:	50040200 	.word	0x50040200

080029f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	db0b      	blt.n	8002a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4907      	ldr	r1, [pc, #28]	; (8002a8c <__NVIC_EnableIRQ+0x38>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2001      	movs	r0, #1
 8002a76:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000e100 	.word	0xe000e100

08002a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	db0a      	blt.n	8002aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	490c      	ldr	r1, [pc, #48]	; (8002adc <__NVIC_SetPriority+0x4c>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	0112      	lsls	r2, r2, #4
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab8:	e00a      	b.n	8002ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4908      	ldr	r1, [pc, #32]	; (8002ae0 <__NVIC_SetPriority+0x50>)
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	3b04      	subs	r3, #4
 8002ac8:	0112      	lsls	r2, r2, #4
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	440b      	add	r3, r1
 8002ace:	761a      	strb	r2, [r3, #24]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	; 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f1c3 0307 	rsb	r3, r3, #7
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	bf28      	it	cs
 8002b02:	2304      	movcs	r3, #4
 8002b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d902      	bls.n	8002b14 <NVIC_EncodePriority+0x30>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3b03      	subs	r3, #3
 8002b12:	e000      	b.n	8002b16 <NVIC_EncodePriority+0x32>
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	401a      	ands	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43d9      	mvns	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	4313      	orrs	r3, r2
         );
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b5c:	d301      	bcc.n	8002b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00f      	b.n	8002b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <SysTick_Config+0x40>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6a:	210f      	movs	r1, #15
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f7ff ff8e 	bl	8002a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <SysTick_Config+0x40>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <SysTick_Config+0x40>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	e000e010 	.word	0xe000e010

08002b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ff29 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb8:	f7ff ff3e 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f7ff ff8e 	bl	8002ae4 <NVIC_EncodePriority>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff5d 	bl	8002a90 <__NVIC_SetPriority>
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff31 	bl	8002a54 <__NVIC_EnableIRQ>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff ffa2 	bl	8002b4c <SysTick_Config>
 8002c08:	4603      	mov	r3, r0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e098      	b.n	8002d58 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4b4d      	ldr	r3, [pc, #308]	; (8002d64 <HAL_DMA_Init+0x150>)
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d80f      	bhi.n	8002c52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <HAL_DMA_Init+0x154>)
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a4b      	ldr	r2, [pc, #300]	; (8002d6c <HAL_DMA_Init+0x158>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	009a      	lsls	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a48      	ldr	r2, [pc, #288]	; (8002d70 <HAL_DMA_Init+0x15c>)
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c50:	e00e      	b.n	8002c70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <HAL_DMA_Init+0x160>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a43      	ldr	r2, [pc, #268]	; (8002d6c <HAL_DMA_Init+0x158>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	009a      	lsls	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a42      	ldr	r2, [pc, #264]	; (8002d78 <HAL_DMA_Init+0x164>)
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cca:	d039      	beq.n	8002d40 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4a27      	ldr	r2, [pc, #156]	; (8002d70 <HAL_DMA_Init+0x15c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d11a      	bne.n	8002d0c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cd6:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <HAL_DMA_Init+0x168>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f003 031c 	and.w	r3, r3, #28
 8002ce2:	210f      	movs	r1, #15
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	4924      	ldr	r1, [pc, #144]	; (8002d7c <HAL_DMA_Init+0x168>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002cf0:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_DMA_Init+0x168>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	f003 031c 	and.w	r3, r3, #28
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	491d      	ldr	r1, [pc, #116]	; (8002d7c <HAL_DMA_Init+0x168>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
 8002d0a:	e019      	b.n	8002d40 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_DMA_Init+0x16c>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d14:	f003 031c 	and.w	r3, r3, #28
 8002d18:	210f      	movs	r1, #15
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	4917      	ldr	r1, [pc, #92]	; (8002d80 <HAL_DMA_Init+0x16c>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_DMA_Init+0x16c>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f003 031c 	and.w	r3, r3, #28
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	4911      	ldr	r1, [pc, #68]	; (8002d80 <HAL_DMA_Init+0x16c>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40020407 	.word	0x40020407
 8002d68:	bffdfff8 	.word	0xbffdfff8
 8002d6c:	cccccccd 	.word	0xcccccccd
 8002d70:	40020000 	.word	0x40020000
 8002d74:	bffdfbf8 	.word	0xbffdfbf8
 8002d78:	40020400 	.word	0x40020400
 8002d7c:	400200a8 	.word	0x400200a8
 8002d80:	400204a8 	.word	0x400204a8

08002d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_DMA_Start_IT+0x20>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e04b      	b.n	8002e3c <HAL_DMA_Start_IT+0xb8>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d13a      	bne.n	8002e2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f8e0 	bl	8002fa2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 020e 	orr.w	r2, r2, #14
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e00f      	b.n	8002e1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0204 	bic.w	r2, r2, #4
 8002e0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 020a 	orr.w	r2, r2, #10
 8002e1a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e005      	b.n	8002e3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e36:	2302      	movs	r3, #2
 8002e38:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	f003 031c 	and.w	r3, r3, #28
 8002e64:	2204      	movs	r2, #4
 8002e66:	409a      	lsls	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d026      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x7a>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d021      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0204 	bic.w	r2, r2, #4
 8002e96:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f003 021c 	and.w	r2, r3, #28
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d071      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002ebc:	e06c      	b.n	8002f98 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f003 031c 	and.w	r3, r3, #28
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d02e      	beq.n	8002f30 <HAL_DMA_IRQHandler+0xec>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d029      	beq.n	8002f30 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10b      	bne.n	8002f02 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 020a 	bic.w	r2, r2, #10
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	f003 021c 	and.w	r2, r3, #28
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	2102      	movs	r1, #2
 8002f10:	fa01 f202 	lsl.w	r2, r1, r2
 8002f14:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d038      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f2e:	e033      	b.n	8002f98 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	f003 031c 	and.w	r3, r3, #28
 8002f38:	2208      	movs	r2, #8
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02a      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x156>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d025      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 020e 	bic.w	r2, r2, #14
 8002f5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f003 021c 	and.w	r2, r3, #28
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
}
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	f003 021c 	and.w	r2, r3, #28
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d108      	bne.n	8002fe6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fe4:	e007      	b.n	8002ff6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	60da      	str	r2, [r3, #12]
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003012:	e17f      	b.n	8003314 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	4013      	ands	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8171 	beq.w	800330e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d00b      	beq.n	800304c <HAL_GPIO_Init+0x48>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d007      	beq.n	800304c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003040:	2b11      	cmp	r3, #17
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b12      	cmp	r3, #18
 800304a:	d130      	bne.n	80030ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	2203      	movs	r2, #3
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4013      	ands	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003082:	2201      	movs	r2, #1
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4013      	ands	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	f003 0201 	and.w	r2, r3, #1
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d118      	bne.n	80030ec <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030c0:	2201      	movs	r2, #1
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	08db      	lsrs	r3, r3, #3
 80030d6:	f003 0201 	and.w	r2, r3, #1
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x128>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b12      	cmp	r3, #18
 800312a:	d123      	bne.n	8003174 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	08da      	lsrs	r2, r3, #3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3208      	adds	r2, #8
 8003134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	220f      	movs	r2, #15
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	6939      	ldr	r1, [r7, #16]
 8003170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0203 	and.w	r2, r3, #3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80ac 	beq.w	800330e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b6:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <HAL_GPIO_Init+0x330>)
 80031b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ba:	4a5e      	ldr	r2, [pc, #376]	; (8003334 <HAL_GPIO_Init+0x330>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6613      	str	r3, [r2, #96]	; 0x60
 80031c2:	4b5c      	ldr	r3, [pc, #368]	; (8003334 <HAL_GPIO_Init+0x330>)
 80031c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ce:	4a5a      	ldr	r2, [pc, #360]	; (8003338 <HAL_GPIO_Init+0x334>)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	089b      	lsrs	r3, r3, #2
 80031d4:	3302      	adds	r3, #2
 80031d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031f8:	d025      	beq.n	8003246 <HAL_GPIO_Init+0x242>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4f      	ldr	r2, [pc, #316]	; (800333c <HAL_GPIO_Init+0x338>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01f      	beq.n	8003242 <HAL_GPIO_Init+0x23e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4e      	ldr	r2, [pc, #312]	; (8003340 <HAL_GPIO_Init+0x33c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d019      	beq.n	800323e <HAL_GPIO_Init+0x23a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4d      	ldr	r2, [pc, #308]	; (8003344 <HAL_GPIO_Init+0x340>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <HAL_GPIO_Init+0x236>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4c      	ldr	r2, [pc, #304]	; (8003348 <HAL_GPIO_Init+0x344>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00d      	beq.n	8003236 <HAL_GPIO_Init+0x232>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4b      	ldr	r2, [pc, #300]	; (800334c <HAL_GPIO_Init+0x348>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <HAL_GPIO_Init+0x22e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <HAL_GPIO_Init+0x34c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_GPIO_Init+0x22a>
 800322a:	2306      	movs	r3, #6
 800322c:	e00c      	b.n	8003248 <HAL_GPIO_Init+0x244>
 800322e:	2307      	movs	r3, #7
 8003230:	e00a      	b.n	8003248 <HAL_GPIO_Init+0x244>
 8003232:	2305      	movs	r3, #5
 8003234:	e008      	b.n	8003248 <HAL_GPIO_Init+0x244>
 8003236:	2304      	movs	r3, #4
 8003238:	e006      	b.n	8003248 <HAL_GPIO_Init+0x244>
 800323a:	2303      	movs	r3, #3
 800323c:	e004      	b.n	8003248 <HAL_GPIO_Init+0x244>
 800323e:	2302      	movs	r3, #2
 8003240:	e002      	b.n	8003248 <HAL_GPIO_Init+0x244>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_GPIO_Init+0x244>
 8003246:	2300      	movs	r3, #0
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	f002 0203 	and.w	r2, r2, #3
 800324e:	0092      	lsls	r2, r2, #2
 8003250:	4093      	lsls	r3, r2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003258:	4937      	ldr	r1, [pc, #220]	; (8003338 <HAL_GPIO_Init+0x334>)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	3302      	adds	r3, #2
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003266:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_GPIO_Init+0x350>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800328a:	4a32      	ldr	r2, [pc, #200]	; (8003354 <HAL_GPIO_Init+0x350>)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003290:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_GPIO_Init+0x350>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032b4:	4a27      	ldr	r2, [pc, #156]	; (8003354 <HAL_GPIO_Init+0x350>)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ba:	4b26      	ldr	r3, [pc, #152]	; (8003354 <HAL_GPIO_Init+0x350>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032de:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <HAL_GPIO_Init+0x350>)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_GPIO_Init+0x350>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003308:	4a12      	ldr	r2, [pc, #72]	; (8003354 <HAL_GPIO_Init+0x350>)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	3301      	adds	r3, #1
 8003312:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	f47f ae78 	bne.w	8003014 <HAL_GPIO_Init+0x10>
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	40010000 	.word	0x40010000
 800333c:	48000400 	.word	0x48000400
 8003340:	48000800 	.word	0x48000800
 8003344:	48000c00 	.word	0x48000c00
 8003348:	48001000 	.word	0x48001000
 800334c:	48001400 	.word	0x48001400
 8003350:	48001800 	.word	0x48001800
 8003354:	40010400 	.word	0x40010400

08003358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
 8003364:	4613      	mov	r3, r2
 8003366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003368:	787b      	ldrb	r3, [r7, #1]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003374:	e002      	b.n	800337c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40007000 	.word	0x40007000

080033a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b2:	d130      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b4:	4b23      	ldr	r3, [pc, #140]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033c0:	d038      	beq.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ca:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2232      	movs	r2, #50	; 0x32
 80033d8:	fb02 f303 	mul.w	r3, r2, r3
 80033dc:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0c9b      	lsrs	r3, r3, #18
 80033e4:	3301      	adds	r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e8:	e002      	b.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fc:	d102      	bne.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f2      	bne.n	80033ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	d110      	bne.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e00f      	b.n	8003436 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d007      	beq.n	8003434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800342c:	4a05      	ldr	r2, [pc, #20]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003432:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40007000 	.word	0x40007000
 8003448:	20000000 	.word	0x20000000
 800344c:	431bde83 	.word	0x431bde83

08003450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e3d4      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003462:	4ba1      	ldr	r3, [pc, #644]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346c:	4b9e      	ldr	r3, [pc, #632]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80e4 	beq.w	800364c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_RCC_OscConfig+0x4a>
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	f040 808b 	bne.w	80035a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b01      	cmp	r3, #1
 8003496:	f040 8087 	bne.w	80035a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800349a:	4b93      	ldr	r3, [pc, #588]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_RCC_OscConfig+0x62>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e3ac      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1a      	ldr	r2, [r3, #32]
 80034b6:	4b8c      	ldr	r3, [pc, #560]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <HAL_RCC_OscConfig+0x7c>
 80034c2:	4b89      	ldr	r3, [pc, #548]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ca:	e005      	b.n	80034d8 <HAL_RCC_OscConfig+0x88>
 80034cc:	4b86      	ldr	r3, [pc, #536]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d8:	4293      	cmp	r3, r2
 80034da:	d223      	bcs.n	8003524 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fd41 	bl	8003f68 <RCC_SetFlashLatencyFromMSIRange>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e38d      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f0:	4b7d      	ldr	r3, [pc, #500]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a7c      	ldr	r2, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034f6:	f043 0308 	orr.w	r3, r3, #8
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b7a      	ldr	r3, [pc, #488]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4977      	ldr	r1, [pc, #476]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350e:	4b76      	ldr	r3, [pc, #472]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	4972      	ldr	r1, [pc, #456]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
 8003522:	e025      	b.n	8003570 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003524:	4b70      	ldr	r3, [pc, #448]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a6f      	ldr	r2, [pc, #444]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800352a:	f043 0308 	orr.w	r3, r3, #8
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b6d      	ldr	r3, [pc, #436]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	496a      	ldr	r1, [pc, #424]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003542:	4b69      	ldr	r3, [pc, #420]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	4965      	ldr	r1, [pc, #404]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fd01 	bl	8003f68 <RCC_SetFlashLatencyFromMSIRange>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e34d      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003570:	f000 fc36 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	495a      	ldr	r1, [pc, #360]	; (80036ec <HAL_RCC_OscConfig+0x29c>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	4a58      	ldr	r2, [pc, #352]	; (80036f0 <HAL_RCC_OscConfig+0x2a0>)
 800358e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003590:	4b58      	ldr	r3, [pc, #352]	; (80036f4 <HAL_RCC_OscConfig+0x2a4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd fedf 	bl	8001358 <HAL_InitTick>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d052      	beq.n	800364a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	e331      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d032      	beq.n	8003616 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035b0:	4b4d      	ldr	r3, [pc, #308]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a4c      	ldr	r2, [pc, #304]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035bc:	f7fd ff1c 	bl	80013f8 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035c4:	f7fd ff18 	bl	80013f8 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e31a      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d6:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e2:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a40      	ldr	r2, [pc, #256]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035e8:	f043 0308 	orr.w	r3, r3, #8
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	493b      	ldr	r1, [pc, #236]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003600:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	4936      	ldr	r1, [pc, #216]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
 8003614:	e01a      	b.n	800364c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a33      	ldr	r2, [pc, #204]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003622:	f7fd fee9 	bl	80013f8 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800362a:	f7fd fee5 	bl	80013f8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e2e7      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x1da>
 8003648:	e000      	b.n	800364c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800364a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d074      	beq.n	8003742 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b08      	cmp	r3, #8
 800365c:	d005      	beq.n	800366a <HAL_RCC_OscConfig+0x21a>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d10e      	bne.n	8003682 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d10b      	bne.n	8003682 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366a:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d064      	beq.n	8003740 <HAL_RCC_OscConfig+0x2f0>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d160      	bne.n	8003740 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e2c4      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x24a>
 800368c:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e01d      	b.n	80036d6 <HAL_RCC_OscConfig+0x286>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a2:	d10c      	bne.n	80036be <HAL_RCC_OscConfig+0x26e>
 80036a4:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0f      	ldr	r2, [pc, #60]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e00b      	b.n	80036d6 <HAL_RCC_OscConfig+0x286>
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x298>)
 80036d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01c      	beq.n	8003718 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fd fe8b 	bl	80013f8 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e4:	e011      	b.n	800370a <HAL_RCC_OscConfig+0x2ba>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	0800721c 	.word	0x0800721c
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fd fe7e 	bl	80013f8 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	; 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e280      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370a:	4baf      	ldr	r3, [pc, #700]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x2a8>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd fe6e 	bl	80013f8 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fd fe6a 	bl	80013f8 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e26c      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003732:	4ba5      	ldr	r3, [pc, #660]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x2d0>
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d060      	beq.n	8003810 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d005      	beq.n	8003760 <HAL_RCC_OscConfig+0x310>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d119      	bne.n	800378e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d116      	bne.n	800378e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003760:	4b99      	ldr	r3, [pc, #612]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_OscConfig+0x328>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e249      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003778:	4b93      	ldr	r3, [pc, #588]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	4990      	ldr	r1, [pc, #576]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800378c:	e040      	b.n	8003810 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d023      	beq.n	80037de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003796:	4b8c      	ldr	r3, [pc, #560]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a8b      	ldr	r2, [pc, #556]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fd fe29 	bl	80013f8 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037aa:	f7fd fe25 	bl	80013f8 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e227      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037bc:	4b82      	ldr	r3, [pc, #520]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b7f      	ldr	r3, [pc, #508]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	061b      	lsls	r3, r3, #24
 80037d6:	497c      	ldr	r1, [pc, #496]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
 80037dc:	e018      	b.n	8003810 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037de:	4b7a      	ldr	r3, [pc, #488]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a79      	ldr	r2, [pc, #484]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80037e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fd fe05 	bl	80013f8 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f2:	f7fd fe01 	bl	80013f8 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e203      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003804:	4b70      	ldr	r3, [pc, #448]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d03c      	beq.n	8003896 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01c      	beq.n	800385e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003824:	4b68      	ldr	r3, [pc, #416]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382a:	4a67      	ldr	r2, [pc, #412]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fd fde0 	bl	80013f8 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800383c:	f7fd fddc 	bl	80013f8 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e1de      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800384e:	4b5e      	ldr	r3, [pc, #376]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ef      	beq.n	800383c <HAL_RCC_OscConfig+0x3ec>
 800385c:	e01b      	b.n	8003896 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385e:	4b5a      	ldr	r3, [pc, #360]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003864:	4a58      	ldr	r2, [pc, #352]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fd fdc3 	bl	80013f8 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003876:	f7fd fdbf 	bl	80013f8 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e1c1      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800388a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ef      	bne.n	8003876 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80a6 	beq.w	80039f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a4:	2300      	movs	r3, #0
 80038a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038a8:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10d      	bne.n	80038d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b4:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	4a43      	ldr	r2, [pc, #268]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038be:	6593      	str	r3, [r2, #88]	; 0x58
 80038c0:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038cc:	2301      	movs	r3, #1
 80038ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d0:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d118      	bne.n	800390e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038dc:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a3a      	ldr	r2, [pc, #232]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 80038e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e8:	f7fd fd86 	bl	80013f8 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f0:	f7fd fd82 	bl	80013f8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e184      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003902:	4b32      	ldr	r3, [pc, #200]	; (80039cc <HAL_RCC_OscConfig+0x57c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d108      	bne.n	8003928 <HAL_RCC_OscConfig+0x4d8>
 8003916:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003926:	e024      	b.n	8003972 <HAL_RCC_OscConfig+0x522>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b05      	cmp	r3, #5
 800392e:	d110      	bne.n	8003952 <HAL_RCC_OscConfig+0x502>
 8003930:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	4a20      	ldr	r2, [pc, #128]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003950:	e00f      	b.n	8003972 <HAL_RCC_OscConfig+0x522>
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800396a:	f023 0304 	bic.w	r3, r3, #4
 800396e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d016      	beq.n	80039a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7fd fd3d 	bl	80013f8 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003980:	e00a      	b.n	8003998 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fd fd39 	bl	80013f8 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e139      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_OscConfig+0x578>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ed      	beq.n	8003982 <HAL_RCC_OscConfig+0x532>
 80039a6:	e01a      	b.n	80039de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fd26 	bl	80013f8 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ae:	e00f      	b.n	80039d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fd fd22 	bl	80013f8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d906      	bls.n	80039d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e122      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d0:	4b90      	ldr	r3, [pc, #576]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e8      	bne.n	80039b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039de:	7ffb      	ldrb	r3, [r7, #31]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d105      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e4:	4b8b      	ldr	r3, [pc, #556]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 80039e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e8:	4a8a      	ldr	r2, [pc, #552]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 80039ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8108 	beq.w	8003c0a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	f040 80d0 	bne.w	8003ba4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a04:	4b83      	ldr	r3, [pc, #524]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f003 0203 	and.w	r2, r3, #3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d130      	bne.n	8003a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	3b01      	subs	r3, #1
 8003a24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d127      	bne.n	8003a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d11f      	bne.n	8003a7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a44:	2a07      	cmp	r2, #7
 8003a46:	bf14      	ite	ne
 8003a48:	2201      	movne	r2, #1
 8003a4a:	2200      	moveq	r2, #0
 8003a4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d113      	bne.n	8003a7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d109      	bne.n	8003a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d06e      	beq.n	8003b58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b0c      	cmp	r3, #12
 8003a7e:	d069      	beq.n	8003b54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a80:	4b64      	ldr	r3, [pc, #400]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a8c:	4b61      	ldr	r3, [pc, #388]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0b7      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b5d      	ldr	r3, [pc, #372]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5c      	ldr	r2, [pc, #368]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003aa8:	f7fd fca6 	bl	80013f8 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fd fca2 	bl	80013f8 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0a4      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac2:	4b54      	ldr	r3, [pc, #336]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ace:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	4b51      	ldr	r3, [pc, #324]	; (8003c18 <HAL_RCC_OscConfig+0x7c8>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ade:	3a01      	subs	r2, #1
 8003ae0:	0112      	lsls	r2, r2, #4
 8003ae2:	4311      	orrs	r1, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ae8:	0212      	lsls	r2, r2, #8
 8003aea:	4311      	orrs	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003af0:	0852      	lsrs	r2, r2, #1
 8003af2:	3a01      	subs	r2, #1
 8003af4:	0552      	lsls	r2, r2, #21
 8003af6:	4311      	orrs	r1, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003afc:	0852      	lsrs	r2, r2, #1
 8003afe:	3a01      	subs	r2, #1
 8003b00:	0652      	lsls	r2, r2, #25
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b08:	0912      	lsrs	r2, r2, #4
 8003b0a:	0452      	lsls	r2, r2, #17
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	4941      	ldr	r1, [pc, #260]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b14:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3e      	ldr	r2, [pc, #248]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b20:	4b3c      	ldr	r3, [pc, #240]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a3b      	ldr	r2, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b2c:	f7fd fc64 	bl	80013f8 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fd fc60 	bl	80013f8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e062      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b46:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b52:	e05a      	b.n	8003c0a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e059      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b58:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d152      	bne.n	8003c0a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b70:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a27      	ldr	r2, [pc, #156]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b7c:	f7fd fc3c 	bl	80013f8 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fd fc38 	bl	80013f8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e03a      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b96:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x734>
 8003ba2:	e032      	b.n	8003c0a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d02d      	beq.n	8003c06 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003baa:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003bb6:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d105      	bne.n	8003bce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bc8:	f023 0303 	bic.w	r3, r3, #3
 8003bcc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bce:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	4a10      	ldr	r2, [pc, #64]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bd4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bdc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fd fc0b 	bl	80013f8 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fd fc07 	bl	80013f8 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e009      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_RCC_OscConfig+0x7c4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x796>
 8003c04:	e001      	b.n	8003c0a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	f99d808c 	.word	0xf99d808c

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0c8      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d910      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 0207 	bic.w	r2, r3, #7
 8003c46:	4961      	ldr	r1, [pc, #388]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0b0      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d04c      	beq.n	8003d06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c74:	4b56      	ldr	r3, [pc, #344]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d121      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e09e      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c8c:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d115      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e092      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ca4:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e086      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb4:	4b46      	ldr	r3, [pc, #280]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e07e      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cc4:	4b42      	ldr	r3, [pc, #264]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f023 0203 	bic.w	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	493f      	ldr	r1, [pc, #252]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd6:	f7fd fb8f 	bl	80013f8 <HAL_GetTick>
 8003cda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cdc:	e00a      	b.n	8003cf4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cde:	f7fd fb8b 	bl	80013f8 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e066      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf4:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 020c 	and.w	r2, r3, #12
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d1eb      	bne.n	8003cde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d12:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	492c      	ldr	r1, [pc, #176]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d24:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d210      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 0207 	bic.w	r2, r3, #7
 8003d3a:	4924      	ldr	r1, [pc, #144]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_RCC_ClockConfig+0x1b0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e036      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4918      	ldr	r1, [pc, #96]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4910      	ldr	r1, [pc, #64]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d92:	f000 f825 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003d96:	4602      	mov	r2, r0
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	490c      	ldr	r1, [pc, #48]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	5ccb      	ldrb	r3, [r1, r3]
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fd face 	bl	8001358 <HAL_InitTick>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dc0:	7afb      	ldrb	r3, [r7, #11]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40022000 	.word	0x40022000
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	0800721c 	.word	0x0800721c
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	20000004 	.word	0x20000004

08003de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	; 0x24
 8003de4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	2300      	movs	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dee:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003df8:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_GetSysClockFreq+0x34>
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	d121      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d11e      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e14:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e20:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e005      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e30:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e3c:	4a2b      	ldr	r2, [pc, #172]	; (8003eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d102      	bne.n	8003e5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	e004      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e64:	4b23      	ldr	r3, [pc, #140]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b0c      	cmp	r3, #12
 8003e6c:	d134      	bne.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d003      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d003      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0xac>
 8003e84:	e005      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e88:	617b      	str	r3, [r7, #20]
      break;
 8003e8a:	e005      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e8c:	4b19      	ldr	r3, [pc, #100]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e8e:	617b      	str	r3, [r7, #20]
      break;
 8003e90:	e002      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	617b      	str	r3, [r7, #20]
      break;
 8003e96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e98:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	fb02 f203 	mul.w	r2, r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	0e5b      	lsrs	r3, r3, #25
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3724      	adds	r7, #36	; 0x24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	08007234 	.word	0x08007234
 8003ef0:	00f42400 	.word	0x00f42400
 8003ef4:	007a1200 	.word	0x007a1200

08003ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000000 	.word	0x20000000

08003f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f14:	f7ff fff0 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4904      	ldr	r1, [pc, #16]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000
 8003f38:	0800722c 	.word	0x0800722c

08003f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f40:	f7ff ffda 	bl	8003ef8 <HAL_RCC_GetHCLKFreq>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	0adb      	lsrs	r3, r3, #11
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	4904      	ldr	r1, [pc, #16]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f52:	5ccb      	ldrb	r3, [r1, r3]
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000
 8003f64:	0800722c 	.word	0x0800722c

08003f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f74:	4b2a      	ldr	r3, [pc, #168]	; (8004020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f80:	f7ff fa02 	bl	8003388 <HAL_PWREx_GetVoltageRange>
 8003f84:	6178      	str	r0, [r7, #20]
 8003f86:	e014      	b.n	8003fb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f88:	4b25      	ldr	r3, [pc, #148]	; (8004020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8c:	4a24      	ldr	r2, [pc, #144]	; (8004020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f92:	6593      	str	r3, [r2, #88]	; 0x58
 8003f94:	4b22      	ldr	r3, [pc, #136]	; (8004020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fa0:	f7ff f9f2 	bl	8003388 <HAL_PWREx_GetVoltageRange>
 8003fa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb8:	d10b      	bne.n	8003fd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b80      	cmp	r3, #128	; 0x80
 8003fbe:	d919      	bls.n	8003ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2ba0      	cmp	r3, #160	; 0xa0
 8003fc4:	d902      	bls.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	e013      	b.n	8003ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fcc:	2301      	movs	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	e010      	b.n	8003ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d902      	bls.n	8003fde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fd8:	2303      	movs	r3, #3
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	e00a      	b.n	8003ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b80      	cmp	r3, #128	; 0x80
 8003fe2:	d102      	bne.n	8003fea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	e004      	b.n	8003ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b70      	cmp	r3, #112	; 0x70
 8003fee:	d101      	bne.n	8003ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f023 0207 	bic.w	r2, r3, #7
 8003ffc:	4909      	ldr	r1, [pc, #36]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	429a      	cmp	r2, r3
 8004010:	d001      	beq.n	8004016 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000
 8004024:	40022000 	.word	0x40022000

08004028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004030:	2300      	movs	r3, #0
 8004032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004034:	2300      	movs	r3, #0
 8004036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004040:	2b00      	cmp	r3, #0
 8004042:	d041      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004048:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800404c:	d02a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800404e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004052:	d824      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004058:	d008      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800405a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800405e:	d81e      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004068:	d010      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800406a:	e018      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800406c:	4b86      	ldr	r3, [pc, #536]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a85      	ldr	r2, [pc, #532]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004076:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004078:	e015      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fabb 	bl	80045fc <RCCEx_PLLSAI1_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800408a:	e00c      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3320      	adds	r3, #32
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fba6 	bl	80047e4 <RCCEx_PLLSAI2_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800409c:	e003      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	74fb      	strb	r3, [r7, #19]
      break;
 80040a2:	e000      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040ac:	4b76      	ldr	r3, [pc, #472]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ba:	4973      	ldr	r1, [pc, #460]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040c2:	e001      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d041      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040dc:	d02a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040e2:	d824      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040e8:	d008      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ee:	d81e      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f8:	d010      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040fa:	e018      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040fc:	4b62      	ldr	r3, [pc, #392]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4a61      	ldr	r2, [pc, #388]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004106:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004108:	e015      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3304      	adds	r3, #4
 800410e:	2100      	movs	r1, #0
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fa73 	bl	80045fc <RCCEx_PLLSAI1_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800411a:	e00c      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3320      	adds	r3, #32
 8004120:	2100      	movs	r1, #0
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fb5e 	bl	80047e4 <RCCEx_PLLSAI2_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800412c:	e003      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	74fb      	strb	r3, [r7, #19]
      break;
 8004132:	e000      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004136:	7cfb      	ldrb	r3, [r7, #19]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10b      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800413c:	4b52      	ldr	r3, [pc, #328]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414a:	494f      	ldr	r1, [pc, #316]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004152:	e001      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80a0 	beq.w	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004166:	2300      	movs	r3, #0
 8004168:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800417a:	2300      	movs	r3, #0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00d      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004180:	4b41      	ldr	r3, [pc, #260]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	4a40      	ldr	r2, [pc, #256]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418a:	6593      	str	r3, [r2, #88]	; 0x58
 800418c:	4b3e      	ldr	r3, [pc, #248]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004198:	2301      	movs	r3, #1
 800419a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800419c:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a3a      	ldr	r2, [pc, #232]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041a8:	f7fd f926 	bl	80013f8 <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041ae:	e009      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b0:	f7fd f922 	bl	80013f8 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d902      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	74fb      	strb	r3, [r7, #19]
        break;
 80041c2:	e005      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041c4:	4b31      	ldr	r3, [pc, #196]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0ef      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d15c      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041d6:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01f      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d019      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041f4:	4b24      	ldr	r3, [pc, #144]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004200:	4b21      	ldr	r3, [pc, #132]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	4a20      	ldr	r2, [pc, #128]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004210:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004220:	4a19      	ldr	r2, [pc, #100]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d016      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7fd f8e1 	bl	80013f8 <HAL_GetTick>
 8004236:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004238:	e00b      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423a:	f7fd f8dd 	bl	80013f8 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f241 3288 	movw	r2, #5000	; 0x1388
 8004248:	4293      	cmp	r3, r2
 800424a:	d902      	bls.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	74fb      	strb	r3, [r7, #19]
            break;
 8004250:	e006      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ec      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10c      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004276:	4904      	ldr	r1, [pc, #16]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800427e:	e009      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	74bb      	strb	r3, [r7, #18]
 8004284:	e006      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	7cfb      	ldrb	r3, [r7, #19]
 8004292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004294:	7c7b      	ldrb	r3, [r7, #17]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d105      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429a:	4b9e      	ldr	r3, [pc, #632]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429e:	4a9d      	ldr	r2, [pc, #628]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b2:	4b98      	ldr	r3, [pc, #608]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f023 0203 	bic.w	r2, r3, #3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	4994      	ldr	r1, [pc, #592]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d4:	4b8f      	ldr	r3, [pc, #572]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f023 020c 	bic.w	r2, r3, #12
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	498c      	ldr	r1, [pc, #560]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042f6:	4b87      	ldr	r3, [pc, #540]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	4983      	ldr	r1, [pc, #524]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004318:	4b7e      	ldr	r3, [pc, #504]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	497b      	ldr	r1, [pc, #492]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800433a:	4b76      	ldr	r3, [pc, #472]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004348:	4972      	ldr	r1, [pc, #456]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800435c:	4b6d      	ldr	r3, [pc, #436]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436a:	496a      	ldr	r1, [pc, #424]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800437e:	4b65      	ldr	r3, [pc, #404]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	4961      	ldr	r1, [pc, #388]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043a0:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ae:	4959      	ldr	r1, [pc, #356]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043c2:	4b54      	ldr	r3, [pc, #336]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	4950      	ldr	r1, [pc, #320]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043e4:	4b4b      	ldr	r3, [pc, #300]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f2:	4948      	ldr	r1, [pc, #288]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004406:	4b43      	ldr	r3, [pc, #268]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	493f      	ldr	r1, [pc, #252]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d028      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004428:	4b3a      	ldr	r3, [pc, #232]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004436:	4937      	ldr	r1, [pc, #220]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004446:	d106      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004448:	4b32      	ldr	r3, [pc, #200]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4a31      	ldr	r2, [pc, #196]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004452:	60d3      	str	r3, [r2, #12]
 8004454:	e011      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800445e:	d10c      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	2101      	movs	r1, #1
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f8c8 	bl	80045fc <RCCEx_PLLSAI1_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004476:	7cfb      	ldrb	r3, [r7, #19]
 8004478:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d028      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004486:	4b23      	ldr	r3, [pc, #140]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	491f      	ldr	r1, [pc, #124]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a4:	d106      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a6:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	4a1a      	ldr	r2, [pc, #104]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b0:	60d3      	str	r3, [r2, #12]
 80044b2:	e011      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2101      	movs	r1, #1
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 f899 	bl	80045fc <RCCEx_PLLSAI1_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044ce:	7cfb      	ldrb	r3, [r7, #19]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02b      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f2:	4908      	ldr	r1, [pc, #32]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004502:	d109      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a02      	ldr	r2, [pc, #8]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800450e:	60d3      	str	r3, [r2, #12]
 8004510:	e014      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004520:	d10c      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3304      	adds	r3, #4
 8004526:	2101      	movs	r1, #1
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f867 	bl	80045fc <RCCEx_PLLSAI1_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004532:	7cfb      	ldrb	r3, [r7, #19]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004538:	7cfb      	ldrb	r3, [r7, #19]
 800453a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02f      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004548:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004556:	4928      	ldr	r1, [pc, #160]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004566:	d10d      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	2102      	movs	r1, #2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 f844 	bl	80045fc <RCCEx_PLLSAI1_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004578:	7cfb      	ldrb	r3, [r7, #19]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d014      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800457e:	7cfb      	ldrb	r3, [r7, #19]
 8004580:	74bb      	strb	r3, [r7, #18]
 8004582:	e011      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800458c:	d10c      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3320      	adds	r3, #32
 8004592:	2102      	movs	r1, #2
 8004594:	4618      	mov	r0, r3
 8004596:	f000 f925 	bl	80047e4 <RCCEx_PLLSAI2_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800459e:	7cfb      	ldrb	r3, [r7, #19]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045b4:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c2:	490d      	ldr	r1, [pc, #52]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e6:	4904      	ldr	r1, [pc, #16]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000

080045fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800460a:	4b75      	ldr	r3, [pc, #468]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d018      	beq.n	8004648 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004616:	4b72      	ldr	r3, [pc, #456]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0203 	and.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d10d      	bne.n	8004642 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
       ||
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800462e:	4b6c      	ldr	r3, [pc, #432]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
       ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d047      	beq.n	80046d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
 8004646:	e044      	b.n	80046d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d018      	beq.n	8004682 <RCCEx_PLLSAI1_Config+0x86>
 8004650:	2b03      	cmp	r3, #3
 8004652:	d825      	bhi.n	80046a0 <RCCEx_PLLSAI1_Config+0xa4>
 8004654:	2b01      	cmp	r3, #1
 8004656:	d002      	beq.n	800465e <RCCEx_PLLSAI1_Config+0x62>
 8004658:	2b02      	cmp	r3, #2
 800465a:	d009      	beq.n	8004670 <RCCEx_PLLSAI1_Config+0x74>
 800465c:	e020      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800465e:	4b60      	ldr	r3, [pc, #384]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d11d      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466e:	e01a      	b.n	80046a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004670:	4b5b      	ldr	r3, [pc, #364]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d116      	bne.n	80046aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004680:	e013      	b.n	80046aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004682:	4b57      	ldr	r3, [pc, #348]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10f      	bne.n	80046ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800468e:	4b54      	ldr	r3, [pc, #336]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800469e:	e006      	b.n	80046ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	e004      	b.n	80046b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046a6:	bf00      	nop
 80046a8:	e002      	b.n	80046b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10d      	bne.n	80046d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046b6:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6819      	ldr	r1, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	430b      	orrs	r3, r1
 80046cc:	4944      	ldr	r1, [pc, #272]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d17d      	bne.n	80047d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046d8:	4b41      	ldr	r3, [pc, #260]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a40      	ldr	r2, [pc, #256]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e4:	f7fc fe88 	bl	80013f8 <HAL_GetTick>
 80046e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046ea:	e009      	b.n	8004700 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046ec:	f7fc fe84 	bl	80013f8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d902      	bls.n	8004700 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	73fb      	strb	r3, [r7, #15]
        break;
 80046fe:	e005      	b.n	800470c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004700:	4b37      	ldr	r3, [pc, #220]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1ef      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d160      	bne.n	80047d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d111      	bne.n	800473c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004718:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6892      	ldr	r2, [r2, #8]
 8004728:	0211      	lsls	r1, r2, #8
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68d2      	ldr	r2, [r2, #12]
 800472e:	0912      	lsrs	r2, r2, #4
 8004730:	0452      	lsls	r2, r2, #17
 8004732:	430a      	orrs	r2, r1
 8004734:	492a      	ldr	r1, [pc, #168]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004736:	4313      	orrs	r3, r2
 8004738:	610b      	str	r3, [r1, #16]
 800473a:	e027      	b.n	800478c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d112      	bne.n	8004768 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004742:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800474a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6892      	ldr	r2, [r2, #8]
 8004752:	0211      	lsls	r1, r2, #8
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6912      	ldr	r2, [r2, #16]
 8004758:	0852      	lsrs	r2, r2, #1
 800475a:	3a01      	subs	r2, #1
 800475c:	0552      	lsls	r2, r2, #21
 800475e:	430a      	orrs	r2, r1
 8004760:	491f      	ldr	r1, [pc, #124]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004762:	4313      	orrs	r3, r2
 8004764:	610b      	str	r3, [r1, #16]
 8004766:	e011      	b.n	800478c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004768:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004770:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6892      	ldr	r2, [r2, #8]
 8004778:	0211      	lsls	r1, r2, #8
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6952      	ldr	r2, [r2, #20]
 800477e:	0852      	lsrs	r2, r2, #1
 8004780:	3a01      	subs	r2, #1
 8004782:	0652      	lsls	r2, r2, #25
 8004784:	430a      	orrs	r2, r1
 8004786:	4916      	ldr	r1, [pc, #88]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004788:	4313      	orrs	r3, r2
 800478a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800478c:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004796:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fc fe2e 	bl	80013f8 <HAL_GetTick>
 800479c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800479e:	e009      	b.n	80047b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047a0:	f7fc fe2a 	bl	80013f8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d902      	bls.n	80047b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	73fb      	strb	r3, [r7, #15]
          break;
 80047b2:	e005      	b.n	80047c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0ef      	beq.n	80047a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	4904      	ldr	r1, [pc, #16]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000

080047e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047f2:	4b6a      	ldr	r3, [pc, #424]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d018      	beq.n	8004830 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047fe:	4b67      	ldr	r3, [pc, #412]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f003 0203 	and.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d10d      	bne.n	800482a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
       ||
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004816:	4b61      	ldr	r3, [pc, #388]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
       ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d047      	beq.n	80048ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
 800482e:	e044      	b.n	80048ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d018      	beq.n	800486a <RCCEx_PLLSAI2_Config+0x86>
 8004838:	2b03      	cmp	r3, #3
 800483a:	d825      	bhi.n	8004888 <RCCEx_PLLSAI2_Config+0xa4>
 800483c:	2b01      	cmp	r3, #1
 800483e:	d002      	beq.n	8004846 <RCCEx_PLLSAI2_Config+0x62>
 8004840:	2b02      	cmp	r3, #2
 8004842:	d009      	beq.n	8004858 <RCCEx_PLLSAI2_Config+0x74>
 8004844:	e020      	b.n	8004888 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004846:	4b55      	ldr	r3, [pc, #340]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d11d      	bne.n	800488e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004856:	e01a      	b.n	800488e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004858:	4b50      	ldr	r3, [pc, #320]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004860:	2b00      	cmp	r3, #0
 8004862:	d116      	bne.n	8004892 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004868:	e013      	b.n	8004892 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800486a:	4b4c      	ldr	r3, [pc, #304]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10f      	bne.n	8004896 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004876:	4b49      	ldr	r3, [pc, #292]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004886:	e006      	b.n	8004896 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
      break;
 800488c:	e004      	b.n	8004898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004896:	bf00      	nop
    }

    if(status == HAL_OK)
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10d      	bne.n	80048ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800489e:	4b3f      	ldr	r3, [pc, #252]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6819      	ldr	r1, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	430b      	orrs	r3, r1
 80048b4:	4939      	ldr	r1, [pc, #228]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d167      	bne.n	8004990 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048c0:	4b36      	ldr	r3, [pc, #216]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a35      	ldr	r2, [pc, #212]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048cc:	f7fc fd94 	bl	80013f8 <HAL_GetTick>
 80048d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048d2:	e009      	b.n	80048e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048d4:	f7fc fd90 	bl	80013f8 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d902      	bls.n	80048e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	73fb      	strb	r3, [r7, #15]
        break;
 80048e6:	e005      	b.n	80048f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048e8:	4b2c      	ldr	r3, [pc, #176]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ef      	bne.n	80048d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d14a      	bne.n	8004990 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d111      	bne.n	8004924 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004900:	4b26      	ldr	r3, [pc, #152]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6892      	ldr	r2, [r2, #8]
 8004910:	0211      	lsls	r1, r2, #8
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68d2      	ldr	r2, [r2, #12]
 8004916:	0912      	lsrs	r2, r2, #4
 8004918:	0452      	lsls	r2, r2, #17
 800491a:	430a      	orrs	r2, r1
 800491c:	491f      	ldr	r1, [pc, #124]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 800491e:	4313      	orrs	r3, r2
 8004920:	614b      	str	r3, [r1, #20]
 8004922:	e011      	b.n	8004948 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004924:	4b1d      	ldr	r3, [pc, #116]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800492c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6892      	ldr	r2, [r2, #8]
 8004934:	0211      	lsls	r1, r2, #8
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6912      	ldr	r2, [r2, #16]
 800493a:	0852      	lsrs	r2, r2, #1
 800493c:	3a01      	subs	r2, #1
 800493e:	0652      	lsls	r2, r2, #25
 8004940:	430a      	orrs	r2, r1
 8004942:	4916      	ldr	r1, [pc, #88]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004944:	4313      	orrs	r3, r2
 8004946:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004948:	4b14      	ldr	r3, [pc, #80]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a13      	ldr	r2, [pc, #76]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004952:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004954:	f7fc fd50 	bl	80013f8 <HAL_GetTick>
 8004958:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800495a:	e009      	b.n	8004970 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800495c:	f7fc fd4c 	bl	80013f8 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d902      	bls.n	8004970 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	73fb      	strb	r3, [r7, #15]
          break;
 800496e:	e005      	b.n	800497c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ef      	beq.n	800495c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004982:	4b06      	ldr	r3, [pc, #24]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	4904      	ldr	r1, [pc, #16]	; (800499c <RCCEx_PLLSAI2_Config+0x1b8>)
 800498c:	4313      	orrs	r3, r2
 800498e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000

080049a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e049      	b.n	8004a46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc fa34 	bl	8000e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f000 fcc4 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e049      	b.n	8004af4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f841 	bl	8004afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f000 fc6d 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <HAL_TIM_PWM_Start+0x24>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e03c      	b.n	8004bae <HAL_TIM_PWM_Start+0x9e>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d109      	bne.n	8004b4e <HAL_TIM_PWM_Start+0x3e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	bf14      	ite	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	2300      	moveq	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	e02f      	b.n	8004bae <HAL_TIM_PWM_Start+0x9e>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d109      	bne.n	8004b68 <HAL_TIM_PWM_Start+0x58>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e022      	b.n	8004bae <HAL_TIM_PWM_Start+0x9e>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b0c      	cmp	r3, #12
 8004b6c:	d109      	bne.n	8004b82 <HAL_TIM_PWM_Start+0x72>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	bf14      	ite	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	2300      	moveq	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	e015      	b.n	8004bae <HAL_TIM_PWM_Start+0x9e>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d109      	bne.n	8004b9c <HAL_TIM_PWM_Start+0x8c>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	bf14      	ite	ne
 8004b94:	2301      	movne	r3, #1
 8004b96:	2300      	moveq	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	e008      	b.n	8004bae <HAL_TIM_PWM_Start+0x9e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e09c      	b.n	8004cf0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0xb6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc4:	e023      	b.n	8004c0e <HAL_TIM_PWM_Start+0xfe>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0xc6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd4:	e01b      	b.n	8004c0e <HAL_TIM_PWM_Start+0xfe>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_PWM_Start+0xd6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be4:	e013      	b.n	8004c0e <HAL_TIM_PWM_Start+0xfe>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b0c      	cmp	r3, #12
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0xe6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bf4:	e00b      	b.n	8004c0e <HAL_TIM_PWM_Start+0xfe>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start+0xf6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c04:	e003      	b.n	8004c0e <HAL_TIM_PWM_Start+0xfe>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2201      	movs	r2, #1
 8004c14:	6839      	ldr	r1, [r7, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 ffb2 	bl	8005b80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a35      	ldr	r2, [pc, #212]	; (8004cf8 <HAL_TIM_PWM_Start+0x1e8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x13e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a34      	ldr	r2, [pc, #208]	; (8004cfc <HAL_TIM_PWM_Start+0x1ec>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x13e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a32      	ldr	r2, [pc, #200]	; (8004d00 <HAL_TIM_PWM_Start+0x1f0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x13e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a31      	ldr	r2, [pc, #196]	; (8004d04 <HAL_TIM_PWM_Start+0x1f4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x13e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2f      	ldr	r2, [pc, #188]	; (8004d08 <HAL_TIM_PWM_Start+0x1f8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_PWM_Start+0x142>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <HAL_TIM_PWM_Start+0x144>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a22      	ldr	r2, [pc, #136]	; (8004cf8 <HAL_TIM_PWM_Start+0x1e8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01d      	beq.n	8004cae <HAL_TIM_PWM_Start+0x19e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7a:	d018      	beq.n	8004cae <HAL_TIM_PWM_Start+0x19e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a22      	ldr	r2, [pc, #136]	; (8004d0c <HAL_TIM_PWM_Start+0x1fc>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <HAL_TIM_PWM_Start+0x19e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a21      	ldr	r2, [pc, #132]	; (8004d10 <HAL_TIM_PWM_Start+0x200>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00e      	beq.n	8004cae <HAL_TIM_PWM_Start+0x19e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <HAL_TIM_PWM_Start+0x204>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d009      	beq.n	8004cae <HAL_TIM_PWM_Start+0x19e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a17      	ldr	r2, [pc, #92]	; (8004cfc <HAL_TIM_PWM_Start+0x1ec>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <HAL_TIM_PWM_Start+0x19e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a15      	ldr	r2, [pc, #84]	; (8004d00 <HAL_TIM_PWM_Start+0x1f0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d115      	bne.n	8004cda <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	4b18      	ldr	r3, [pc, #96]	; (8004d18 <HAL_TIM_PWM_Start+0x208>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b06      	cmp	r3, #6
 8004cbe:	d015      	beq.n	8004cec <HAL_TIM_PWM_Start+0x1dc>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc6:	d011      	beq.n	8004cec <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd8:	e008      	b.n	8004cec <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e000      	b.n	8004cee <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40013400 	.word	0x40013400
 8004d00:	40014000 	.word	0x40014000
 8004d04:	40014400 	.word	0x40014400
 8004d08:	40014800 	.word	0x40014800
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40000800 	.word	0x40000800
 8004d14:	40000c00 	.word	0x40000c00
 8004d18:	00010007 	.word	0x00010007

08004d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d122      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d11b      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0202 	mvn.w	r2, #2
 8004d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fae6 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fad8 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fae9 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d122      	bne.n	8004dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d11b      	bne.n	8004dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0204 	mvn.w	r2, #4
 8004d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fabc 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8004db8:	e005      	b.n	8004dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 faae 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fabf 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d122      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d11b      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0208 	mvn.w	r2, #8
 8004df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2204      	movs	r2, #4
 8004df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fa92 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8004e0c:	e005      	b.n	8004e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fa84 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fa95 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d122      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d11b      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0210 	mvn.w	r2, #16
 8004e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fa68 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8004e60:	e005      	b.n	8004e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fa5a 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fa6b 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d10e      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d107      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0201 	mvn.w	r2, #1
 8004e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa34 	bl	8005308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eaa:	2b80      	cmp	r3, #128	; 0x80
 8004eac:	d10e      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb8:	2b80      	cmp	r3, #128	; 0x80
 8004eba:	d107      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 ff12 	bl	8005cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eda:	d10e      	bne.n	8004efa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee6:	2b80      	cmp	r3, #128	; 0x80
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 ff05 	bl	8005d04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d10e      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d107      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fa19 	bl	8005358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d10e      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d107      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f06f 0220 	mvn.w	r2, #32
 8004f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fec5 	bl	8005cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e0fd      	b.n	8005172 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b14      	cmp	r3, #20
 8004f82:	f200 80f0 	bhi.w	8005166 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004f86:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08004fe1 	.word	0x08004fe1
 8004f90:	08005167 	.word	0x08005167
 8004f94:	08005167 	.word	0x08005167
 8004f98:	08005167 	.word	0x08005167
 8004f9c:	08005021 	.word	0x08005021
 8004fa0:	08005167 	.word	0x08005167
 8004fa4:	08005167 	.word	0x08005167
 8004fa8:	08005167 	.word	0x08005167
 8004fac:	08005063 	.word	0x08005063
 8004fb0:	08005167 	.word	0x08005167
 8004fb4:	08005167 	.word	0x08005167
 8004fb8:	08005167 	.word	0x08005167
 8004fbc:	080050a3 	.word	0x080050a3
 8004fc0:	08005167 	.word	0x08005167
 8004fc4:	08005167 	.word	0x08005167
 8004fc8:	08005167 	.word	0x08005167
 8004fcc:	080050e5 	.word	0x080050e5
 8004fd0:	08005167 	.word	0x08005167
 8004fd4:	08005167 	.word	0x08005167
 8004fd8:	08005167 	.word	0x08005167
 8004fdc:	08005125 	.word	0x08005125
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fa5a 	bl	80054a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0208 	orr.w	r2, r2, #8
 8004ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0204 	bic.w	r2, r2, #4
 800500a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6999      	ldr	r1, [r3, #24]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	619a      	str	r2, [r3, #24]
      break;
 800501e:	e0a3      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 faca 	bl	80055c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6999      	ldr	r1, [r3, #24]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	021a      	lsls	r2, r3, #8
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	619a      	str	r2, [r3, #24]
      break;
 8005060:	e082      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fb33 	bl	80056d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0208 	orr.w	r2, r2, #8
 800507c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0204 	bic.w	r2, r2, #4
 800508c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69d9      	ldr	r1, [r3, #28]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	61da      	str	r2, [r3, #28]
      break;
 80050a0:	e062      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fb9b 	bl	80057e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69d9      	ldr	r1, [r3, #28]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	021a      	lsls	r2, r3, #8
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	61da      	str	r2, [r3, #28]
      break;
 80050e2:	e041      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fbe4 	bl	80058b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0208 	orr.w	r2, r2, #8
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0204 	bic.w	r2, r2, #4
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005122:	e021      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68b9      	ldr	r1, [r7, #8]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fc28 	bl	8005980 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800513e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	021a      	lsls	r2, r3, #8
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005164:	e000      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005166:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop

0800517c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_TIM_ConfigClockSource+0x18>
 8005190:	2302      	movs	r3, #2
 8005192:	e0b5      	b.n	8005300 <HAL_TIM_ConfigClockSource+0x184>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d0:	d03e      	beq.n	8005250 <HAL_TIM_ConfigClockSource+0xd4>
 80051d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d6:	f200 8087 	bhi.w	80052e8 <HAL_TIM_ConfigClockSource+0x16c>
 80051da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051de:	f000 8085 	beq.w	80052ec <HAL_TIM_ConfigClockSource+0x170>
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e6:	d87f      	bhi.n	80052e8 <HAL_TIM_ConfigClockSource+0x16c>
 80051e8:	2b70      	cmp	r3, #112	; 0x70
 80051ea:	d01a      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0xa6>
 80051ec:	2b70      	cmp	r3, #112	; 0x70
 80051ee:	d87b      	bhi.n	80052e8 <HAL_TIM_ConfigClockSource+0x16c>
 80051f0:	2b60      	cmp	r3, #96	; 0x60
 80051f2:	d050      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x11a>
 80051f4:	2b60      	cmp	r3, #96	; 0x60
 80051f6:	d877      	bhi.n	80052e8 <HAL_TIM_ConfigClockSource+0x16c>
 80051f8:	2b50      	cmp	r3, #80	; 0x50
 80051fa:	d03c      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0xfa>
 80051fc:	2b50      	cmp	r3, #80	; 0x50
 80051fe:	d873      	bhi.n	80052e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005200:	2b40      	cmp	r3, #64	; 0x40
 8005202:	d058      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x13a>
 8005204:	2b40      	cmp	r3, #64	; 0x40
 8005206:	d86f      	bhi.n	80052e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005208:	2b30      	cmp	r3, #48	; 0x30
 800520a:	d064      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x15a>
 800520c:	2b30      	cmp	r3, #48	; 0x30
 800520e:	d86b      	bhi.n	80052e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005210:	2b20      	cmp	r3, #32
 8005212:	d060      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005214:	2b20      	cmp	r3, #32
 8005216:	d867      	bhi.n	80052e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d05c      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x15a>
 800521c:	2b10      	cmp	r3, #16
 800521e:	d05a      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005220:	e062      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6899      	ldr	r1, [r3, #8]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f000 fc85 	bl	8005b40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005244:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	609a      	str	r2, [r3, #8]
      break;
 800524e:	e04e      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	6899      	ldr	r1, [r3, #8]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f000 fc6e 	bl	8005b40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005272:	609a      	str	r2, [r3, #8]
      break;
 8005274:	e03b      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6859      	ldr	r1, [r3, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	461a      	mov	r2, r3
 8005284:	f000 fbe2 	bl	8005a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2150      	movs	r1, #80	; 0x50
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fc3b 	bl	8005b0a <TIM_ITRx_SetConfig>
      break;
 8005294:	e02b      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6859      	ldr	r1, [r3, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	461a      	mov	r2, r3
 80052a4:	f000 fc01 	bl	8005aaa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2160      	movs	r1, #96	; 0x60
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fc2b 	bl	8005b0a <TIM_ITRx_SetConfig>
      break;
 80052b4:	e01b      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6859      	ldr	r1, [r3, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f000 fbc2 	bl	8005a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2140      	movs	r1, #64	; 0x40
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fc1b 	bl	8005b0a <TIM_ITRx_SetConfig>
      break;
 80052d4:	e00b      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4619      	mov	r1, r3
 80052e0:	4610      	mov	r0, r2
 80052e2:	f000 fc12 	bl	8005b0a <TIM_ITRx_SetConfig>
        break;
 80052e6:	e002      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x172>
      break;
 80052e8:	bf00      	nop
 80052ea:	e000      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x172>
      break;
 80052ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a40      	ldr	r2, [pc, #256]	; (8005480 <TIM_Base_SetConfig+0x114>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538a:	d00f      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a3d      	ldr	r2, [pc, #244]	; (8005484 <TIM_Base_SetConfig+0x118>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a3c      	ldr	r2, [pc, #240]	; (8005488 <TIM_Base_SetConfig+0x11c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a3b      	ldr	r2, [pc, #236]	; (800548c <TIM_Base_SetConfig+0x120>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a3a      	ldr	r2, [pc, #232]	; (8005490 <TIM_Base_SetConfig+0x124>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d108      	bne.n	80053be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2f      	ldr	r2, [pc, #188]	; (8005480 <TIM_Base_SetConfig+0x114>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01f      	beq.n	8005406 <TIM_Base_SetConfig+0x9a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d01b      	beq.n	8005406 <TIM_Base_SetConfig+0x9a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2c      	ldr	r2, [pc, #176]	; (8005484 <TIM_Base_SetConfig+0x118>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d017      	beq.n	8005406 <TIM_Base_SetConfig+0x9a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a2b      	ldr	r2, [pc, #172]	; (8005488 <TIM_Base_SetConfig+0x11c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <TIM_Base_SetConfig+0x9a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a2a      	ldr	r2, [pc, #168]	; (800548c <TIM_Base_SetConfig+0x120>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00f      	beq.n	8005406 <TIM_Base_SetConfig+0x9a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a29      	ldr	r2, [pc, #164]	; (8005490 <TIM_Base_SetConfig+0x124>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00b      	beq.n	8005406 <TIM_Base_SetConfig+0x9a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a28      	ldr	r2, [pc, #160]	; (8005494 <TIM_Base_SetConfig+0x128>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <TIM_Base_SetConfig+0x9a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a27      	ldr	r2, [pc, #156]	; (8005498 <TIM_Base_SetConfig+0x12c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d003      	beq.n	8005406 <TIM_Base_SetConfig+0x9a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a26      	ldr	r2, [pc, #152]	; (800549c <TIM_Base_SetConfig+0x130>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d108      	bne.n	8005418 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a10      	ldr	r2, [pc, #64]	; (8005480 <TIM_Base_SetConfig+0x114>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00f      	beq.n	8005464 <TIM_Base_SetConfig+0xf8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a12      	ldr	r2, [pc, #72]	; (8005490 <TIM_Base_SetConfig+0x124>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00b      	beq.n	8005464 <TIM_Base_SetConfig+0xf8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a11      	ldr	r2, [pc, #68]	; (8005494 <TIM_Base_SetConfig+0x128>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d007      	beq.n	8005464 <TIM_Base_SetConfig+0xf8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a10      	ldr	r2, [pc, #64]	; (8005498 <TIM_Base_SetConfig+0x12c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_Base_SetConfig+0xf8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a0f      	ldr	r2, [pc, #60]	; (800549c <TIM_Base_SetConfig+0x130>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d103      	bne.n	800546c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	615a      	str	r2, [r3, #20]
}
 8005472:	bf00      	nop
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40012c00 	.word	0x40012c00
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40013400 	.word	0x40013400
 8005494:	40014000 	.word	0x40014000
 8005498:	40014400 	.word	0x40014400
 800549c:	40014800 	.word	0x40014800

080054a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0201 	bic.w	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0303 	bic.w	r3, r3, #3
 80054da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f023 0302 	bic.w	r3, r3, #2
 80054ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a2c      	ldr	r2, [pc, #176]	; (80055ac <TIM_OC1_SetConfig+0x10c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00f      	beq.n	8005520 <TIM_OC1_SetConfig+0x80>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a2b      	ldr	r2, [pc, #172]	; (80055b0 <TIM_OC1_SetConfig+0x110>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00b      	beq.n	8005520 <TIM_OC1_SetConfig+0x80>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a2a      	ldr	r2, [pc, #168]	; (80055b4 <TIM_OC1_SetConfig+0x114>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d007      	beq.n	8005520 <TIM_OC1_SetConfig+0x80>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a29      	ldr	r2, [pc, #164]	; (80055b8 <TIM_OC1_SetConfig+0x118>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_OC1_SetConfig+0x80>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a28      	ldr	r2, [pc, #160]	; (80055bc <TIM_OC1_SetConfig+0x11c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d10c      	bne.n	800553a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0308 	bic.w	r3, r3, #8
 8005526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f023 0304 	bic.w	r3, r3, #4
 8005538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1b      	ldr	r2, [pc, #108]	; (80055ac <TIM_OC1_SetConfig+0x10c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00f      	beq.n	8005562 <TIM_OC1_SetConfig+0xc2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a1a      	ldr	r2, [pc, #104]	; (80055b0 <TIM_OC1_SetConfig+0x110>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00b      	beq.n	8005562 <TIM_OC1_SetConfig+0xc2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <TIM_OC1_SetConfig+0x114>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <TIM_OC1_SetConfig+0xc2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <TIM_OC1_SetConfig+0x118>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_OC1_SetConfig+0xc2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a17      	ldr	r2, [pc, #92]	; (80055bc <TIM_OC1_SetConfig+0x11c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d111      	bne.n	8005586 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	621a      	str	r2, [r3, #32]
}
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40013400 	.word	0x40013400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40014400 	.word	0x40014400
 80055bc:	40014800 	.word	0x40014800

080055c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f023 0210 	bic.w	r2, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0320 	bic.w	r3, r3, #32
 800560e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a28      	ldr	r2, [pc, #160]	; (80056c0 <TIM_OC2_SetConfig+0x100>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_OC2_SetConfig+0x6c>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a27      	ldr	r2, [pc, #156]	; (80056c4 <TIM_OC2_SetConfig+0x104>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d10d      	bne.n	8005648 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005646:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a1d      	ldr	r2, [pc, #116]	; (80056c0 <TIM_OC2_SetConfig+0x100>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00f      	beq.n	8005670 <TIM_OC2_SetConfig+0xb0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <TIM_OC2_SetConfig+0x104>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00b      	beq.n	8005670 <TIM_OC2_SetConfig+0xb0>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <TIM_OC2_SetConfig+0x108>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_OC2_SetConfig+0xb0>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a1a      	ldr	r2, [pc, #104]	; (80056cc <TIM_OC2_SetConfig+0x10c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC2_SetConfig+0xb0>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a19      	ldr	r2, [pc, #100]	; (80056d0 <TIM_OC2_SetConfig+0x110>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d113      	bne.n	8005698 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800567e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40013400 	.word	0x40013400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800

080056d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0303 	bic.w	r3, r3, #3
 800570e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a27      	ldr	r2, [pc, #156]	; (80057d0 <TIM_OC3_SetConfig+0xfc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_OC3_SetConfig+0x6a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a26      	ldr	r2, [pc, #152]	; (80057d4 <TIM_OC3_SetConfig+0x100>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d10d      	bne.n	800575a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1c      	ldr	r2, [pc, #112]	; (80057d0 <TIM_OC3_SetConfig+0xfc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00f      	beq.n	8005782 <TIM_OC3_SetConfig+0xae>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1b      	ldr	r2, [pc, #108]	; (80057d4 <TIM_OC3_SetConfig+0x100>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00b      	beq.n	8005782 <TIM_OC3_SetConfig+0xae>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1a      	ldr	r2, [pc, #104]	; (80057d8 <TIM_OC3_SetConfig+0x104>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d007      	beq.n	8005782 <TIM_OC3_SetConfig+0xae>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a19      	ldr	r2, [pc, #100]	; (80057dc <TIM_OC3_SetConfig+0x108>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_OC3_SetConfig+0xae>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <TIM_OC3_SetConfig+0x10c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d113      	bne.n	80057aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	621a      	str	r2, [r3, #32]
}
 80057c4:	bf00      	nop
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40013400 	.word	0x40013400
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40014400 	.word	0x40014400
 80057e0:	40014800 	.word	0x40014800

080057e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	031b      	lsls	r3, r3, #12
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <TIM_OC4_SetConfig+0xc0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00f      	beq.n	8005868 <TIM_OC4_SetConfig+0x84>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <TIM_OC4_SetConfig+0xc4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00b      	beq.n	8005868 <TIM_OC4_SetConfig+0x84>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a16      	ldr	r2, [pc, #88]	; (80058ac <TIM_OC4_SetConfig+0xc8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d007      	beq.n	8005868 <TIM_OC4_SetConfig+0x84>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <TIM_OC4_SetConfig+0xcc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_OC4_SetConfig+0x84>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a14      	ldr	r2, [pc, #80]	; (80058b4 <TIM_OC4_SetConfig+0xd0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d109      	bne.n	800587c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800586e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	019b      	lsls	r3, r3, #6
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40013400 	.word	0x40013400
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40014400 	.word	0x40014400
 80058b4:	40014800 	.word	0x40014800

080058b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a17      	ldr	r2, [pc, #92]	; (800596c <TIM_OC5_SetConfig+0xb4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00f      	beq.n	8005932 <TIM_OC5_SetConfig+0x7a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a16      	ldr	r2, [pc, #88]	; (8005970 <TIM_OC5_SetConfig+0xb8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00b      	beq.n	8005932 <TIM_OC5_SetConfig+0x7a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a15      	ldr	r2, [pc, #84]	; (8005974 <TIM_OC5_SetConfig+0xbc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d007      	beq.n	8005932 <TIM_OC5_SetConfig+0x7a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a14      	ldr	r2, [pc, #80]	; (8005978 <TIM_OC5_SetConfig+0xc0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d003      	beq.n	8005932 <TIM_OC5_SetConfig+0x7a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a13      	ldr	r2, [pc, #76]	; (800597c <TIM_OC5_SetConfig+0xc4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d109      	bne.n	8005946 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005938:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	021b      	lsls	r3, r3, #8
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40013400 	.word	0x40013400
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40014800 	.word	0x40014800

08005980 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	051b      	lsls	r3, r3, #20
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a18      	ldr	r2, [pc, #96]	; (8005a38 <TIM_OC6_SetConfig+0xb8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00f      	beq.n	80059fc <TIM_OC6_SetConfig+0x7c>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <TIM_OC6_SetConfig+0xbc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00b      	beq.n	80059fc <TIM_OC6_SetConfig+0x7c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a16      	ldr	r2, [pc, #88]	; (8005a40 <TIM_OC6_SetConfig+0xc0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d007      	beq.n	80059fc <TIM_OC6_SetConfig+0x7c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a15      	ldr	r2, [pc, #84]	; (8005a44 <TIM_OC6_SetConfig+0xc4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d003      	beq.n	80059fc <TIM_OC6_SetConfig+0x7c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a14      	ldr	r2, [pc, #80]	; (8005a48 <TIM_OC6_SetConfig+0xc8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d109      	bne.n	8005a10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	029b      	lsls	r3, r3, #10
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40013400 	.word	0x40013400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40014400 	.word	0x40014400
 8005a48:	40014800 	.word	0x40014800

08005a4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f023 0201 	bic.w	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f023 030a 	bic.w	r3, r3, #10
 8005a88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	621a      	str	r2, [r3, #32]
}
 8005a9e:	bf00      	nop
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b087      	sub	sp, #28
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f023 0210 	bic.w	r2, r3, #16
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	031b      	lsls	r3, r3, #12
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ae6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f043 0307 	orr.w	r3, r3, #7
 8005b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	609a      	str	r2, [r3, #8]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	021a      	lsls	r2, r3, #8
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	609a      	str	r2, [r3, #8]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2201      	movs	r2, #1
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	401a      	ands	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
	...

08005bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e068      	b.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2e      	ldr	r2, [pc, #184]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d108      	bne.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01d      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c56:	d018      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1a      	ldr	r2, [pc, #104]	; (8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00e      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a13      	ldr	r2, [pc, #76]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d004      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d10c      	bne.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40013400 	.word	0x40013400
 8005ccc:	40000400 	.word	0x40000400
 8005cd0:	40000800 	.word	0x40000800
 8005cd4:	40000c00 	.word	0x40000c00
 8005cd8:	40014000 	.word	0x40014000

08005cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e040      	b.n	8005dac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fb f8d8 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2224      	movs	r2, #36	; 0x24
 8005d44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f8c0 	bl	8005edc <UART_SetConfig>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e022      	b.n	8005dac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fb3e 	bl	80063f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fbc5 	bl	8006534 <UART_CheckIdleState>
 8005daa:	4603      	mov	r3, r0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	; 0x28
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	f040 8082 	bne.w	8005ed2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_UART_Transmit+0x26>
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e07a      	b.n	8005ed4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_UART_Transmit+0x38>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e073      	b.n	8005ed4 <HAL_UART_Transmit+0x120>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2221      	movs	r2, #33	; 0x21
 8005e00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e02:	f7fb faf9 	bl	80013f8 <HAL_GetTick>
 8005e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	88fa      	ldrh	r2, [r7, #6]
 8005e0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	88fa      	ldrh	r2, [r7, #6]
 8005e14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e20:	d108      	bne.n	8005e34 <HAL_UART_Transmit+0x80>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	e003      	b.n	8005e3c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005e44:	e02d      	b.n	8005ea2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2180      	movs	r1, #128	; 0x80
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fbb8 	bl	80065c6 <UART_WaitOnFlagUntilTimeout>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e039      	b.n	8005ed4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10b      	bne.n	8005e7e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	881a      	ldrh	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e72:	b292      	uxth	r2, r2
 8005e74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	3302      	adds	r3, #2
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	e008      	b.n	8005e90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	781a      	ldrb	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	b292      	uxth	r2, r2
 8005e88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1cb      	bne.n	8005e46 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2140      	movs	r1, #64	; 0x40
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fb84 	bl	80065c6 <UART_WaitOnFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e005      	b.n	8005ed4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e000      	b.n	8005ed4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005ed2:	2302      	movs	r3, #2
  }
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005edc:	b5b0      	push	{r4, r5, r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4bad      	ldr	r3, [pc, #692]	; (80061bc <UART_SetConfig+0x2e0>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	69f9      	ldr	r1, [r7, #28]
 8005f10:	430b      	orrs	r3, r1
 8005f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4aa2      	ldr	r2, [pc, #648]	; (80061c0 <UART_SetConfig+0x2e4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a99      	ldr	r2, [pc, #612]	; (80061c4 <UART_SetConfig+0x2e8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d121      	bne.n	8005fa6 <UART_SetConfig+0xca>
 8005f62:	4b99      	ldr	r3, [pc, #612]	; (80061c8 <UART_SetConfig+0x2ec>)
 8005f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d817      	bhi.n	8005fa0 <UART_SetConfig+0xc4>
 8005f70:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <UART_SetConfig+0x9c>)
 8005f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f76:	bf00      	nop
 8005f78:	08005f89 	.word	0x08005f89
 8005f7c:	08005f95 	.word	0x08005f95
 8005f80:	08005f8f 	.word	0x08005f8f
 8005f84:	08005f9b 	.word	0x08005f9b
 8005f88:	2301      	movs	r3, #1
 8005f8a:	76fb      	strb	r3, [r7, #27]
 8005f8c:	e0e7      	b.n	800615e <UART_SetConfig+0x282>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	76fb      	strb	r3, [r7, #27]
 8005f92:	e0e4      	b.n	800615e <UART_SetConfig+0x282>
 8005f94:	2304      	movs	r3, #4
 8005f96:	76fb      	strb	r3, [r7, #27]
 8005f98:	e0e1      	b.n	800615e <UART_SetConfig+0x282>
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	76fb      	strb	r3, [r7, #27]
 8005f9e:	e0de      	b.n	800615e <UART_SetConfig+0x282>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	76fb      	strb	r3, [r7, #27]
 8005fa4:	e0db      	b.n	800615e <UART_SetConfig+0x282>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a88      	ldr	r2, [pc, #544]	; (80061cc <UART_SetConfig+0x2f0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d132      	bne.n	8006016 <UART_SetConfig+0x13a>
 8005fb0:	4b85      	ldr	r3, [pc, #532]	; (80061c8 <UART_SetConfig+0x2ec>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	f003 030c 	and.w	r3, r3, #12
 8005fba:	2b0c      	cmp	r3, #12
 8005fbc:	d828      	bhi.n	8006010 <UART_SetConfig+0x134>
 8005fbe:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0xe8>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005ff9 	.word	0x08005ff9
 8005fc8:	08006011 	.word	0x08006011
 8005fcc:	08006011 	.word	0x08006011
 8005fd0:	08006011 	.word	0x08006011
 8005fd4:	08006005 	.word	0x08006005
 8005fd8:	08006011 	.word	0x08006011
 8005fdc:	08006011 	.word	0x08006011
 8005fe0:	08006011 	.word	0x08006011
 8005fe4:	08005fff 	.word	0x08005fff
 8005fe8:	08006011 	.word	0x08006011
 8005fec:	08006011 	.word	0x08006011
 8005ff0:	08006011 	.word	0x08006011
 8005ff4:	0800600b 	.word	0x0800600b
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	76fb      	strb	r3, [r7, #27]
 8005ffc:	e0af      	b.n	800615e <UART_SetConfig+0x282>
 8005ffe:	2302      	movs	r3, #2
 8006000:	76fb      	strb	r3, [r7, #27]
 8006002:	e0ac      	b.n	800615e <UART_SetConfig+0x282>
 8006004:	2304      	movs	r3, #4
 8006006:	76fb      	strb	r3, [r7, #27]
 8006008:	e0a9      	b.n	800615e <UART_SetConfig+0x282>
 800600a:	2308      	movs	r3, #8
 800600c:	76fb      	strb	r3, [r7, #27]
 800600e:	e0a6      	b.n	800615e <UART_SetConfig+0x282>
 8006010:	2310      	movs	r3, #16
 8006012:	76fb      	strb	r3, [r7, #27]
 8006014:	e0a3      	b.n	800615e <UART_SetConfig+0x282>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a6d      	ldr	r2, [pc, #436]	; (80061d0 <UART_SetConfig+0x2f4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d120      	bne.n	8006062 <UART_SetConfig+0x186>
 8006020:	4b69      	ldr	r3, [pc, #420]	; (80061c8 <UART_SetConfig+0x2ec>)
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006026:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800602a:	2b30      	cmp	r3, #48	; 0x30
 800602c:	d013      	beq.n	8006056 <UART_SetConfig+0x17a>
 800602e:	2b30      	cmp	r3, #48	; 0x30
 8006030:	d814      	bhi.n	800605c <UART_SetConfig+0x180>
 8006032:	2b20      	cmp	r3, #32
 8006034:	d009      	beq.n	800604a <UART_SetConfig+0x16e>
 8006036:	2b20      	cmp	r3, #32
 8006038:	d810      	bhi.n	800605c <UART_SetConfig+0x180>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <UART_SetConfig+0x168>
 800603e:	2b10      	cmp	r3, #16
 8006040:	d006      	beq.n	8006050 <UART_SetConfig+0x174>
 8006042:	e00b      	b.n	800605c <UART_SetConfig+0x180>
 8006044:	2300      	movs	r3, #0
 8006046:	76fb      	strb	r3, [r7, #27]
 8006048:	e089      	b.n	800615e <UART_SetConfig+0x282>
 800604a:	2302      	movs	r3, #2
 800604c:	76fb      	strb	r3, [r7, #27]
 800604e:	e086      	b.n	800615e <UART_SetConfig+0x282>
 8006050:	2304      	movs	r3, #4
 8006052:	76fb      	strb	r3, [r7, #27]
 8006054:	e083      	b.n	800615e <UART_SetConfig+0x282>
 8006056:	2308      	movs	r3, #8
 8006058:	76fb      	strb	r3, [r7, #27]
 800605a:	e080      	b.n	800615e <UART_SetConfig+0x282>
 800605c:	2310      	movs	r3, #16
 800605e:	76fb      	strb	r3, [r7, #27]
 8006060:	e07d      	b.n	800615e <UART_SetConfig+0x282>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a5b      	ldr	r2, [pc, #364]	; (80061d4 <UART_SetConfig+0x2f8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d120      	bne.n	80060ae <UART_SetConfig+0x1d2>
 800606c:	4b56      	ldr	r3, [pc, #344]	; (80061c8 <UART_SetConfig+0x2ec>)
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006072:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006076:	2bc0      	cmp	r3, #192	; 0xc0
 8006078:	d013      	beq.n	80060a2 <UART_SetConfig+0x1c6>
 800607a:	2bc0      	cmp	r3, #192	; 0xc0
 800607c:	d814      	bhi.n	80060a8 <UART_SetConfig+0x1cc>
 800607e:	2b80      	cmp	r3, #128	; 0x80
 8006080:	d009      	beq.n	8006096 <UART_SetConfig+0x1ba>
 8006082:	2b80      	cmp	r3, #128	; 0x80
 8006084:	d810      	bhi.n	80060a8 <UART_SetConfig+0x1cc>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <UART_SetConfig+0x1b4>
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d006      	beq.n	800609c <UART_SetConfig+0x1c0>
 800608e:	e00b      	b.n	80060a8 <UART_SetConfig+0x1cc>
 8006090:	2300      	movs	r3, #0
 8006092:	76fb      	strb	r3, [r7, #27]
 8006094:	e063      	b.n	800615e <UART_SetConfig+0x282>
 8006096:	2302      	movs	r3, #2
 8006098:	76fb      	strb	r3, [r7, #27]
 800609a:	e060      	b.n	800615e <UART_SetConfig+0x282>
 800609c:	2304      	movs	r3, #4
 800609e:	76fb      	strb	r3, [r7, #27]
 80060a0:	e05d      	b.n	800615e <UART_SetConfig+0x282>
 80060a2:	2308      	movs	r3, #8
 80060a4:	76fb      	strb	r3, [r7, #27]
 80060a6:	e05a      	b.n	800615e <UART_SetConfig+0x282>
 80060a8:	2310      	movs	r3, #16
 80060aa:	76fb      	strb	r3, [r7, #27]
 80060ac:	e057      	b.n	800615e <UART_SetConfig+0x282>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a49      	ldr	r2, [pc, #292]	; (80061d8 <UART_SetConfig+0x2fc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d125      	bne.n	8006104 <UART_SetConfig+0x228>
 80060b8:	4b43      	ldr	r3, [pc, #268]	; (80061c8 <UART_SetConfig+0x2ec>)
 80060ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060c6:	d017      	beq.n	80060f8 <UART_SetConfig+0x21c>
 80060c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060cc:	d817      	bhi.n	80060fe <UART_SetConfig+0x222>
 80060ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d2:	d00b      	beq.n	80060ec <UART_SetConfig+0x210>
 80060d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d8:	d811      	bhi.n	80060fe <UART_SetConfig+0x222>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <UART_SetConfig+0x20a>
 80060de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e2:	d006      	beq.n	80060f2 <UART_SetConfig+0x216>
 80060e4:	e00b      	b.n	80060fe <UART_SetConfig+0x222>
 80060e6:	2300      	movs	r3, #0
 80060e8:	76fb      	strb	r3, [r7, #27]
 80060ea:	e038      	b.n	800615e <UART_SetConfig+0x282>
 80060ec:	2302      	movs	r3, #2
 80060ee:	76fb      	strb	r3, [r7, #27]
 80060f0:	e035      	b.n	800615e <UART_SetConfig+0x282>
 80060f2:	2304      	movs	r3, #4
 80060f4:	76fb      	strb	r3, [r7, #27]
 80060f6:	e032      	b.n	800615e <UART_SetConfig+0x282>
 80060f8:	2308      	movs	r3, #8
 80060fa:	76fb      	strb	r3, [r7, #27]
 80060fc:	e02f      	b.n	800615e <UART_SetConfig+0x282>
 80060fe:	2310      	movs	r3, #16
 8006100:	76fb      	strb	r3, [r7, #27]
 8006102:	e02c      	b.n	800615e <UART_SetConfig+0x282>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2d      	ldr	r2, [pc, #180]	; (80061c0 <UART_SetConfig+0x2e4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d125      	bne.n	800615a <UART_SetConfig+0x27e>
 800610e:	4b2e      	ldr	r3, [pc, #184]	; (80061c8 <UART_SetConfig+0x2ec>)
 8006110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006114:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006118:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800611c:	d017      	beq.n	800614e <UART_SetConfig+0x272>
 800611e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006122:	d817      	bhi.n	8006154 <UART_SetConfig+0x278>
 8006124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006128:	d00b      	beq.n	8006142 <UART_SetConfig+0x266>
 800612a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800612e:	d811      	bhi.n	8006154 <UART_SetConfig+0x278>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <UART_SetConfig+0x260>
 8006134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006138:	d006      	beq.n	8006148 <UART_SetConfig+0x26c>
 800613a:	e00b      	b.n	8006154 <UART_SetConfig+0x278>
 800613c:	2300      	movs	r3, #0
 800613e:	76fb      	strb	r3, [r7, #27]
 8006140:	e00d      	b.n	800615e <UART_SetConfig+0x282>
 8006142:	2302      	movs	r3, #2
 8006144:	76fb      	strb	r3, [r7, #27]
 8006146:	e00a      	b.n	800615e <UART_SetConfig+0x282>
 8006148:	2304      	movs	r3, #4
 800614a:	76fb      	strb	r3, [r7, #27]
 800614c:	e007      	b.n	800615e <UART_SetConfig+0x282>
 800614e:	2308      	movs	r3, #8
 8006150:	76fb      	strb	r3, [r7, #27]
 8006152:	e004      	b.n	800615e <UART_SetConfig+0x282>
 8006154:	2310      	movs	r3, #16
 8006156:	76fb      	strb	r3, [r7, #27]
 8006158:	e001      	b.n	800615e <UART_SetConfig+0x282>
 800615a:	2310      	movs	r3, #16
 800615c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a17      	ldr	r2, [pc, #92]	; (80061c0 <UART_SetConfig+0x2e4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	f040 8087 	bne.w	8006278 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800616a:	7efb      	ldrb	r3, [r7, #27]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d837      	bhi.n	80061e0 <UART_SetConfig+0x304>
 8006170:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <UART_SetConfig+0x29c>)
 8006172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006176:	bf00      	nop
 8006178:	0800619d 	.word	0x0800619d
 800617c:	080061e1 	.word	0x080061e1
 8006180:	080061a5 	.word	0x080061a5
 8006184:	080061e1 	.word	0x080061e1
 8006188:	080061ab 	.word	0x080061ab
 800618c:	080061e1 	.word	0x080061e1
 8006190:	080061e1 	.word	0x080061e1
 8006194:	080061e1 	.word	0x080061e1
 8006198:	080061b3 	.word	0x080061b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800619c:	f7fd feb8 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 80061a0:	6178      	str	r0, [r7, #20]
        break;
 80061a2:	e022      	b.n	80061ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a4:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <UART_SetConfig+0x300>)
 80061a6:	617b      	str	r3, [r7, #20]
        break;
 80061a8:	e01f      	b.n	80061ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061aa:	f7fd fe19 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 80061ae:	6178      	str	r0, [r7, #20]
        break;
 80061b0:	e01b      	b.n	80061ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b6:	617b      	str	r3, [r7, #20]
        break;
 80061b8:	e017      	b.n	80061ea <UART_SetConfig+0x30e>
 80061ba:	bf00      	nop
 80061bc:	efff69f3 	.word	0xefff69f3
 80061c0:	40008000 	.word	0x40008000
 80061c4:	40013800 	.word	0x40013800
 80061c8:	40021000 	.word	0x40021000
 80061cc:	40004400 	.word	0x40004400
 80061d0:	40004800 	.word	0x40004800
 80061d4:	40004c00 	.word	0x40004c00
 80061d8:	40005000 	.word	0x40005000
 80061dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	76bb      	strb	r3, [r7, #26]
        break;
 80061e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80f1 	beq.w	80063d4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d305      	bcc.n	800620e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	429a      	cmp	r2, r3
 800620c:	d902      	bls.n	8006214 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	76bb      	strb	r3, [r7, #26]
 8006212:	e0df      	b.n	80063d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	4618      	mov	r0, r3
 8006218:	f04f 0100 	mov.w	r1, #0
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	020b      	lsls	r3, r1, #8
 8006226:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800622a:	0202      	lsls	r2, r0, #8
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	6849      	ldr	r1, [r1, #4]
 8006230:	0849      	lsrs	r1, r1, #1
 8006232:	4608      	mov	r0, r1
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	1814      	adds	r4, r2, r0
 800623a:	eb43 0501 	adc.w	r5, r3, r1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	461a      	mov	r2, r3
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	4620      	mov	r0, r4
 800624a:	4629      	mov	r1, r5
 800624c:	f7f9 ffc4 	bl	80001d8 <__aeabi_uldivmod>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4613      	mov	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800625e:	d308      	bcc.n	8006272 <UART_SetConfig+0x396>
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006266:	d204      	bcs.n	8006272 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	60da      	str	r2, [r3, #12]
 8006270:	e0b0      	b.n	80063d4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	76bb      	strb	r3, [r7, #26]
 8006276:	e0ad      	b.n	80063d4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006280:	d15c      	bne.n	800633c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006282:	7efb      	ldrb	r3, [r7, #27]
 8006284:	2b08      	cmp	r3, #8
 8006286:	d828      	bhi.n	80062da <UART_SetConfig+0x3fe>
 8006288:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0x3b4>)
 800628a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628e:	bf00      	nop
 8006290:	080062b5 	.word	0x080062b5
 8006294:	080062bd 	.word	0x080062bd
 8006298:	080062c5 	.word	0x080062c5
 800629c:	080062db 	.word	0x080062db
 80062a0:	080062cb 	.word	0x080062cb
 80062a4:	080062db 	.word	0x080062db
 80062a8:	080062db 	.word	0x080062db
 80062ac:	080062db 	.word	0x080062db
 80062b0:	080062d3 	.word	0x080062d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b4:	f7fd fe2c 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 80062b8:	6178      	str	r0, [r7, #20]
        break;
 80062ba:	e013      	b.n	80062e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062bc:	f7fd fe3e 	bl	8003f3c <HAL_RCC_GetPCLK2Freq>
 80062c0:	6178      	str	r0, [r7, #20]
        break;
 80062c2:	e00f      	b.n	80062e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c4:	4b49      	ldr	r3, [pc, #292]	; (80063ec <UART_SetConfig+0x510>)
 80062c6:	617b      	str	r3, [r7, #20]
        break;
 80062c8:	e00c      	b.n	80062e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ca:	f7fd fd89 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 80062ce:	6178      	str	r0, [r7, #20]
        break;
 80062d0:	e008      	b.n	80062e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d6:	617b      	str	r3, [r7, #20]
        break;
 80062d8:	e004      	b.n	80062e4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	76bb      	strb	r3, [r7, #26]
        break;
 80062e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d074      	beq.n	80063d4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	005a      	lsls	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	441a      	add	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fe:	b29b      	uxth	r3, r3
 8006300:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b0f      	cmp	r3, #15
 8006306:	d916      	bls.n	8006336 <UART_SetConfig+0x45a>
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630e:	d212      	bcs.n	8006336 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f023 030f 	bic.w	r3, r3, #15
 8006318:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	085b      	lsrs	r3, r3, #1
 800631e:	b29b      	uxth	r3, r3
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	b29a      	uxth	r2, r3
 8006326:	89fb      	ldrh	r3, [r7, #14]
 8006328:	4313      	orrs	r3, r2
 800632a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	89fa      	ldrh	r2, [r7, #14]
 8006332:	60da      	str	r2, [r3, #12]
 8006334:	e04e      	b.n	80063d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	76bb      	strb	r3, [r7, #26]
 800633a:	e04b      	b.n	80063d4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800633c:	7efb      	ldrb	r3, [r7, #27]
 800633e:	2b08      	cmp	r3, #8
 8006340:	d827      	bhi.n	8006392 <UART_SetConfig+0x4b6>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <UART_SetConfig+0x46c>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	0800636d 	.word	0x0800636d
 800634c:	08006375 	.word	0x08006375
 8006350:	0800637d 	.word	0x0800637d
 8006354:	08006393 	.word	0x08006393
 8006358:	08006383 	.word	0x08006383
 800635c:	08006393 	.word	0x08006393
 8006360:	08006393 	.word	0x08006393
 8006364:	08006393 	.word	0x08006393
 8006368:	0800638b 	.word	0x0800638b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800636c:	f7fd fdd0 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 8006370:	6178      	str	r0, [r7, #20]
        break;
 8006372:	e013      	b.n	800639c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006374:	f7fd fde2 	bl	8003f3c <HAL_RCC_GetPCLK2Freq>
 8006378:	6178      	str	r0, [r7, #20]
        break;
 800637a:	e00f      	b.n	800639c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <UART_SetConfig+0x510>)
 800637e:	617b      	str	r3, [r7, #20]
        break;
 8006380:	e00c      	b.n	800639c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006382:	f7fd fd2d 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8006386:	6178      	str	r0, [r7, #20]
        break;
 8006388:	e008      	b.n	800639c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800638a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800638e:	617b      	str	r3, [r7, #20]
        break;
 8006390:	e004      	b.n	800639c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	76bb      	strb	r3, [r7, #26]
        break;
 800639a:	bf00      	nop
    }

    if (pclk != 0U)
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d018      	beq.n	80063d4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	085a      	lsrs	r2, r3, #1
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	441a      	add	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b0f      	cmp	r3, #15
 80063bc:	d908      	bls.n	80063d0 <UART_SetConfig+0x4f4>
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c4:	d204      	bcs.n	80063d0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	60da      	str	r2, [r3, #12]
 80063ce:	e001      	b.n	80063d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063e0:	7ebb      	ldrb	r3, [r7, #26]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bdb0      	pop	{r4, r5, r7, pc}
 80063ea:	bf00      	nop
 80063ec:	00f42400 	.word	0x00f42400

080063f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01a      	beq.n	8006506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ee:	d10a      	bne.n	8006506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	605a      	str	r2, [r3, #4]
  }
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af02      	add	r7, sp, #8
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006544:	f7fa ff58 	bl	80013f8 <HAL_GetTick>
 8006548:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b08      	cmp	r3, #8
 8006556:	d10e      	bne.n	8006576 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f82d 	bl	80065c6 <UART_WaitOnFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e023      	b.n	80065be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b04      	cmp	r3, #4
 8006582:	d10e      	bne.n	80065a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f817 	bl	80065c6 <UART_WaitOnFlagUntilTimeout>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e00d      	b.n	80065be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	4613      	mov	r3, r2
 80065d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d6:	e05e      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d05a      	beq.n	8006696 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e0:	f7fa ff0a 	bl	80013f8 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d302      	bcc.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d11b      	bne.n	800662e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006604:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0201 	bic.w	r2, r2, #1
 8006614:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2220      	movs	r2, #32
 800661a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2220      	movs	r2, #32
 8006620:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e043      	b.n	80066b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d02c      	beq.n	8006696 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800664a:	d124      	bne.n	8006696 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006654:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006664:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0201 	bic.w	r2, r2, #1
 8006674:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2220      	movs	r2, #32
 8006686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e00f      	b.n	80066b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69da      	ldr	r2, [r3, #28]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4013      	ands	r3, r2
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	bf0c      	ite	eq
 80066a6:	2301      	moveq	r3, #1
 80066a8:	2300      	movne	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d091      	beq.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <__errno>:
 80066c0:	4b01      	ldr	r3, [pc, #4]	; (80066c8 <__errno+0x8>)
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	2000000c 	.word	0x2000000c

080066cc <__libc_init_array>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	4d0d      	ldr	r5, [pc, #52]	; (8006704 <__libc_init_array+0x38>)
 80066d0:	4c0d      	ldr	r4, [pc, #52]	; (8006708 <__libc_init_array+0x3c>)
 80066d2:	1b64      	subs	r4, r4, r5
 80066d4:	10a4      	asrs	r4, r4, #2
 80066d6:	2600      	movs	r6, #0
 80066d8:	42a6      	cmp	r6, r4
 80066da:	d109      	bne.n	80066f0 <__libc_init_array+0x24>
 80066dc:	4d0b      	ldr	r5, [pc, #44]	; (800670c <__libc_init_array+0x40>)
 80066de:	4c0c      	ldr	r4, [pc, #48]	; (8006710 <__libc_init_array+0x44>)
 80066e0:	f000 fcf6 	bl	80070d0 <_init>
 80066e4:	1b64      	subs	r4, r4, r5
 80066e6:	10a4      	asrs	r4, r4, #2
 80066e8:	2600      	movs	r6, #0
 80066ea:	42a6      	cmp	r6, r4
 80066ec:	d105      	bne.n	80066fa <__libc_init_array+0x2e>
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f4:	4798      	blx	r3
 80066f6:	3601      	adds	r6, #1
 80066f8:	e7ee      	b.n	80066d8 <__libc_init_array+0xc>
 80066fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066fe:	4798      	blx	r3
 8006700:	3601      	adds	r6, #1
 8006702:	e7f2      	b.n	80066ea <__libc_init_array+0x1e>
 8006704:	080072d0 	.word	0x080072d0
 8006708:	080072d0 	.word	0x080072d0
 800670c:	080072d0 	.word	0x080072d0
 8006710:	080072d4 	.word	0x080072d4

08006714 <memset>:
 8006714:	4402      	add	r2, r0
 8006716:	4603      	mov	r3, r0
 8006718:	4293      	cmp	r3, r2
 800671a:	d100      	bne.n	800671e <memset+0xa>
 800671c:	4770      	bx	lr
 800671e:	f803 1b01 	strb.w	r1, [r3], #1
 8006722:	e7f9      	b.n	8006718 <memset+0x4>

08006724 <_free_r>:
 8006724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006726:	2900      	cmp	r1, #0
 8006728:	d048      	beq.n	80067bc <_free_r+0x98>
 800672a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800672e:	9001      	str	r0, [sp, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	f1a1 0404 	sub.w	r4, r1, #4
 8006736:	bfb8      	it	lt
 8006738:	18e4      	addlt	r4, r4, r3
 800673a:	f000 fc11 	bl	8006f60 <__malloc_lock>
 800673e:	4a20      	ldr	r2, [pc, #128]	; (80067c0 <_free_r+0x9c>)
 8006740:	9801      	ldr	r0, [sp, #4]
 8006742:	6813      	ldr	r3, [r2, #0]
 8006744:	4615      	mov	r5, r2
 8006746:	b933      	cbnz	r3, 8006756 <_free_r+0x32>
 8006748:	6063      	str	r3, [r4, #4]
 800674a:	6014      	str	r4, [r2, #0]
 800674c:	b003      	add	sp, #12
 800674e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006752:	f000 bc0b 	b.w	8006f6c <__malloc_unlock>
 8006756:	42a3      	cmp	r3, r4
 8006758:	d90b      	bls.n	8006772 <_free_r+0x4e>
 800675a:	6821      	ldr	r1, [r4, #0]
 800675c:	1862      	adds	r2, r4, r1
 800675e:	4293      	cmp	r3, r2
 8006760:	bf04      	itt	eq
 8006762:	681a      	ldreq	r2, [r3, #0]
 8006764:	685b      	ldreq	r3, [r3, #4]
 8006766:	6063      	str	r3, [r4, #4]
 8006768:	bf04      	itt	eq
 800676a:	1852      	addeq	r2, r2, r1
 800676c:	6022      	streq	r2, [r4, #0]
 800676e:	602c      	str	r4, [r5, #0]
 8006770:	e7ec      	b.n	800674c <_free_r+0x28>
 8006772:	461a      	mov	r2, r3
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	b10b      	cbz	r3, 800677c <_free_r+0x58>
 8006778:	42a3      	cmp	r3, r4
 800677a:	d9fa      	bls.n	8006772 <_free_r+0x4e>
 800677c:	6811      	ldr	r1, [r2, #0]
 800677e:	1855      	adds	r5, r2, r1
 8006780:	42a5      	cmp	r5, r4
 8006782:	d10b      	bne.n	800679c <_free_r+0x78>
 8006784:	6824      	ldr	r4, [r4, #0]
 8006786:	4421      	add	r1, r4
 8006788:	1854      	adds	r4, r2, r1
 800678a:	42a3      	cmp	r3, r4
 800678c:	6011      	str	r1, [r2, #0]
 800678e:	d1dd      	bne.n	800674c <_free_r+0x28>
 8006790:	681c      	ldr	r4, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	6053      	str	r3, [r2, #4]
 8006796:	4421      	add	r1, r4
 8006798:	6011      	str	r1, [r2, #0]
 800679a:	e7d7      	b.n	800674c <_free_r+0x28>
 800679c:	d902      	bls.n	80067a4 <_free_r+0x80>
 800679e:	230c      	movs	r3, #12
 80067a0:	6003      	str	r3, [r0, #0]
 80067a2:	e7d3      	b.n	800674c <_free_r+0x28>
 80067a4:	6825      	ldr	r5, [r4, #0]
 80067a6:	1961      	adds	r1, r4, r5
 80067a8:	428b      	cmp	r3, r1
 80067aa:	bf04      	itt	eq
 80067ac:	6819      	ldreq	r1, [r3, #0]
 80067ae:	685b      	ldreq	r3, [r3, #4]
 80067b0:	6063      	str	r3, [r4, #4]
 80067b2:	bf04      	itt	eq
 80067b4:	1949      	addeq	r1, r1, r5
 80067b6:	6021      	streq	r1, [r4, #0]
 80067b8:	6054      	str	r4, [r2, #4]
 80067ba:	e7c7      	b.n	800674c <_free_r+0x28>
 80067bc:	b003      	add	sp, #12
 80067be:	bd30      	pop	{r4, r5, pc}
 80067c0:	20000090 	.word	0x20000090

080067c4 <_malloc_r>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	1ccd      	adds	r5, r1, #3
 80067c8:	f025 0503 	bic.w	r5, r5, #3
 80067cc:	3508      	adds	r5, #8
 80067ce:	2d0c      	cmp	r5, #12
 80067d0:	bf38      	it	cc
 80067d2:	250c      	movcc	r5, #12
 80067d4:	2d00      	cmp	r5, #0
 80067d6:	4606      	mov	r6, r0
 80067d8:	db01      	blt.n	80067de <_malloc_r+0x1a>
 80067da:	42a9      	cmp	r1, r5
 80067dc:	d903      	bls.n	80067e6 <_malloc_r+0x22>
 80067de:	230c      	movs	r3, #12
 80067e0:	6033      	str	r3, [r6, #0]
 80067e2:	2000      	movs	r0, #0
 80067e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e6:	f000 fbbb 	bl	8006f60 <__malloc_lock>
 80067ea:	4921      	ldr	r1, [pc, #132]	; (8006870 <_malloc_r+0xac>)
 80067ec:	680a      	ldr	r2, [r1, #0]
 80067ee:	4614      	mov	r4, r2
 80067f0:	b99c      	cbnz	r4, 800681a <_malloc_r+0x56>
 80067f2:	4f20      	ldr	r7, [pc, #128]	; (8006874 <_malloc_r+0xb0>)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	b923      	cbnz	r3, 8006802 <_malloc_r+0x3e>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4630      	mov	r0, r6
 80067fc:	f000 f8b2 	bl	8006964 <_sbrk_r>
 8006800:	6038      	str	r0, [r7, #0]
 8006802:	4629      	mov	r1, r5
 8006804:	4630      	mov	r0, r6
 8006806:	f000 f8ad 	bl	8006964 <_sbrk_r>
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	d123      	bne.n	8006856 <_malloc_r+0x92>
 800680e:	230c      	movs	r3, #12
 8006810:	6033      	str	r3, [r6, #0]
 8006812:	4630      	mov	r0, r6
 8006814:	f000 fbaa 	bl	8006f6c <__malloc_unlock>
 8006818:	e7e3      	b.n	80067e2 <_malloc_r+0x1e>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	1b5b      	subs	r3, r3, r5
 800681e:	d417      	bmi.n	8006850 <_malloc_r+0x8c>
 8006820:	2b0b      	cmp	r3, #11
 8006822:	d903      	bls.n	800682c <_malloc_r+0x68>
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	441c      	add	r4, r3
 8006828:	6025      	str	r5, [r4, #0]
 800682a:	e004      	b.n	8006836 <_malloc_r+0x72>
 800682c:	6863      	ldr	r3, [r4, #4]
 800682e:	42a2      	cmp	r2, r4
 8006830:	bf0c      	ite	eq
 8006832:	600b      	streq	r3, [r1, #0]
 8006834:	6053      	strne	r3, [r2, #4]
 8006836:	4630      	mov	r0, r6
 8006838:	f000 fb98 	bl	8006f6c <__malloc_unlock>
 800683c:	f104 000b 	add.w	r0, r4, #11
 8006840:	1d23      	adds	r3, r4, #4
 8006842:	f020 0007 	bic.w	r0, r0, #7
 8006846:	1ac2      	subs	r2, r0, r3
 8006848:	d0cc      	beq.n	80067e4 <_malloc_r+0x20>
 800684a:	1a1b      	subs	r3, r3, r0
 800684c:	50a3      	str	r3, [r4, r2]
 800684e:	e7c9      	b.n	80067e4 <_malloc_r+0x20>
 8006850:	4622      	mov	r2, r4
 8006852:	6864      	ldr	r4, [r4, #4]
 8006854:	e7cc      	b.n	80067f0 <_malloc_r+0x2c>
 8006856:	1cc4      	adds	r4, r0, #3
 8006858:	f024 0403 	bic.w	r4, r4, #3
 800685c:	42a0      	cmp	r0, r4
 800685e:	d0e3      	beq.n	8006828 <_malloc_r+0x64>
 8006860:	1a21      	subs	r1, r4, r0
 8006862:	4630      	mov	r0, r6
 8006864:	f000 f87e 	bl	8006964 <_sbrk_r>
 8006868:	3001      	adds	r0, #1
 800686a:	d1dd      	bne.n	8006828 <_malloc_r+0x64>
 800686c:	e7cf      	b.n	800680e <_malloc_r+0x4a>
 800686e:	bf00      	nop
 8006870:	20000090 	.word	0x20000090
 8006874:	20000094 	.word	0x20000094

08006878 <_puts_r>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	460e      	mov	r6, r1
 800687c:	4605      	mov	r5, r0
 800687e:	b118      	cbz	r0, 8006888 <_puts_r+0x10>
 8006880:	6983      	ldr	r3, [r0, #24]
 8006882:	b90b      	cbnz	r3, 8006888 <_puts_r+0x10>
 8006884:	f000 fa68 	bl	8006d58 <__sinit>
 8006888:	69ab      	ldr	r3, [r5, #24]
 800688a:	68ac      	ldr	r4, [r5, #8]
 800688c:	b913      	cbnz	r3, 8006894 <_puts_r+0x1c>
 800688e:	4628      	mov	r0, r5
 8006890:	f000 fa62 	bl	8006d58 <__sinit>
 8006894:	4b2c      	ldr	r3, [pc, #176]	; (8006948 <_puts_r+0xd0>)
 8006896:	429c      	cmp	r4, r3
 8006898:	d120      	bne.n	80068dc <_puts_r+0x64>
 800689a:	686c      	ldr	r4, [r5, #4]
 800689c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800689e:	07db      	lsls	r3, r3, #31
 80068a0:	d405      	bmi.n	80068ae <_puts_r+0x36>
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	0598      	lsls	r0, r3, #22
 80068a6:	d402      	bmi.n	80068ae <_puts_r+0x36>
 80068a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068aa:	f000 faf3 	bl	8006e94 <__retarget_lock_acquire_recursive>
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	0719      	lsls	r1, r3, #28
 80068b2:	d51d      	bpl.n	80068f0 <_puts_r+0x78>
 80068b4:	6923      	ldr	r3, [r4, #16]
 80068b6:	b1db      	cbz	r3, 80068f0 <_puts_r+0x78>
 80068b8:	3e01      	subs	r6, #1
 80068ba:	68a3      	ldr	r3, [r4, #8]
 80068bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068c0:	3b01      	subs	r3, #1
 80068c2:	60a3      	str	r3, [r4, #8]
 80068c4:	bb39      	cbnz	r1, 8006916 <_puts_r+0x9e>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da38      	bge.n	800693c <_puts_r+0xc4>
 80068ca:	4622      	mov	r2, r4
 80068cc:	210a      	movs	r1, #10
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 f868 	bl	80069a4 <__swbuf_r>
 80068d4:	3001      	adds	r0, #1
 80068d6:	d011      	beq.n	80068fc <_puts_r+0x84>
 80068d8:	250a      	movs	r5, #10
 80068da:	e011      	b.n	8006900 <_puts_r+0x88>
 80068dc:	4b1b      	ldr	r3, [pc, #108]	; (800694c <_puts_r+0xd4>)
 80068de:	429c      	cmp	r4, r3
 80068e0:	d101      	bne.n	80068e6 <_puts_r+0x6e>
 80068e2:	68ac      	ldr	r4, [r5, #8]
 80068e4:	e7da      	b.n	800689c <_puts_r+0x24>
 80068e6:	4b1a      	ldr	r3, [pc, #104]	; (8006950 <_puts_r+0xd8>)
 80068e8:	429c      	cmp	r4, r3
 80068ea:	bf08      	it	eq
 80068ec:	68ec      	ldreq	r4, [r5, #12]
 80068ee:	e7d5      	b.n	800689c <_puts_r+0x24>
 80068f0:	4621      	mov	r1, r4
 80068f2:	4628      	mov	r0, r5
 80068f4:	f000 f8a8 	bl	8006a48 <__swsetup_r>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d0dd      	beq.n	80068b8 <_puts_r+0x40>
 80068fc:	f04f 35ff 	mov.w	r5, #4294967295
 8006900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006902:	07da      	lsls	r2, r3, #31
 8006904:	d405      	bmi.n	8006912 <_puts_r+0x9a>
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	059b      	lsls	r3, r3, #22
 800690a:	d402      	bmi.n	8006912 <_puts_r+0x9a>
 800690c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800690e:	f000 fac2 	bl	8006e96 <__retarget_lock_release_recursive>
 8006912:	4628      	mov	r0, r5
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	2b00      	cmp	r3, #0
 8006918:	da04      	bge.n	8006924 <_puts_r+0xac>
 800691a:	69a2      	ldr	r2, [r4, #24]
 800691c:	429a      	cmp	r2, r3
 800691e:	dc06      	bgt.n	800692e <_puts_r+0xb6>
 8006920:	290a      	cmp	r1, #10
 8006922:	d004      	beq.n	800692e <_puts_r+0xb6>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	7019      	strb	r1, [r3, #0]
 800692c:	e7c5      	b.n	80068ba <_puts_r+0x42>
 800692e:	4622      	mov	r2, r4
 8006930:	4628      	mov	r0, r5
 8006932:	f000 f837 	bl	80069a4 <__swbuf_r>
 8006936:	3001      	adds	r0, #1
 8006938:	d1bf      	bne.n	80068ba <_puts_r+0x42>
 800693a:	e7df      	b.n	80068fc <_puts_r+0x84>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	250a      	movs	r5, #10
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	6022      	str	r2, [r4, #0]
 8006944:	701d      	strb	r5, [r3, #0]
 8006946:	e7db      	b.n	8006900 <_puts_r+0x88>
 8006948:	08007288 	.word	0x08007288
 800694c:	080072a8 	.word	0x080072a8
 8006950:	08007268 	.word	0x08007268

08006954 <puts>:
 8006954:	4b02      	ldr	r3, [pc, #8]	; (8006960 <puts+0xc>)
 8006956:	4601      	mov	r1, r0
 8006958:	6818      	ldr	r0, [r3, #0]
 800695a:	f7ff bf8d 	b.w	8006878 <_puts_r>
 800695e:	bf00      	nop
 8006960:	2000000c 	.word	0x2000000c

08006964 <_sbrk_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4d06      	ldr	r5, [pc, #24]	; (8006980 <_sbrk_r+0x1c>)
 8006968:	2300      	movs	r3, #0
 800696a:	4604      	mov	r4, r0
 800696c:	4608      	mov	r0, r1
 800696e:	602b      	str	r3, [r5, #0]
 8006970:	f7fa fc40 	bl	80011f4 <_sbrk>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d102      	bne.n	800697e <_sbrk_r+0x1a>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	b103      	cbz	r3, 800697e <_sbrk_r+0x1a>
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	200002d0 	.word	0x200002d0

08006984 <strcat>:
 8006984:	b510      	push	{r4, lr}
 8006986:	4602      	mov	r2, r0
 8006988:	7814      	ldrb	r4, [r2, #0]
 800698a:	4613      	mov	r3, r2
 800698c:	3201      	adds	r2, #1
 800698e:	2c00      	cmp	r4, #0
 8006990:	d1fa      	bne.n	8006988 <strcat+0x4>
 8006992:	3b01      	subs	r3, #1
 8006994:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006998:	f803 2f01 	strb.w	r2, [r3, #1]!
 800699c:	2a00      	cmp	r2, #0
 800699e:	d1f9      	bne.n	8006994 <strcat+0x10>
 80069a0:	bd10      	pop	{r4, pc}
	...

080069a4 <__swbuf_r>:
 80069a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a6:	460e      	mov	r6, r1
 80069a8:	4614      	mov	r4, r2
 80069aa:	4605      	mov	r5, r0
 80069ac:	b118      	cbz	r0, 80069b6 <__swbuf_r+0x12>
 80069ae:	6983      	ldr	r3, [r0, #24]
 80069b0:	b90b      	cbnz	r3, 80069b6 <__swbuf_r+0x12>
 80069b2:	f000 f9d1 	bl	8006d58 <__sinit>
 80069b6:	4b21      	ldr	r3, [pc, #132]	; (8006a3c <__swbuf_r+0x98>)
 80069b8:	429c      	cmp	r4, r3
 80069ba:	d12b      	bne.n	8006a14 <__swbuf_r+0x70>
 80069bc:	686c      	ldr	r4, [r5, #4]
 80069be:	69a3      	ldr	r3, [r4, #24]
 80069c0:	60a3      	str	r3, [r4, #8]
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	071a      	lsls	r2, r3, #28
 80069c6:	d52f      	bpl.n	8006a28 <__swbuf_r+0x84>
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	b36b      	cbz	r3, 8006a28 <__swbuf_r+0x84>
 80069cc:	6923      	ldr	r3, [r4, #16]
 80069ce:	6820      	ldr	r0, [r4, #0]
 80069d0:	1ac0      	subs	r0, r0, r3
 80069d2:	6963      	ldr	r3, [r4, #20]
 80069d4:	b2f6      	uxtb	r6, r6
 80069d6:	4283      	cmp	r3, r0
 80069d8:	4637      	mov	r7, r6
 80069da:	dc04      	bgt.n	80069e6 <__swbuf_r+0x42>
 80069dc:	4621      	mov	r1, r4
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 f926 	bl	8006c30 <_fflush_r>
 80069e4:	bb30      	cbnz	r0, 8006a34 <__swbuf_r+0x90>
 80069e6:	68a3      	ldr	r3, [r4, #8]
 80069e8:	3b01      	subs	r3, #1
 80069ea:	60a3      	str	r3, [r4, #8]
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	6022      	str	r2, [r4, #0]
 80069f2:	701e      	strb	r6, [r3, #0]
 80069f4:	6963      	ldr	r3, [r4, #20]
 80069f6:	3001      	adds	r0, #1
 80069f8:	4283      	cmp	r3, r0
 80069fa:	d004      	beq.n	8006a06 <__swbuf_r+0x62>
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	07db      	lsls	r3, r3, #31
 8006a00:	d506      	bpl.n	8006a10 <__swbuf_r+0x6c>
 8006a02:	2e0a      	cmp	r6, #10
 8006a04:	d104      	bne.n	8006a10 <__swbuf_r+0x6c>
 8006a06:	4621      	mov	r1, r4
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f000 f911 	bl	8006c30 <_fflush_r>
 8006a0e:	b988      	cbnz	r0, 8006a34 <__swbuf_r+0x90>
 8006a10:	4638      	mov	r0, r7
 8006a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <__swbuf_r+0x9c>)
 8006a16:	429c      	cmp	r4, r3
 8006a18:	d101      	bne.n	8006a1e <__swbuf_r+0x7a>
 8006a1a:	68ac      	ldr	r4, [r5, #8]
 8006a1c:	e7cf      	b.n	80069be <__swbuf_r+0x1a>
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <__swbuf_r+0xa0>)
 8006a20:	429c      	cmp	r4, r3
 8006a22:	bf08      	it	eq
 8006a24:	68ec      	ldreq	r4, [r5, #12]
 8006a26:	e7ca      	b.n	80069be <__swbuf_r+0x1a>
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f000 f80c 	bl	8006a48 <__swsetup_r>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d0cb      	beq.n	80069cc <__swbuf_r+0x28>
 8006a34:	f04f 37ff 	mov.w	r7, #4294967295
 8006a38:	e7ea      	b.n	8006a10 <__swbuf_r+0x6c>
 8006a3a:	bf00      	nop
 8006a3c:	08007288 	.word	0x08007288
 8006a40:	080072a8 	.word	0x080072a8
 8006a44:	08007268 	.word	0x08007268

08006a48 <__swsetup_r>:
 8006a48:	4b32      	ldr	r3, [pc, #200]	; (8006b14 <__swsetup_r+0xcc>)
 8006a4a:	b570      	push	{r4, r5, r6, lr}
 8006a4c:	681d      	ldr	r5, [r3, #0]
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	b125      	cbz	r5, 8006a5e <__swsetup_r+0x16>
 8006a54:	69ab      	ldr	r3, [r5, #24]
 8006a56:	b913      	cbnz	r3, 8006a5e <__swsetup_r+0x16>
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f000 f97d 	bl	8006d58 <__sinit>
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <__swsetup_r+0xd0>)
 8006a60:	429c      	cmp	r4, r3
 8006a62:	d10f      	bne.n	8006a84 <__swsetup_r+0x3c>
 8006a64:	686c      	ldr	r4, [r5, #4]
 8006a66:	89a3      	ldrh	r3, [r4, #12]
 8006a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a6c:	0719      	lsls	r1, r3, #28
 8006a6e:	d42c      	bmi.n	8006aca <__swsetup_r+0x82>
 8006a70:	06dd      	lsls	r5, r3, #27
 8006a72:	d411      	bmi.n	8006a98 <__swsetup_r+0x50>
 8006a74:	2309      	movs	r3, #9
 8006a76:	6033      	str	r3, [r6, #0]
 8006a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a82:	e03e      	b.n	8006b02 <__swsetup_r+0xba>
 8006a84:	4b25      	ldr	r3, [pc, #148]	; (8006b1c <__swsetup_r+0xd4>)
 8006a86:	429c      	cmp	r4, r3
 8006a88:	d101      	bne.n	8006a8e <__swsetup_r+0x46>
 8006a8a:	68ac      	ldr	r4, [r5, #8]
 8006a8c:	e7eb      	b.n	8006a66 <__swsetup_r+0x1e>
 8006a8e:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <__swsetup_r+0xd8>)
 8006a90:	429c      	cmp	r4, r3
 8006a92:	bf08      	it	eq
 8006a94:	68ec      	ldreq	r4, [r5, #12]
 8006a96:	e7e6      	b.n	8006a66 <__swsetup_r+0x1e>
 8006a98:	0758      	lsls	r0, r3, #29
 8006a9a:	d512      	bpl.n	8006ac2 <__swsetup_r+0x7a>
 8006a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a9e:	b141      	cbz	r1, 8006ab2 <__swsetup_r+0x6a>
 8006aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aa4:	4299      	cmp	r1, r3
 8006aa6:	d002      	beq.n	8006aae <__swsetup_r+0x66>
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f7ff fe3b 	bl	8006724 <_free_r>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	2300      	movs	r3, #0
 8006abc:	6063      	str	r3, [r4, #4]
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	f043 0308 	orr.w	r3, r3, #8
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	b94b      	cbnz	r3, 8006ae2 <__swsetup_r+0x9a>
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad8:	d003      	beq.n	8006ae2 <__swsetup_r+0x9a>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4630      	mov	r0, r6
 8006ade:	f000 f9ff 	bl	8006ee0 <__smakebuf_r>
 8006ae2:	89a0      	ldrh	r0, [r4, #12]
 8006ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ae8:	f010 0301 	ands.w	r3, r0, #1
 8006aec:	d00a      	beq.n	8006b04 <__swsetup_r+0xbc>
 8006aee:	2300      	movs	r3, #0
 8006af0:	60a3      	str	r3, [r4, #8]
 8006af2:	6963      	ldr	r3, [r4, #20]
 8006af4:	425b      	negs	r3, r3
 8006af6:	61a3      	str	r3, [r4, #24]
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	b943      	cbnz	r3, 8006b0e <__swsetup_r+0xc6>
 8006afc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b00:	d1ba      	bne.n	8006a78 <__swsetup_r+0x30>
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	0781      	lsls	r1, r0, #30
 8006b06:	bf58      	it	pl
 8006b08:	6963      	ldrpl	r3, [r4, #20]
 8006b0a:	60a3      	str	r3, [r4, #8]
 8006b0c:	e7f4      	b.n	8006af8 <__swsetup_r+0xb0>
 8006b0e:	2000      	movs	r0, #0
 8006b10:	e7f7      	b.n	8006b02 <__swsetup_r+0xba>
 8006b12:	bf00      	nop
 8006b14:	2000000c 	.word	0x2000000c
 8006b18:	08007288 	.word	0x08007288
 8006b1c:	080072a8 	.word	0x080072a8
 8006b20:	08007268 	.word	0x08007268

08006b24 <__sflush_r>:
 8006b24:	898a      	ldrh	r2, [r1, #12]
 8006b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	0710      	lsls	r0, r2, #28
 8006b2e:	460c      	mov	r4, r1
 8006b30:	d458      	bmi.n	8006be4 <__sflush_r+0xc0>
 8006b32:	684b      	ldr	r3, [r1, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	dc05      	bgt.n	8006b44 <__sflush_r+0x20>
 8006b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	dc02      	bgt.n	8006b44 <__sflush_r+0x20>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b46:	2e00      	cmp	r6, #0
 8006b48:	d0f9      	beq.n	8006b3e <__sflush_r+0x1a>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b50:	682f      	ldr	r7, [r5, #0]
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	d032      	beq.n	8006bbc <__sflush_r+0x98>
 8006b56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	075a      	lsls	r2, r3, #29
 8006b5c:	d505      	bpl.n	8006b6a <__sflush_r+0x46>
 8006b5e:	6863      	ldr	r3, [r4, #4]
 8006b60:	1ac0      	subs	r0, r0, r3
 8006b62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b64:	b10b      	cbz	r3, 8006b6a <__sflush_r+0x46>
 8006b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b68:	1ac0      	subs	r0, r0, r3
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b70:	6a21      	ldr	r1, [r4, #32]
 8006b72:	4628      	mov	r0, r5
 8006b74:	47b0      	blx	r6
 8006b76:	1c43      	adds	r3, r0, #1
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	d106      	bne.n	8006b8a <__sflush_r+0x66>
 8006b7c:	6829      	ldr	r1, [r5, #0]
 8006b7e:	291d      	cmp	r1, #29
 8006b80:	d82c      	bhi.n	8006bdc <__sflush_r+0xb8>
 8006b82:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <__sflush_r+0x108>)
 8006b84:	40ca      	lsrs	r2, r1
 8006b86:	07d6      	lsls	r6, r2, #31
 8006b88:	d528      	bpl.n	8006bdc <__sflush_r+0xb8>
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	6062      	str	r2, [r4, #4]
 8006b8e:	04d9      	lsls	r1, r3, #19
 8006b90:	6922      	ldr	r2, [r4, #16]
 8006b92:	6022      	str	r2, [r4, #0]
 8006b94:	d504      	bpl.n	8006ba0 <__sflush_r+0x7c>
 8006b96:	1c42      	adds	r2, r0, #1
 8006b98:	d101      	bne.n	8006b9e <__sflush_r+0x7a>
 8006b9a:	682b      	ldr	r3, [r5, #0]
 8006b9c:	b903      	cbnz	r3, 8006ba0 <__sflush_r+0x7c>
 8006b9e:	6560      	str	r0, [r4, #84]	; 0x54
 8006ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ba2:	602f      	str	r7, [r5, #0]
 8006ba4:	2900      	cmp	r1, #0
 8006ba6:	d0ca      	beq.n	8006b3e <__sflush_r+0x1a>
 8006ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bac:	4299      	cmp	r1, r3
 8006bae:	d002      	beq.n	8006bb6 <__sflush_r+0x92>
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f7ff fdb7 	bl	8006724 <_free_r>
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8006bba:	e7c1      	b.n	8006b40 <__sflush_r+0x1c>
 8006bbc:	6a21      	ldr	r1, [r4, #32]
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	47b0      	blx	r6
 8006bc4:	1c41      	adds	r1, r0, #1
 8006bc6:	d1c7      	bne.n	8006b58 <__sflush_r+0x34>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0c4      	beq.n	8006b58 <__sflush_r+0x34>
 8006bce:	2b1d      	cmp	r3, #29
 8006bd0:	d001      	beq.n	8006bd6 <__sflush_r+0xb2>
 8006bd2:	2b16      	cmp	r3, #22
 8006bd4:	d101      	bne.n	8006bda <__sflush_r+0xb6>
 8006bd6:	602f      	str	r7, [r5, #0]
 8006bd8:	e7b1      	b.n	8006b3e <__sflush_r+0x1a>
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be0:	81a3      	strh	r3, [r4, #12]
 8006be2:	e7ad      	b.n	8006b40 <__sflush_r+0x1c>
 8006be4:	690f      	ldr	r7, [r1, #16]
 8006be6:	2f00      	cmp	r7, #0
 8006be8:	d0a9      	beq.n	8006b3e <__sflush_r+0x1a>
 8006bea:	0793      	lsls	r3, r2, #30
 8006bec:	680e      	ldr	r6, [r1, #0]
 8006bee:	bf08      	it	eq
 8006bf0:	694b      	ldreq	r3, [r1, #20]
 8006bf2:	600f      	str	r7, [r1, #0]
 8006bf4:	bf18      	it	ne
 8006bf6:	2300      	movne	r3, #0
 8006bf8:	eba6 0807 	sub.w	r8, r6, r7
 8006bfc:	608b      	str	r3, [r1, #8]
 8006bfe:	f1b8 0f00 	cmp.w	r8, #0
 8006c02:	dd9c      	ble.n	8006b3e <__sflush_r+0x1a>
 8006c04:	6a21      	ldr	r1, [r4, #32]
 8006c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c08:	4643      	mov	r3, r8
 8006c0a:	463a      	mov	r2, r7
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	47b0      	blx	r6
 8006c10:	2800      	cmp	r0, #0
 8006c12:	dc06      	bgt.n	8006c22 <__sflush_r+0xfe>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c1a:	81a3      	strh	r3, [r4, #12]
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	e78e      	b.n	8006b40 <__sflush_r+0x1c>
 8006c22:	4407      	add	r7, r0
 8006c24:	eba8 0800 	sub.w	r8, r8, r0
 8006c28:	e7e9      	b.n	8006bfe <__sflush_r+0xda>
 8006c2a:	bf00      	nop
 8006c2c:	20400001 	.word	0x20400001

08006c30 <_fflush_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	690b      	ldr	r3, [r1, #16]
 8006c34:	4605      	mov	r5, r0
 8006c36:	460c      	mov	r4, r1
 8006c38:	b913      	cbnz	r3, 8006c40 <_fflush_r+0x10>
 8006c3a:	2500      	movs	r5, #0
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	bd38      	pop	{r3, r4, r5, pc}
 8006c40:	b118      	cbz	r0, 8006c4a <_fflush_r+0x1a>
 8006c42:	6983      	ldr	r3, [r0, #24]
 8006c44:	b90b      	cbnz	r3, 8006c4a <_fflush_r+0x1a>
 8006c46:	f000 f887 	bl	8006d58 <__sinit>
 8006c4a:	4b14      	ldr	r3, [pc, #80]	; (8006c9c <_fflush_r+0x6c>)
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	d11b      	bne.n	8006c88 <_fflush_r+0x58>
 8006c50:	686c      	ldr	r4, [r5, #4]
 8006c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0ef      	beq.n	8006c3a <_fflush_r+0xa>
 8006c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c5c:	07d0      	lsls	r0, r2, #31
 8006c5e:	d404      	bmi.n	8006c6a <_fflush_r+0x3a>
 8006c60:	0599      	lsls	r1, r3, #22
 8006c62:	d402      	bmi.n	8006c6a <_fflush_r+0x3a>
 8006c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c66:	f000 f915 	bl	8006e94 <__retarget_lock_acquire_recursive>
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	f7ff ff59 	bl	8006b24 <__sflush_r>
 8006c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c74:	07da      	lsls	r2, r3, #31
 8006c76:	4605      	mov	r5, r0
 8006c78:	d4e0      	bmi.n	8006c3c <_fflush_r+0xc>
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	059b      	lsls	r3, r3, #22
 8006c7e:	d4dd      	bmi.n	8006c3c <_fflush_r+0xc>
 8006c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c82:	f000 f908 	bl	8006e96 <__retarget_lock_release_recursive>
 8006c86:	e7d9      	b.n	8006c3c <_fflush_r+0xc>
 8006c88:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <_fflush_r+0x70>)
 8006c8a:	429c      	cmp	r4, r3
 8006c8c:	d101      	bne.n	8006c92 <_fflush_r+0x62>
 8006c8e:	68ac      	ldr	r4, [r5, #8]
 8006c90:	e7df      	b.n	8006c52 <_fflush_r+0x22>
 8006c92:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <_fflush_r+0x74>)
 8006c94:	429c      	cmp	r4, r3
 8006c96:	bf08      	it	eq
 8006c98:	68ec      	ldreq	r4, [r5, #12]
 8006c9a:	e7da      	b.n	8006c52 <_fflush_r+0x22>
 8006c9c:	08007288 	.word	0x08007288
 8006ca0:	080072a8 	.word	0x080072a8
 8006ca4:	08007268 	.word	0x08007268

08006ca8 <std>:
 8006ca8:	2300      	movs	r3, #0
 8006caa:	b510      	push	{r4, lr}
 8006cac:	4604      	mov	r4, r0
 8006cae:	e9c0 3300 	strd	r3, r3, [r0]
 8006cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cb6:	6083      	str	r3, [r0, #8]
 8006cb8:	8181      	strh	r1, [r0, #12]
 8006cba:	6643      	str	r3, [r0, #100]	; 0x64
 8006cbc:	81c2      	strh	r2, [r0, #14]
 8006cbe:	6183      	str	r3, [r0, #24]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	2208      	movs	r2, #8
 8006cc4:	305c      	adds	r0, #92	; 0x5c
 8006cc6:	f7ff fd25 	bl	8006714 <memset>
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <std+0x38>)
 8006ccc:	6263      	str	r3, [r4, #36]	; 0x24
 8006cce:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <std+0x3c>)
 8006cd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cd2:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <std+0x40>)
 8006cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cd6:	4b05      	ldr	r3, [pc, #20]	; (8006cec <std+0x44>)
 8006cd8:	6224      	str	r4, [r4, #32]
 8006cda:	6323      	str	r3, [r4, #48]	; 0x30
 8006cdc:	bd10      	pop	{r4, pc}
 8006cde:	bf00      	nop
 8006ce0:	08006f79 	.word	0x08006f79
 8006ce4:	08006f9b 	.word	0x08006f9b
 8006ce8:	08006fd3 	.word	0x08006fd3
 8006cec:	08006ff7 	.word	0x08006ff7

08006cf0 <_cleanup_r>:
 8006cf0:	4901      	ldr	r1, [pc, #4]	; (8006cf8 <_cleanup_r+0x8>)
 8006cf2:	f000 b8af 	b.w	8006e54 <_fwalk_reent>
 8006cf6:	bf00      	nop
 8006cf8:	08006c31 	.word	0x08006c31

08006cfc <__sfmoreglue>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	1e4a      	subs	r2, r1, #1
 8006d00:	2568      	movs	r5, #104	; 0x68
 8006d02:	4355      	muls	r5, r2
 8006d04:	460e      	mov	r6, r1
 8006d06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d0a:	f7ff fd5b 	bl	80067c4 <_malloc_r>
 8006d0e:	4604      	mov	r4, r0
 8006d10:	b140      	cbz	r0, 8006d24 <__sfmoreglue+0x28>
 8006d12:	2100      	movs	r1, #0
 8006d14:	e9c0 1600 	strd	r1, r6, [r0]
 8006d18:	300c      	adds	r0, #12
 8006d1a:	60a0      	str	r0, [r4, #8]
 8006d1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d20:	f7ff fcf8 	bl	8006714 <memset>
 8006d24:	4620      	mov	r0, r4
 8006d26:	bd70      	pop	{r4, r5, r6, pc}

08006d28 <__sfp_lock_acquire>:
 8006d28:	4801      	ldr	r0, [pc, #4]	; (8006d30 <__sfp_lock_acquire+0x8>)
 8006d2a:	f000 b8b3 	b.w	8006e94 <__retarget_lock_acquire_recursive>
 8006d2e:	bf00      	nop
 8006d30:	200002cc 	.word	0x200002cc

08006d34 <__sfp_lock_release>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__sfp_lock_release+0x8>)
 8006d36:	f000 b8ae 	b.w	8006e96 <__retarget_lock_release_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	200002cc 	.word	0x200002cc

08006d40 <__sinit_lock_acquire>:
 8006d40:	4801      	ldr	r0, [pc, #4]	; (8006d48 <__sinit_lock_acquire+0x8>)
 8006d42:	f000 b8a7 	b.w	8006e94 <__retarget_lock_acquire_recursive>
 8006d46:	bf00      	nop
 8006d48:	200002c7 	.word	0x200002c7

08006d4c <__sinit_lock_release>:
 8006d4c:	4801      	ldr	r0, [pc, #4]	; (8006d54 <__sinit_lock_release+0x8>)
 8006d4e:	f000 b8a2 	b.w	8006e96 <__retarget_lock_release_recursive>
 8006d52:	bf00      	nop
 8006d54:	200002c7 	.word	0x200002c7

08006d58 <__sinit>:
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	f7ff fff0 	bl	8006d40 <__sinit_lock_acquire>
 8006d60:	69a3      	ldr	r3, [r4, #24]
 8006d62:	b11b      	cbz	r3, 8006d6c <__sinit+0x14>
 8006d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d68:	f7ff bff0 	b.w	8006d4c <__sinit_lock_release>
 8006d6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d70:	6523      	str	r3, [r4, #80]	; 0x50
 8006d72:	4b13      	ldr	r3, [pc, #76]	; (8006dc0 <__sinit+0x68>)
 8006d74:	4a13      	ldr	r2, [pc, #76]	; (8006dc4 <__sinit+0x6c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d7a:	42a3      	cmp	r3, r4
 8006d7c:	bf04      	itt	eq
 8006d7e:	2301      	moveq	r3, #1
 8006d80:	61a3      	streq	r3, [r4, #24]
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 f820 	bl	8006dc8 <__sfp>
 8006d88:	6060      	str	r0, [r4, #4]
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 f81c 	bl	8006dc8 <__sfp>
 8006d90:	60a0      	str	r0, [r4, #8]
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 f818 	bl	8006dc8 <__sfp>
 8006d98:	2200      	movs	r2, #0
 8006d9a:	60e0      	str	r0, [r4, #12]
 8006d9c:	2104      	movs	r1, #4
 8006d9e:	6860      	ldr	r0, [r4, #4]
 8006da0:	f7ff ff82 	bl	8006ca8 <std>
 8006da4:	68a0      	ldr	r0, [r4, #8]
 8006da6:	2201      	movs	r2, #1
 8006da8:	2109      	movs	r1, #9
 8006daa:	f7ff ff7d 	bl	8006ca8 <std>
 8006dae:	68e0      	ldr	r0, [r4, #12]
 8006db0:	2202      	movs	r2, #2
 8006db2:	2112      	movs	r1, #18
 8006db4:	f7ff ff78 	bl	8006ca8 <std>
 8006db8:	2301      	movs	r3, #1
 8006dba:	61a3      	str	r3, [r4, #24]
 8006dbc:	e7d2      	b.n	8006d64 <__sinit+0xc>
 8006dbe:	bf00      	nop
 8006dc0:	08007264 	.word	0x08007264
 8006dc4:	08006cf1 	.word	0x08006cf1

08006dc8 <__sfp>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	4607      	mov	r7, r0
 8006dcc:	f7ff ffac 	bl	8006d28 <__sfp_lock_acquire>
 8006dd0:	4b1e      	ldr	r3, [pc, #120]	; (8006e4c <__sfp+0x84>)
 8006dd2:	681e      	ldr	r6, [r3, #0]
 8006dd4:	69b3      	ldr	r3, [r6, #24]
 8006dd6:	b913      	cbnz	r3, 8006dde <__sfp+0x16>
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7ff ffbd 	bl	8006d58 <__sinit>
 8006dde:	3648      	adds	r6, #72	; 0x48
 8006de0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	d503      	bpl.n	8006df0 <__sfp+0x28>
 8006de8:	6833      	ldr	r3, [r6, #0]
 8006dea:	b30b      	cbz	r3, 8006e30 <__sfp+0x68>
 8006dec:	6836      	ldr	r6, [r6, #0]
 8006dee:	e7f7      	b.n	8006de0 <__sfp+0x18>
 8006df0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006df4:	b9d5      	cbnz	r5, 8006e2c <__sfp+0x64>
 8006df6:	4b16      	ldr	r3, [pc, #88]	; (8006e50 <__sfp+0x88>)
 8006df8:	60e3      	str	r3, [r4, #12]
 8006dfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dfe:	6665      	str	r5, [r4, #100]	; 0x64
 8006e00:	f000 f847 	bl	8006e92 <__retarget_lock_init_recursive>
 8006e04:	f7ff ff96 	bl	8006d34 <__sfp_lock_release>
 8006e08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e10:	6025      	str	r5, [r4, #0]
 8006e12:	61a5      	str	r5, [r4, #24]
 8006e14:	2208      	movs	r2, #8
 8006e16:	4629      	mov	r1, r5
 8006e18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e1c:	f7ff fc7a 	bl	8006714 <memset>
 8006e20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e28:	4620      	mov	r0, r4
 8006e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e2c:	3468      	adds	r4, #104	; 0x68
 8006e2e:	e7d9      	b.n	8006de4 <__sfp+0x1c>
 8006e30:	2104      	movs	r1, #4
 8006e32:	4638      	mov	r0, r7
 8006e34:	f7ff ff62 	bl	8006cfc <__sfmoreglue>
 8006e38:	4604      	mov	r4, r0
 8006e3a:	6030      	str	r0, [r6, #0]
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d1d5      	bne.n	8006dec <__sfp+0x24>
 8006e40:	f7ff ff78 	bl	8006d34 <__sfp_lock_release>
 8006e44:	230c      	movs	r3, #12
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	e7ee      	b.n	8006e28 <__sfp+0x60>
 8006e4a:	bf00      	nop
 8006e4c:	08007264 	.word	0x08007264
 8006e50:	ffff0001 	.word	0xffff0001

08006e54 <_fwalk_reent>:
 8006e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e58:	4606      	mov	r6, r0
 8006e5a:	4688      	mov	r8, r1
 8006e5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e60:	2700      	movs	r7, #0
 8006e62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e66:	f1b9 0901 	subs.w	r9, r9, #1
 8006e6a:	d505      	bpl.n	8006e78 <_fwalk_reent+0x24>
 8006e6c:	6824      	ldr	r4, [r4, #0]
 8006e6e:	2c00      	cmp	r4, #0
 8006e70:	d1f7      	bne.n	8006e62 <_fwalk_reent+0xe>
 8006e72:	4638      	mov	r0, r7
 8006e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e78:	89ab      	ldrh	r3, [r5, #12]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d907      	bls.n	8006e8e <_fwalk_reent+0x3a>
 8006e7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e82:	3301      	adds	r3, #1
 8006e84:	d003      	beq.n	8006e8e <_fwalk_reent+0x3a>
 8006e86:	4629      	mov	r1, r5
 8006e88:	4630      	mov	r0, r6
 8006e8a:	47c0      	blx	r8
 8006e8c:	4307      	orrs	r7, r0
 8006e8e:	3568      	adds	r5, #104	; 0x68
 8006e90:	e7e9      	b.n	8006e66 <_fwalk_reent+0x12>

08006e92 <__retarget_lock_init_recursive>:
 8006e92:	4770      	bx	lr

08006e94 <__retarget_lock_acquire_recursive>:
 8006e94:	4770      	bx	lr

08006e96 <__retarget_lock_release_recursive>:
 8006e96:	4770      	bx	lr

08006e98 <__swhatbuf_r>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	460e      	mov	r6, r1
 8006e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	b096      	sub	sp, #88	; 0x58
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	461d      	mov	r5, r3
 8006ea8:	da07      	bge.n	8006eba <__swhatbuf_r+0x22>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	602b      	str	r3, [r5, #0]
 8006eae:	89b3      	ldrh	r3, [r6, #12]
 8006eb0:	061a      	lsls	r2, r3, #24
 8006eb2:	d410      	bmi.n	8006ed6 <__swhatbuf_r+0x3e>
 8006eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb8:	e00e      	b.n	8006ed8 <__swhatbuf_r+0x40>
 8006eba:	466a      	mov	r2, sp
 8006ebc:	f000 f8c2 	bl	8007044 <_fstat_r>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	dbf2      	blt.n	8006eaa <__swhatbuf_r+0x12>
 8006ec4:	9a01      	ldr	r2, [sp, #4]
 8006ec6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006eca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ece:	425a      	negs	r2, r3
 8006ed0:	415a      	adcs	r2, r3
 8006ed2:	602a      	str	r2, [r5, #0]
 8006ed4:	e7ee      	b.n	8006eb4 <__swhatbuf_r+0x1c>
 8006ed6:	2340      	movs	r3, #64	; 0x40
 8006ed8:	2000      	movs	r0, #0
 8006eda:	6023      	str	r3, [r4, #0]
 8006edc:	b016      	add	sp, #88	; 0x58
 8006ede:	bd70      	pop	{r4, r5, r6, pc}

08006ee0 <__smakebuf_r>:
 8006ee0:	898b      	ldrh	r3, [r1, #12]
 8006ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ee4:	079d      	lsls	r5, r3, #30
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	460c      	mov	r4, r1
 8006eea:	d507      	bpl.n	8006efc <__smakebuf_r+0x1c>
 8006eec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	6163      	str	r3, [r4, #20]
 8006ef8:	b002      	add	sp, #8
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	ab01      	add	r3, sp, #4
 8006efe:	466a      	mov	r2, sp
 8006f00:	f7ff ffca 	bl	8006e98 <__swhatbuf_r>
 8006f04:	9900      	ldr	r1, [sp, #0]
 8006f06:	4605      	mov	r5, r0
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff fc5b 	bl	80067c4 <_malloc_r>
 8006f0e:	b948      	cbnz	r0, 8006f24 <__smakebuf_r+0x44>
 8006f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f14:	059a      	lsls	r2, r3, #22
 8006f16:	d4ef      	bmi.n	8006ef8 <__smakebuf_r+0x18>
 8006f18:	f023 0303 	bic.w	r3, r3, #3
 8006f1c:	f043 0302 	orr.w	r3, r3, #2
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	e7e3      	b.n	8006eec <__smakebuf_r+0xc>
 8006f24:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <__smakebuf_r+0x7c>)
 8006f26:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	6020      	str	r0, [r4, #0]
 8006f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f30:	81a3      	strh	r3, [r4, #12]
 8006f32:	9b00      	ldr	r3, [sp, #0]
 8006f34:	6163      	str	r3, [r4, #20]
 8006f36:	9b01      	ldr	r3, [sp, #4]
 8006f38:	6120      	str	r0, [r4, #16]
 8006f3a:	b15b      	cbz	r3, 8006f54 <__smakebuf_r+0x74>
 8006f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f40:	4630      	mov	r0, r6
 8006f42:	f000 f891 	bl	8007068 <_isatty_r>
 8006f46:	b128      	cbz	r0, 8006f54 <__smakebuf_r+0x74>
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	f043 0301 	orr.w	r3, r3, #1
 8006f52:	81a3      	strh	r3, [r4, #12]
 8006f54:	89a0      	ldrh	r0, [r4, #12]
 8006f56:	4305      	orrs	r5, r0
 8006f58:	81a5      	strh	r5, [r4, #12]
 8006f5a:	e7cd      	b.n	8006ef8 <__smakebuf_r+0x18>
 8006f5c:	08006cf1 	.word	0x08006cf1

08006f60 <__malloc_lock>:
 8006f60:	4801      	ldr	r0, [pc, #4]	; (8006f68 <__malloc_lock+0x8>)
 8006f62:	f7ff bf97 	b.w	8006e94 <__retarget_lock_acquire_recursive>
 8006f66:	bf00      	nop
 8006f68:	200002c8 	.word	0x200002c8

08006f6c <__malloc_unlock>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	; (8006f74 <__malloc_unlock+0x8>)
 8006f6e:	f7ff bf92 	b.w	8006e96 <__retarget_lock_release_recursive>
 8006f72:	bf00      	nop
 8006f74:	200002c8 	.word	0x200002c8

08006f78 <__sread>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f80:	f000 f894 	bl	80070ac <_read_r>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	bfab      	itete	ge
 8006f88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f8c:	181b      	addge	r3, r3, r0
 8006f8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f92:	bfac      	ite	ge
 8006f94:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f96:	81a3      	strhlt	r3, [r4, #12]
 8006f98:	bd10      	pop	{r4, pc}

08006f9a <__swrite>:
 8006f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9e:	461f      	mov	r7, r3
 8006fa0:	898b      	ldrh	r3, [r1, #12]
 8006fa2:	05db      	lsls	r3, r3, #23
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	4616      	mov	r6, r2
 8006faa:	d505      	bpl.n	8006fb8 <__swrite+0x1e>
 8006fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f000 f868 	bl	8007088 <_lseek_r>
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fc2:	81a3      	strh	r3, [r4, #12]
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	4628      	mov	r0, r5
 8006fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fce:	f000 b817 	b.w	8007000 <_write_r>

08006fd2 <__sseek>:
 8006fd2:	b510      	push	{r4, lr}
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fda:	f000 f855 	bl	8007088 <_lseek_r>
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	bf15      	itete	ne
 8006fe4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fee:	81a3      	strheq	r3, [r4, #12]
 8006ff0:	bf18      	it	ne
 8006ff2:	81a3      	strhne	r3, [r4, #12]
 8006ff4:	bd10      	pop	{r4, pc}

08006ff6 <__sclose>:
 8006ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffa:	f000 b813 	b.w	8007024 <_close_r>
	...

08007000 <_write_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d07      	ldr	r5, [pc, #28]	; (8007020 <_write_r+0x20>)
 8007004:	4604      	mov	r4, r0
 8007006:	4608      	mov	r0, r1
 8007008:	4611      	mov	r1, r2
 800700a:	2200      	movs	r2, #0
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f7fa f89f 	bl	8001152 <_write>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_write_r+0x1e>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_write_r+0x1e>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	200002d0 	.word	0x200002d0

08007024 <_close_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d06      	ldr	r5, [pc, #24]	; (8007040 <_close_r+0x1c>)
 8007028:	2300      	movs	r3, #0
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	602b      	str	r3, [r5, #0]
 8007030:	f7fa f8ab 	bl	800118a <_close>
 8007034:	1c43      	adds	r3, r0, #1
 8007036:	d102      	bne.n	800703e <_close_r+0x1a>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	b103      	cbz	r3, 800703e <_close_r+0x1a>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	bd38      	pop	{r3, r4, r5, pc}
 8007040:	200002d0 	.word	0x200002d0

08007044 <_fstat_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d07      	ldr	r5, [pc, #28]	; (8007064 <_fstat_r+0x20>)
 8007048:	2300      	movs	r3, #0
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	4611      	mov	r1, r2
 8007050:	602b      	str	r3, [r5, #0]
 8007052:	f7fa f8a6 	bl	80011a2 <_fstat>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	d102      	bne.n	8007060 <_fstat_r+0x1c>
 800705a:	682b      	ldr	r3, [r5, #0]
 800705c:	b103      	cbz	r3, 8007060 <_fstat_r+0x1c>
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	bd38      	pop	{r3, r4, r5, pc}
 8007062:	bf00      	nop
 8007064:	200002d0 	.word	0x200002d0

08007068 <_isatty_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d06      	ldr	r5, [pc, #24]	; (8007084 <_isatty_r+0x1c>)
 800706c:	2300      	movs	r3, #0
 800706e:	4604      	mov	r4, r0
 8007070:	4608      	mov	r0, r1
 8007072:	602b      	str	r3, [r5, #0]
 8007074:	f7fa f8a5 	bl	80011c2 <_isatty>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_isatty_r+0x1a>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_isatty_r+0x1a>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	200002d0 	.word	0x200002d0

08007088 <_lseek_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d07      	ldr	r5, [pc, #28]	; (80070a8 <_lseek_r+0x20>)
 800708c:	4604      	mov	r4, r0
 800708e:	4608      	mov	r0, r1
 8007090:	4611      	mov	r1, r2
 8007092:	2200      	movs	r2, #0
 8007094:	602a      	str	r2, [r5, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	f7fa f89e 	bl	80011d8 <_lseek>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_lseek_r+0x1e>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_lseek_r+0x1e>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	200002d0 	.word	0x200002d0

080070ac <_read_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4d07      	ldr	r5, [pc, #28]	; (80070cc <_read_r+0x20>)
 80070b0:	4604      	mov	r4, r0
 80070b2:	4608      	mov	r0, r1
 80070b4:	4611      	mov	r1, r2
 80070b6:	2200      	movs	r2, #0
 80070b8:	602a      	str	r2, [r5, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f7fa f82c 	bl	8001118 <_read>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d102      	bne.n	80070ca <_read_r+0x1e>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	b103      	cbz	r3, 80070ca <_read_r+0x1e>
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	200002d0 	.word	0x200002d0

080070d0 <_init>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	bf00      	nop
 80070d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d6:	bc08      	pop	{r3}
 80070d8:	469e      	mov	lr, r3
 80070da:	4770      	bx	lr

080070dc <_fini>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	bf00      	nop
 80070e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e2:	bc08      	pop	{r3}
 80070e4:	469e      	mov	lr, r3
 80070e6:	4770      	bx	lr
