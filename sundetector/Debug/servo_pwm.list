
servo_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08007934  08007934  00017934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a40  08007a40  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a48  08007a48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000070  08007ac0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08007ac0  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001713f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a97  00000000  00000000  000371df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00039c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0003b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f6a  00000000  00000000  0003c300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cdd  00000000  00000000  0006626a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108b11  00000000  00000000  0007af47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183a58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c5c  00000000  00000000  00183aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800791c 	.word	0x0800791c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800791c 	.word	0x0800791c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART2 and Loop until the end of transmission */
  if (ch == '\n')
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b0a      	cmp	r3, #10
 8000574:	d106      	bne.n	8000584 <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 8000576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057a:	2201      	movs	r2, #1
 800057c:	4907      	ldr	r1, [pc, #28]	; (800059c <__io_putchar+0x34>)
 800057e:	4808      	ldr	r0, [pc, #32]	; (80005a0 <__io_putchar+0x38>)
 8000580:	f005 fb34 	bl	8005bec <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800058a:	2201      	movs	r2, #1
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <__io_putchar+0x38>)
 800058e:	f005 fb2d 	bl	8005bec <HAL_UART_Transmit>

  return ch;
 8000592:	687b      	ldr	r3, [r7, #4]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	08007934 	.word	0x08007934
 80005a0:	20000198 	.word	0x20000198

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fd54 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f852 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fa1c 	bl	80009ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f9cc 	bl	8000950 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80005b8:	f000 f944 	bl	8000844 <MX_TIM4_Init>
  MX_DMA_Init();
 80005bc:	f000 f9f8 	bl	80009b0 <MX_DMA_Init>
  MX_ADC1_Init();
 80005c0:	f000 f89a 	bl	80006f8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005c4:	2100      	movs	r1, #0
 80005c6:	481e      	ldr	r0, [pc, #120]	; (8000640 <main+0x9c>)
 80005c8:	f004 f9be 	bl	8004948 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005cc:	2104      	movs	r1, #4
 80005ce:	481c      	ldr	r0, [pc, #112]	; (8000640 <main+0x9c>)
 80005d0:	f004 f9ba 	bl	8004948 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  if (HAL_ADCEx_Calibration_Start (&hadc1,10) != HAL_OK)
 80005d4:	210a      	movs	r1, #10
 80005d6:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xa0>)
 80005d8:	f001 ff98 	bl	800250c <HAL_ADCEx_Calibration_Start>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <main+0x42>
    {
      Error_Handler ();
 80005e2:	f000 fa6b 	bl	8000abc <Error_Handler>
    }

  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&uwADCxConvertedValue, 4)!=HAL_OK)
 80005e6:	2204      	movs	r2, #4
 80005e8:	4917      	ldr	r1, [pc, #92]	; (8000648 <main+0xa4>)
 80005ea:	4816      	ldr	r0, [pc, #88]	; (8000644 <main+0xa0>)
 80005ec:	f001 f924 	bl	8001838 <HAL_ADC_Start_DMA>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <main+0x56>
	   	{
	  	  Error_Handler ();
 80005f6:	f000 fa61 	bl	8000abc <Error_Handler>
	   	}
  while (1)
  {

		 printf ("CDS1=%4d, CDS2=%4d ", uwADCxConvertedValue[0],uwADCxConvertedValue[1]);
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <main+0xa4>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	4619      	mov	r1, r3
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <main+0xa4>)
 8000604:	885b      	ldrh	r3, [r3, #2]
 8000606:	b29b      	uxth	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0xa8>)
 800060c:	f006 fa30 	bl	8006a70 <iprintf>
		 printf ("CDS3=%4d, CDS4=%4d\n", uwADCxConvertedValue[2],uwADCxConvertedValue[3]);
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <main+0xa4>)
 8000612:	889b      	ldrh	r3, [r3, #4]
 8000614:	b29b      	uxth	r3, r3
 8000616:	4619      	mov	r1, r3
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <main+0xa4>)
 800061a:	88db      	ldrh	r3, [r3, #6]
 800061c:	b29b      	uxth	r3, r3
 800061e:	461a      	mov	r2, r3
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <main+0xac>)
 8000622:	f006 fa25 	bl	8006a70 <iprintf>
		 HAL_Delay (500);
 8000626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800062a:	f000 fd8f 	bl	800114c <HAL_Delay>
	     //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000); // position 0°
	     HAL_Delay(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000632:	f000 fd8b 	bl	800114c <HAL_Delay>
	     //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 2750); // position 0°
	     HAL_Delay(1000);
 8000636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063a:	f000 fd87 	bl	800114c <HAL_Delay>
		 printf ("CDS1=%4d, CDS2=%4d ", uwADCxConvertedValue[0],uwADCxConvertedValue[1]);
 800063e:	e7dc      	b.n	80005fa <main+0x56>
 8000640:	200000a0 	.word	0x200000a0
 8000644:	200000ec 	.word	0x200000ec
 8000648:	20000098 	.word	0x20000098
 800064c:	08007938 	.word	0x08007938
 8000650:	0800794c 	.word	0x0800794c

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2244      	movs	r2, #68	; 0x44
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 f9fc 	bl	8006a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067a:	f002 fdaf 	bl	80031dc <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000684:	f000 fa1a 	bl	8000abc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2310      	movs	r3, #16
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a2:	2308      	movs	r3, #8
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fde6 	bl	8003288 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006c2:	f000 f9fb 	bl	8000abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	2101      	movs	r1, #1
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 f9b8 	bl	8003a54 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 f9e7 	bl	8000abc <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3758      	adds	r7, #88	; 0x58
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
 8000718:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800071a:	4b44      	ldr	r3, [pc, #272]	; (800082c <MX_ADC1_Init+0x134>)
 800071c:	4a44      	ldr	r2, [pc, #272]	; (8000830 <MX_ADC1_Init+0x138>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000720:	4b42      	ldr	r3, [pc, #264]	; (800082c <MX_ADC1_Init+0x134>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000726:	4b41      	ldr	r3, [pc, #260]	; (800082c <MX_ADC1_Init+0x134>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072c:	4b3f      	ldr	r3, [pc, #252]	; (800082c <MX_ADC1_Init+0x134>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000732:	4b3e      	ldr	r3, [pc, #248]	; (800082c <MX_ADC1_Init+0x134>)
 8000734:	2201      	movs	r2, #1
 8000736:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000738:	4b3c      	ldr	r3, [pc, #240]	; (800082c <MX_ADC1_Init+0x134>)
 800073a:	2204      	movs	r2, #4
 800073c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800073e:	4b3b      	ldr	r3, [pc, #236]	; (800082c <MX_ADC1_Init+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000744:	4b39      	ldr	r3, [pc, #228]	; (800082c <MX_ADC1_Init+0x134>)
 8000746:	2201      	movs	r2, #1
 8000748:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800074a:	4b38      	ldr	r3, [pc, #224]	; (800082c <MX_ADC1_Init+0x134>)
 800074c:	2204      	movs	r2, #4
 800074e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000750:	4b36      	ldr	r3, [pc, #216]	; (800082c <MX_ADC1_Init+0x134>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000758:	4b34      	ldr	r3, [pc, #208]	; (800082c <MX_ADC1_Init+0x134>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075e:	4b33      	ldr	r3, [pc, #204]	; (800082c <MX_ADC1_Init+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000764:	4b31      	ldr	r3, [pc, #196]	; (800082c <MX_ADC1_Init+0x134>)
 8000766:	2201      	movs	r2, #1
 8000768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076c:	4b2f      	ldr	r3, [pc, #188]	; (800082c <MX_ADC1_Init+0x134>)
 800076e:	2200      	movs	r2, #0
 8000770:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <MX_ADC1_Init+0x134>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077a:	482c      	ldr	r0, [pc, #176]	; (800082c <MX_ADC1_Init+0x134>)
 800077c:	f000 ff06 	bl	800158c <HAL_ADC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000786:	f000 f999 	bl	8000abc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	4825      	ldr	r0, [pc, #148]	; (800082c <MX_ADC1_Init+0x134>)
 8000796:	f001 ff19 	bl	80025cc <HAL_ADCEx_MultiModeConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007a0:	f000 f98c 	bl	8000abc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <MX_ADC1_Init+0x13c>)
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a8:	2306      	movs	r3, #6
 80007aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80007ac:	2305      	movs	r3, #5
 80007ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b0:	237f      	movs	r3, #127	; 0x7f
 80007b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b4:	2304      	movs	r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	481a      	ldr	r0, [pc, #104]	; (800082c <MX_ADC1_Init+0x134>)
 80007c2:	f001 f90b 	bl	80019dc <HAL_ADC_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007cc:	f000 f976 	bl	8000abc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_ADC1_Init+0x140>)
 80007d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007d4:	230c      	movs	r3, #12
 80007d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <MX_ADC1_Init+0x134>)
 80007de:	f001 f8fd 	bl	80019dc <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80007e8:	f000 f968 	bl	8000abc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_ADC1_Init+0x144>)
 80007ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007f0:	2312      	movs	r3, #18
 80007f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_ADC1_Init+0x134>)
 80007fa:	f001 f8ef 	bl	80019dc <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000804:	f000 f95a 	bl	8000abc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_ADC1_Init+0x148>)
 800080a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800080c:	2318      	movs	r3, #24
 800080e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_ADC1_Init+0x134>)
 8000816:	f001 f8e1 	bl	80019dc <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000820:	f000 f94c 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000ec 	.word	0x200000ec
 8000830:	50040000 	.word	0x50040000
 8000834:	04300002 	.word	0x04300002
 8000838:	08600004 	.word	0x08600004
 800083c:	0c900008 	.word	0x0c900008
 8000840:	10c00010 	.word	0x10c00010

08000844 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	; 0x38
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000876:	4b34      	ldr	r3, [pc, #208]	; (8000948 <MX_TIM4_Init+0x104>)
 8000878:	4a34      	ldr	r2, [pc, #208]	; (800094c <MX_TIM4_Init+0x108>)
 800087a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 800087c:	4b32      	ldr	r3, [pc, #200]	; (8000948 <MX_TIM4_Init+0x104>)
 800087e:	221f      	movs	r2, #31
 8000880:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b31      	ldr	r3, [pc, #196]	; (8000948 <MX_TIM4_Init+0x104>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8000888:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <MX_TIM4_Init+0x104>)
 800088a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800088e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <MX_TIM4_Init+0x104>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000896:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <MX_TIM4_Init+0x104>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800089c:	482a      	ldr	r0, [pc, #168]	; (8000948 <MX_TIM4_Init+0x104>)
 800089e:	f003 ff9b 	bl	80047d8 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80008a8:	f000 f908 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4823      	ldr	r0, [pc, #140]	; (8000948 <MX_TIM4_Init+0x104>)
 80008ba:	f004 fb7b 	bl	8004fb4 <HAL_TIM_ConfigClockSource>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80008c4:	f000 f8fa 	bl	8000abc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008c8:	481f      	ldr	r0, [pc, #124]	; (8000948 <MX_TIM4_Init+0x104>)
 80008ca:	f003 ffdc 	bl	8004886 <HAL_TIM_PWM_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80008d4:	f000 f8f2 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4818      	ldr	r0, [pc, #96]	; (8000948 <MX_TIM4_Init+0x104>)
 80008e8:	f005 f88c 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80008f2:	f000 f8e3 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f6:	2360      	movs	r3, #96	; 0x60
 80008f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1750;
 80008fa:	f240 63d6 	movw	r3, #1750	; 0x6d6
 80008fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <MX_TIM4_Init+0x104>)
 8000910:	f004 fa40 	bl	8004d94 <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800091a:	f000 f8cf 	bl	8000abc <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 800091e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000922:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	2204      	movs	r2, #4
 8000928:	4619      	mov	r1, r3
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <MX_TIM4_Init+0x104>)
 800092c:	f004 fa32 	bl	8004d94 <HAL_TIM_PWM_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 8000936:	f000 f8c1 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <MX_TIM4_Init+0x104>)
 800093c:	f000 f9a6 	bl	8000c8c <HAL_TIM_MspPostInit>

}
 8000940:	bf00      	nop
 8000942:	3738      	adds	r7, #56	; 0x38
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000a0 	.word	0x200000a0
 800094c:	40000800 	.word	0x40000800

08000950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_USART2_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000994:	f005 f8dc 	bl	8005b50 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f88d 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000198 	.word	0x20000198
 80009ac:	40004400 	.word	0x40004400

080009b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_DMA_Init+0x38>)
 80009b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <MX_DMA_Init+0x38>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6493      	str	r3, [r2, #72]	; 0x48
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_DMA_Init+0x38>)
 80009c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	200b      	movs	r0, #11
 80009d4:	f001 ff85 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009d8:	200b      	movs	r0, #11
 80009da:	f001 ff9e 	bl	800291a <HAL_NVIC_EnableIRQ>

}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a2a      	ldr	r2, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f002 fb91 	bl	8003190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_GPIO_Init+0xcc>)
 8000a84:	f002 f9da 	bl	8002e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f002 f9cb 	bl	8002e3c <HAL_GPIO_Init>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	10210000 	.word	0x10210000
 8000ab8:	48000800 	.word	0x48000800

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6593      	str	r3, [r2, #88]	; 0x58
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0ac      	sub	sp, #176	; 0xb0
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2288      	movs	r2, #136	; 0x88
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f005 ff95 	bl	8006a60 <memset>
  if(hadc->Instance==ADC1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a3c      	ldr	r2, [pc, #240]	; (8000c2c <HAL_ADC_MspInit+0x11c>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d171      	bne.n	8000c24 <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b44:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b56:	2308      	movs	r3, #8
 8000b58:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8000b62:	2308      	movs	r3, #8
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 f975 	bl	8003e60 <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000b7c:	f7ff ff9e 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b80:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <HAL_ADC_MspInit+0x120>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	4a2a      	ldr	r2, [pc, #168]	; (8000c30 <HAL_ADC_MspInit+0x120>)
 8000b86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <HAL_ADC_MspInit+0x120>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <HAL_ADC_MspInit+0x120>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9c:	4a24      	ldr	r2, [pc, #144]	; (8000c30 <HAL_ADC_MspInit+0x120>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <HAL_ADC_MspInit+0x120>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CDS1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bb6:	230b      	movs	r3, #11
 8000bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481a      	ldr	r0, [pc, #104]	; (8000c34 <HAL_ADC_MspInit+0x124>)
 8000bca:	f002 f937 	bl	8002e3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <HAL_ADC_MspInit+0x12c>)
 8000bd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000bfe:	2220      	movs	r2, #32
 8000c00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000c0a:	f001 fea1 	bl	8002950 <HAL_DMA_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000c14:	f7ff ff52 	bl	8000abc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000c1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c1e:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_ADC_MspInit+0x128>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	37b0      	adds	r7, #176	; 0xb0
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	50040000 	.word	0x50040000
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48000800 	.word	0x48000800
 8000c38:	20000150 	.word	0x20000150
 8000c3c:	40020008 	.word	0x40020008

08000c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_TIM_Base_MspInit+0x44>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d113      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_TIM_Base_MspInit+0x48>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	4a0c      	ldr	r2, [pc, #48]	; (8000c88 <HAL_TIM_Base_MspInit+0x48>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_TIM_Base_MspInit+0x48>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	201e      	movs	r0, #30
 8000c70:	f001 fe37 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c74:	201e      	movs	r0, #30
 8000c76:	f001 fe50 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40000800 	.word	0x40000800
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a11      	ldr	r2, [pc, #68]	; (8000cf0 <HAL_TIM_MspPostInit+0x64>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d11b      	bne.n	8000ce6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_TIM_MspPostInit+0x68>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <HAL_TIM_MspPostInit+0x68>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_TIM_MspPostInit+0x68>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cc6:	23c0      	movs	r3, #192	; 0xc0
 8000cc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_TIM_MspPostInit+0x6c>)
 8000ce2:	f002 f8ab 	bl	8002e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40000800 	.word	0x40000800
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000400 	.word	0x48000400

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0ac      	sub	sp, #176	; 0xb0
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2288      	movs	r2, #136	; 0x88
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fe9f 	bl	8006a60 <memset>
  if(huart->Instance==USART2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <HAL_UART_MspInit+0xc0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d143      	bne.n	8000db4 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 f891 	bl	8003e60 <HAL_RCCEx_PeriphCLKConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d44:	f7ff feba 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d52:	6593      	str	r3, [r2, #88]	; 0x58
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_UART_MspInit+0xc4>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d90:	2307      	movs	r3, #7
 8000d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f002 f84c 	bl	8002e3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2026      	movs	r0, #38	; 0x26
 8000daa:	f001 fd9a 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dae:	2026      	movs	r0, #38	; 0x26
 8000db0:	f001 fdb3 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	37b0      	adds	r7, #176	; 0xb0
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f97c 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <DMA1_Channel1_IRQHandler+0x10>)
 8000e1e:	f001 ff2e 	bl	8002c7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000150 	.word	0x20000150

08000e2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <TIM4_IRQHandler+0x10>)
 8000e32:	f003 fe8f 	bl	8004b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200000a0 	.word	0x200000a0

08000e40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <USART2_IRQHandler+0x10>)
 8000e46:	f004 ff65 	bl	8005d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000198 	.word	0x20000198

08000e54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e00a      	b.n	8000e7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e66:	f3af 8000 	nop.w
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	60ba      	str	r2, [r7, #8]
 8000e72:	b2ca      	uxtb	r2, r1
 8000e74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dbf0      	blt.n	8000e66 <_read+0x12>
	}

return len;
 8000e84:	687b      	ldr	r3, [r7, #4]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e009      	b.n	8000eb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	60ba      	str	r2, [r7, #8]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fb5d 	bl	8000568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbf1      	blt.n	8000ea0 <_write+0x12>
	}
	return len;
 8000ebc:	687b      	ldr	r3, [r7, #4]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_close>:

int _close(int file)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eee:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_isatty>:

int _isatty(int file)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	return 1;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f005 fd54 	bl	8006a0c <__errno>
 8000f64:	4603      	mov	r3, r0
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20018000 	.word	0x20018000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	2000008c 	.word	0x2000008c
 8000f98:	20000230 	.word	0x20000230

08000f9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <SystemInit+0x5c>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <SystemInit+0x5c>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <SystemInit+0x60>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <SystemInit+0x60>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <SystemInit+0x60>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <SystemInit+0x60>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <SystemInit+0x60>)
 8000fc8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fcc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <SystemInit+0x60>)
 8000fd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <SystemInit+0x60>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <SystemInit+0x60>)
 8000fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SystemInit+0x60>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	40021000 	.word	0x40021000

08001000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f7ff ffca 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001008:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800100a:	e003      	b.n	8001014 <LoopCopyDataInit>

0800100c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800100e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001010:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001012:	3104      	adds	r1, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001014:	480a      	ldr	r0, [pc, #40]	; (8001040 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001018:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800101a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800101c:	d3f6      	bcc.n	800100c <CopyDataInit>
	ldr	r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001020:	e002      	b.n	8001028 <LoopFillZerobss>

08001022 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001022:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001024:	f842 3b04 	str.w	r3, [r2], #4

08001028 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <LoopForever+0x16>)
	cmp	r2, r3
 800102a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800102c:	d3f9      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f005 fcf3 	bl	8006a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001032:	f7ff fab7 	bl	80005a4 <main>

08001036 <LoopForever>:

LoopForever:
    b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001038:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800103c:	08007a50 	.word	0x08007a50
	ldr	r0, =_sdata
 8001040:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001044:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001048:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800104c:	20000230 	.word	0x20000230

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>
	...

08001054 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_Init+0x3c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_Init+0x3c>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001068:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	2003      	movs	r0, #3
 800106c:	f001 fc2e 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001070:	2000      	movs	r0, #0
 8001072:	f000 f80f 	bl	8001094 <HAL_InitTick>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	e001      	b.n	8001086 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001082:	f7ff fd21 	bl	8000ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001086:	79fb      	ldrb	r3, [r7, #7]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_InitTick+0x6c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d023      	beq.n	80010f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_InitTick+0x70>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_InitTick+0x6c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 fc39 	bl	8002936 <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10f      	bne.n	80010ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d809      	bhi.n	80010e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f001 fc03 	bl	80028e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_InitTick+0x74>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e007      	b.n	80010f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e004      	b.n	80010f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	e001      	b.n	80010f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	20000000 	.word	0x20000000
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	2000021c 	.word	0x2000021c

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	2000021c 	.word	0x2000021c

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008

08001194 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	609a      	str	r2, [r3, #8]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3360      	adds	r3, #96	; 0x60
 800120e:	461a      	mov	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <LL_ADC_SetOffset+0x44>)
 800121e:	4013      	ands	r3, r2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	4313      	orrs	r3, r2
 800122c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001234:	bf00      	nop
 8001236:	371c      	adds	r7, #28
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	03fff000 	.word	0x03fff000

08001244 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3360      	adds	r3, #96	; 0x60
 8001252:	461a      	mov	r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3360      	adds	r3, #96	; 0x60
 8001280:	461a      	mov	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	431a      	orrs	r2, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800129a:	bf00      	nop
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3330      	adds	r3, #48	; 0x30
 80012dc:	461a      	mov	r2, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	4413      	add	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	f003 031f 	and.w	r3, r3, #31
 80012f6:	211f      	movs	r1, #31
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	401a      	ands	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	0e9b      	lsrs	r3, r3, #26
 8001304:	f003 011f 	and.w	r1, r3, #31
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	431a      	orrs	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001318:	bf00      	nop
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3314      	adds	r3, #20
 8001334:	461a      	mov	r2, r3
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	0e5b      	lsrs	r3, r3, #25
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	4413      	add	r3, r2
 8001342:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	0d1b      	lsrs	r3, r3, #20
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	2107      	movs	r1, #7
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	401a      	ands	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	0d1b      	lsrs	r3, r3, #20
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	431a      	orrs	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001394:	43db      	mvns	r3, r3
 8001396:	401a      	ands	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0318 	and.w	r3, r3, #24
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013a0:	40d9      	lsrs	r1, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	400b      	ands	r3, r1
 80013a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013aa:	431a      	orrs	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	0007ffff 	.word	0x0007ffff

080013c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 031f 	and.w	r3, r3, #31
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6093      	str	r3, [r2, #8]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001418:	d101      	bne.n	800141e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800143c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001440:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001468:	d101      	bne.n	800146e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800148c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001490:	f043 0201 	orr.w	r2, r3, #1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b8:	f043 0202 	orr.w	r2, r3, #2
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <LL_ADC_IsEnabled+0x18>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <LL_ADC_IsEnabled+0x1a>
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b02      	cmp	r3, #2
 8001504:	d101      	bne.n	800150a <LL_ADC_IsDisableOngoing+0x18>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_ADC_IsDisableOngoing+0x1a>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001528:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800152c:	f043 0204 	orr.w	r2, r3, #4
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b04      	cmp	r3, #4
 8001552:	d101      	bne.n	8001558 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b08      	cmp	r3, #8
 8001578:	d101      	bne.n	800157e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e136      	b.n	8001814 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff faab 	bl	8000b10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff19 	bl	8001404 <LL_ADC_IsDeepPowerDownEnabled>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff feff 	bl	80013e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff34 	bl	8001454 <LL_ADC_IsInternalRegulatorEnabled>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d115      	bne.n	800161e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff18 	bl	800142c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015fc:	4b87      	ldr	r3, [pc, #540]	; (800181c <HAL_ADC_Init+0x290>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	099b      	lsrs	r3, r3, #6
 8001602:	4a87      	ldr	r2, [pc, #540]	; (8001820 <HAL_ADC_Init+0x294>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	3301      	adds	r3, #1
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001610:	e002      	b.n	8001618 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3b01      	subs	r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f9      	bne.n	8001612 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff16 	bl	8001454 <LL_ADC_IsInternalRegulatorEnabled>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10d      	bne.n	800164a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff76 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001654:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80cf 	bne.w	8001802 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 80cb 	bne.w	8001802 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001674:	f043 0202 	orr.w	r2, r3, #2
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff23 	bl	80014cc <LL_ADC_IsEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d115      	bne.n	80016b8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800168c:	4865      	ldr	r0, [pc, #404]	; (8001824 <HAL_ADC_Init+0x298>)
 800168e:	f7ff ff1d 	bl	80014cc <LL_ADC_IsEnabled>
 8001692:	4604      	mov	r4, r0
 8001694:	4864      	ldr	r0, [pc, #400]	; (8001828 <HAL_ADC_Init+0x29c>)
 8001696:	f7ff ff19 	bl	80014cc <LL_ADC_IsEnabled>
 800169a:	4603      	mov	r3, r0
 800169c:	431c      	orrs	r4, r3
 800169e:	4863      	ldr	r0, [pc, #396]	; (800182c <HAL_ADC_Init+0x2a0>)
 80016a0:	f7ff ff14 	bl	80014cc <LL_ADC_IsEnabled>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4323      	orrs	r3, r4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4619      	mov	r1, r3
 80016b2:	485f      	ldr	r0, [pc, #380]	; (8001830 <HAL_ADC_Init+0x2a4>)
 80016b4:	f7ff fd6e 	bl	8001194 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7e5b      	ldrb	r3, [r3, #25]
 80016bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d106      	bne.n	80016f4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	3b01      	subs	r3, #1
 80016ec:	045b      	lsls	r3, r3, #17
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_ADC_Init+0x2a8>)
 8001718:	4013      	ands	r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	430b      	orrs	r3, r1
 8001722:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff09 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 800172e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff16 	bl	8001566 <LL_ADC_INJ_IsConversionOngoing>
 800173a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d13d      	bne.n	80017be <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d13a      	bne.n	80017be <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800174c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001754:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001764:	f023 0302 	bic.w	r3, r3, #2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	69b9      	ldr	r1, [r7, #24]
 800176e:	430b      	orrs	r3, r1
 8001770:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001778:	2b01      	cmp	r3, #1
 800177a:	d118      	bne.n	80017ae <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001786:	f023 0304 	bic.w	r3, r3, #4
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001792:	4311      	orrs	r1, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001798:	4311      	orrs	r1, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800179e:	430a      	orrs	r2, r1
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	e007      	b.n	80017be <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0201 	bic.w	r2, r2, #1
 80017bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d10c      	bne.n	80017e0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	f023 010f 	bic.w	r1, r3, #15
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	1e5a      	subs	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	631a      	str	r2, [r3, #48]	; 0x30
 80017de:	e007      	b.n	80017f0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 020f 	bic.w	r2, r2, #15
 80017ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f4:	f023 0303 	bic.w	r3, r3, #3
 80017f8:	f043 0201 	orr.w	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54
 8001800:	e007      	b.n	8001812 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	f043 0210 	orr.w	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001812:	7ffb      	ldrb	r3, [r7, #31]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3724      	adds	r7, #36	; 0x24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	20000000 	.word	0x20000000
 8001820:	053e2d63 	.word	0x053e2d63
 8001824:	50040000 	.word	0x50040000
 8001828:	50040100 	.word	0x50040100
 800182c:	50040200 	.word	0x50040200
 8001830:	50040300 	.word	0x50040300
 8001834:	fff0c007 	.word	0xfff0c007

08001838 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001844:	4850      	ldr	r0, [pc, #320]	; (8001988 <HAL_ADC_Start_DMA+0x150>)
 8001846:	f7ff fdbd 	bl	80013c4 <LL_ADC_GetMultimode>
 800184a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fe75 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	f040 808e 	bne.w	800197a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ADC_Start_DMA+0x34>
 8001868:	2302      	movs	r3, #2
 800186a:	e089      	b.n	8001980 <HAL_ADC_Start_DMA+0x148>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b05      	cmp	r3, #5
 800187e:	d002      	beq.n	8001886 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	2b09      	cmp	r3, #9
 8001884:	d172      	bne.n	800196c <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 fc98 	bl	80021bc <ADC_Enable>
 800188c:	4603      	mov	r3, r0
 800188e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d165      	bne.n	8001962 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a37      	ldr	r2, [pc, #220]	; (800198c <HAL_ADC_Start_DMA+0x154>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d002      	beq.n	80018ba <HAL_ADC_Start_DMA+0x82>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	e000      	b.n	80018bc <HAL_ADC_Start_DMA+0x84>
 80018ba:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_ADC_Start_DMA+0x158>)
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d002      	beq.n	80018ca <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f023 0206 	bic.w	r2, r3, #6
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	659a      	str	r2, [r3, #88]	; 0x58
 80018ee:	e002      	b.n	80018f6 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	4a26      	ldr	r2, [pc, #152]	; (8001994 <HAL_ADC_Start_DMA+0x15c>)
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	4a25      	ldr	r2, [pc, #148]	; (8001998 <HAL_ADC_Start_DMA+0x160>)
 8001904:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	4a24      	ldr	r2, [pc, #144]	; (800199c <HAL_ADC_Start_DMA+0x164>)
 800190c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	221c      	movs	r2, #28
 8001914:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0210 	orr.w	r2, r2, #16
 800192c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 0201 	orr.w	r2, r2, #1
 800193c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3340      	adds	r3, #64	; 0x40
 8001948:	4619      	mov	r1, r3
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f001 f8b7 	bl	8002ac0 <HAL_DMA_Start_IT>
 8001952:	4603      	mov	r3, r0
 8001954:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fddc 	bl	8001518 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001960:	e00d      	b.n	800197e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800196a:	e008      	b.n	800197e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001978:	e001      	b.n	800197e <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800197a:	2302      	movs	r3, #2
 800197c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800197e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	50040300 	.word	0x50040300
 800198c:	50040100 	.word	0x50040100
 8001990:	50040000 	.word	0x50040000
 8001994:	0800233f 	.word	0x0800233f
 8001998:	08002417 	.word	0x08002417
 800199c:	08002433 	.word	0x08002433

080019a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0b6      	sub	sp, #216	; 0xd8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x22>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e3c7      	b.n	800218e <HAL_ADC_ConfigChannel+0x7b2>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fd98 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 83a8 	bne.w	8002168 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d824      	bhi.n	8001a6a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	3b02      	subs	r3, #2
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d81b      	bhi.n	8001a62 <HAL_ADC_ConfigChannel+0x86>
 8001a2a:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <HAL_ADC_ConfigChannel+0x54>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001a41 	.word	0x08001a41
 8001a34:	08001a49 	.word	0x08001a49
 8001a38:	08001a51 	.word	0x08001a51
 8001a3c:	08001a59 	.word	0x08001a59
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	220c      	movs	r2, #12
 8001a44:	605a      	str	r2, [r3, #4]
          break;
 8001a46:	e011      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2212      	movs	r2, #18
 8001a4c:	605a      	str	r2, [r3, #4]
          break;
 8001a4e:	e00d      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2218      	movs	r2, #24
 8001a54:	605a      	str	r2, [r3, #4]
          break;
 8001a56:	e009      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5e:	605a      	str	r2, [r3, #4]
          break;
 8001a60:	e004      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2206      	movs	r2, #6
 8001a66:	605a      	str	r2, [r3, #4]
          break;
 8001a68:	e000      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a6a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f7ff fc27 	bl	80012cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fd5c 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001a88:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fd68 	bl	8001566 <LL_ADC_INJ_IsConversionOngoing>
 8001a96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f040 81a6 	bne.w	8001df0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f040 81a1 	bne.w	8001df0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	461a      	mov	r2, r3
 8001abc:	f7ff fc32 	bl	8001324 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	08db      	lsrs	r3, r3, #3
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d00a      	beq.n	8001af8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6919      	ldr	r1, [r3, #16]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001af2:	f7ff fb83 	bl	80011fc <LL_ADC_SetOffset>
 8001af6:	e17b      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fba0 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10a      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x148>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fb95 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	0e9b      	lsrs	r3, r3, #26
 8001b1e:	f003 021f 	and.w	r2, r3, #31
 8001b22:	e01e      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x186>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fb8a 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001b52:	2320      	movs	r3, #32
 8001b54:	e004      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d105      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x19e>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	0e9b      	lsrs	r3, r3, #26
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	e018      	b.n	8001bac <HAL_ADC_ConfigChannel+0x1d0>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	e004      	b.n	8001bac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d106      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fb59 	bl	8001270 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fb3d 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10a      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x20e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fb32 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	e01e      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x24c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fb27 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	e004      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x264>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	e018      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x296>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001c64:	2320      	movs	r3, #32
 8001c66:	e004      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d106      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff faf6 	bl	8001270 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fada 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10a      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x2d4>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff facf 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 021f 	and.w	r2, r3, #31
 8001cae:	e01e      	b.n	8001cee <HAL_ADC_ConfigChannel+0x312>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fac4 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001cd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	e004      	b.n	8001cec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x32a>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	e016      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x358>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001d26:	2320      	movs	r3, #32
 8001d28:	e004      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d106      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2102      	movs	r1, #2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fa95 	bl	8001270 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fa79 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10a      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x396>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2103      	movs	r1, #3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fa6e 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	0e9b      	lsrs	r3, r3, #26
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	e017      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x3c6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2103      	movs	r1, #3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fa63 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001d94:	2320      	movs	r3, #32
 8001d96:	e003      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x3de>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0e9b      	lsrs	r3, r3, #26
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	e011      	b.n	8001dde <HAL_ADC_ConfigChannel+0x402>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001dd2:	2320      	movs	r3, #32
 8001dd4:	e003      	b.n	8001dde <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d106      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	2103      	movs	r1, #3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fa40 	bl	8001270 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fb69 	bl	80014cc <LL_ADC_IsEnabled>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 813f 	bne.w	8002080 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f7ff fab4 	bl	800137c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4a8e      	ldr	r2, [pc, #568]	; (8002054 <HAL_ADC_ConfigChannel+0x678>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	f040 8130 	bne.w	8002080 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x46c>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	3301      	adds	r3, #1
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	bf94      	ite	ls
 8001e40:	2301      	movls	r3, #1
 8001e42:	2300      	movhi	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	e019      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x4a0>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e003      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	bf94      	ite	ls
 8001e76:	2301      	movls	r3, #1
 8001e78:	2300      	movhi	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d079      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d107      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x4c0>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0e9b      	lsrs	r3, r3, #26
 8001e92:	3301      	adds	r3, #1
 8001e94:	069b      	lsls	r3, r3, #26
 8001e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e9a:	e015      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x4ec>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	e003      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	069b      	lsls	r3, r3, #26
 8001ec4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x50c>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	3301      	adds	r3, #1
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	e017      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x53c>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001f00:	2320      	movs	r3, #32
 8001f02:	e003      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	ea42 0103 	orr.w	r1, r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10a      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x562>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	0e9b      	lsrs	r3, r3, #26
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f003 021f 	and.w	r2, r3, #31
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	051b      	lsls	r3, r3, #20
 8001f3c:	e018      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x594>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001f56:	2320      	movs	r3, #32
 8001f58:	e003      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f70:	430b      	orrs	r3, r1
 8001f72:	e080      	b.n	8002076 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x5b4>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	0e9b      	lsrs	r3, r3, #26
 8001f86:	3301      	adds	r3, #1
 8001f88:	069b      	lsls	r3, r3, #26
 8001f8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8e:	e015      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x5e0>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e003      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	069b      	lsls	r3, r3, #26
 8001fb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x600>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0e9b      	lsrs	r3, r3, #26
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	e017      	b.n	800200c <HAL_ADC_ConfigChannel+0x630>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	61fb      	str	r3, [r7, #28]
  return result;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e003      	b.n	8002000 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3301      	adds	r3, #1
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	2101      	movs	r1, #1
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	ea42 0103 	orr.w	r1, r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10d      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x65c>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	3301      	adds	r3, #1
 8002024:	f003 021f 	and.w	r2, r3, #31
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	3b1e      	subs	r3, #30
 8002030:	051b      	lsls	r3, r3, #20
 8002032:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002036:	e01d      	b.n	8002074 <HAL_ADC_ConfigChannel+0x698>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	613b      	str	r3, [r7, #16]
  return result;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d103      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e005      	b.n	8002060 <HAL_ADC_ConfigChannel+0x684>
 8002054:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	3301      	adds	r3, #1
 8002062:	f003 021f 	and.w	r2, r3, #31
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	3b1e      	subs	r3, #30
 800206e:	051b      	lsls	r3, r3, #20
 8002070:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002074:	430b      	orrs	r3, r1
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	6892      	ldr	r2, [r2, #8]
 800207a:	4619      	mov	r1, r3
 800207c:	f7ff f952 	bl	8001324 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b44      	ldr	r3, [pc, #272]	; (8002198 <HAL_ADC_ConfigChannel+0x7bc>)
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d07a      	beq.n	8002182 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800208c:	4843      	ldr	r0, [pc, #268]	; (800219c <HAL_ADC_ConfigChannel+0x7c0>)
 800208e:	f7ff f8a7 	bl	80011e0 <LL_ADC_GetCommonPathInternalCh>
 8002092:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a41      	ldr	r2, [pc, #260]	; (80021a0 <HAL_ADC_ConfigChannel+0x7c4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d12c      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d126      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3c      	ldr	r2, [pc, #240]	; (80021a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d004      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x6e4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a3b      	ldr	r2, [pc, #236]	; (80021a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d15d      	bne.n	800217c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020c8:	4619      	mov	r1, r3
 80020ca:	4834      	ldr	r0, [pc, #208]	; (800219c <HAL_ADC_ConfigChannel+0x7c0>)
 80020cc:	f7ff f875 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d0:	4b36      	ldr	r3, [pc, #216]	; (80021ac <HAL_ADC_ConfigChannel+0x7d0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	4a36      	ldr	r2, [pc, #216]	; (80021b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020ea:	e002      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f9      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020f8:	e040      	b.n	800217c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2d      	ldr	r2, [pc, #180]	; (80021b4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d118      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x75a>
 8002104:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d112      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a23      	ldr	r2, [pc, #140]	; (80021a4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d004      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x748>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d12d      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002124:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002128:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800212c:	4619      	mov	r1, r3
 800212e:	481b      	ldr	r0, [pc, #108]	; (800219c <HAL_ADC_ConfigChannel+0x7c0>)
 8002130:	f7ff f843 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002134:	e024      	b.n	8002180 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <HAL_ADC_ConfigChannel+0x7dc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d120      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d11a      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d115      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002156:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800215a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800215e:	4619      	mov	r1, r3
 8002160:	480e      	ldr	r0, [pc, #56]	; (800219c <HAL_ADC_ConfigChannel+0x7c0>)
 8002162:	f7ff f82a 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
 8002166:	e00c      	b.n	8002182 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800217a:	e002      	b.n	8002182 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800217c:	bf00      	nop
 800217e:	e000      	b.n	8002182 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002180:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800218a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800218e:	4618      	mov	r0, r3
 8002190:	37d8      	adds	r7, #216	; 0xd8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	80080000 	.word	0x80080000
 800219c:	50040300 	.word	0x50040300
 80021a0:	c7520000 	.word	0xc7520000
 80021a4:	50040000 	.word	0x50040000
 80021a8:	50040200 	.word	0x50040200
 80021ac:	20000000 	.word	0x20000000
 80021b0:	053e2d63 	.word	0x053e2d63
 80021b4:	cb840000 	.word	0xcb840000
 80021b8:	80000001 	.word	0x80000001

080021bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff f97f 	bl	80014cc <LL_ADC_IsEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d14d      	bne.n	8002270 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	4b28      	ldr	r3, [pc, #160]	; (800227c <ADC_Enable+0xc0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f043 0210 	orr.w	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e039      	b.n	8002272 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f93a 	bl	800147c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002208:	f7fe ff94 	bl	8001134 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800220e:	e028      	b.n	8002262 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff f959 	bl	80014cc <LL_ADC_IsEnabled>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d104      	bne.n	800222a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f929 	bl	800147c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800222a:	f7fe ff83 	bl	8001134 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d914      	bls.n	8002262 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d00d      	beq.n	8002262 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f043 0210 	orr.w	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e007      	b.n	8002272 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d1cf      	bne.n	8002210 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	8000003f 	.word	0x8000003f

08002280 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f930 	bl	80014f2 <LL_ADC_IsDisableOngoing>
 8002292:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff f917 	bl	80014cc <LL_ADC_IsEnabled>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d047      	beq.n	8002334 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d144      	bne.n	8002334 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 030d 	and.w	r3, r3, #13
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d10c      	bne.n	80022d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f8f1 	bl	80014a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2203      	movs	r2, #3
 80022c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ca:	f7fe ff33 	bl	8001134 <HAL_GetTick>
 80022ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022d0:	e029      	b.n	8002326 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	f043 0210 	orr.w	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e023      	b.n	8002336 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022ee:	f7fe ff21 	bl	8001134 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d914      	bls.n	8002326 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00d      	beq.n	8002326 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f043 0210 	orr.w	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e007      	b.n	8002336 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1dc      	bne.n	80022ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002354:	2b00      	cmp	r3, #0
 8002356:	d14b      	bne.n	80023f0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d021      	beq.n	80023b6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe ff95 	bl	80012a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d032      	beq.n	80023e8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d12b      	bne.n	80023e8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d11f      	bne.n	80023e8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
 80023b4:	e018      	b.n	80023e8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d111      	bne.n	80023e8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7ff fad9 	bl	80019a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023ee:	e00e      	b.n	800240e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7ff fae3 	bl	80019c8 <HAL_ADC_ErrorCallback>
}
 8002402:	e004      	b.n	800240e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4798      	blx	r3
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff fac5 	bl	80019b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f043 0204 	orr.w	r2, r3, #4
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff fab5 	bl	80019c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <LL_ADC_IsEnabled>:
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <LL_ADC_IsEnabled+0x18>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <LL_ADC_IsEnabled+0x1a>
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_StartCalibration>:
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800249e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	609a      	str	r2, [r3, #8]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_ADC_IsCalibrationOnGoing>:
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024d2:	d101      	bne.n	80024d8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <LL_ADC_IsCalibrationOnGoing+0x1c>
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d101      	bne.n	80024fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_ADCEx_Calibration_Start+0x1c>
 8002524:	2302      	movs	r3, #2
 8002526:	e04d      	b.n	80025c4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fea5 	bl	8002280 <ADC_Disable>
 8002536:	4603      	mov	r3, r0
 8002538:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d136      	bne.n	80025ae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002548:	f023 0302 	bic.w	r3, r3, #2
 800254c:	f043 0202 	orr.w	r2, r3, #2
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6839      	ldr	r1, [r7, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff96 	bl	800248c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002560:	e014      	b.n	800258c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	3301      	adds	r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800256e:	d30d      	bcc.n	800258c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	f023 0312 	bic.w	r3, r3, #18
 8002578:	f043 0210 	orr.w	r2, r3, #16
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e01b      	b.n	80025c4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff94 	bl	80024be <LL_ADC_IsCalibrationOnGoing>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e2      	bne.n	8002562 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f023 0303 	bic.w	r3, r3, #3
 80025a4:	f043 0201 	orr.w	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
 80025ac:	e005      	b.n	80025ba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0210 	orr.w	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b09f      	sub	sp, #124	; 0x7c
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e093      	b.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80025f2:	2300      	movs	r3, #0
 80025f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80025f6:	2300      	movs	r3, #0
 80025f8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a47      	ldr	r2, [pc, #284]	; (800271c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d102      	bne.n	800260a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002604:	4b46      	ldr	r3, [pc, #280]	; (8002720 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	e001      	b.n	800260e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e072      	b.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff59 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 8002634:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff53 	bl	80024e6 <LL_ADC_REG_IsConversionOngoing>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d154      	bne.n	80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002648:	2b00      	cmp	r3, #0
 800264a:	d151      	bne.n	80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800264c:	4b35      	ldr	r3, [pc, #212]	; (8002724 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800264e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d02c      	beq.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800266a:	035b      	lsls	r3, r3, #13
 800266c:	430b      	orrs	r3, r1
 800266e:	431a      	orrs	r2, r3
 8002670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002672:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002674:	4829      	ldr	r0, [pc, #164]	; (800271c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002676:	f7ff fef6 	bl	8002466 <LL_ADC_IsEnabled>
 800267a:	4604      	mov	r4, r0
 800267c:	4828      	ldr	r0, [pc, #160]	; (8002720 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800267e:	f7ff fef2 	bl	8002466 <LL_ADC_IsEnabled>
 8002682:	4603      	mov	r3, r0
 8002684:	431c      	orrs	r4, r3
 8002686:	4828      	ldr	r0, [pc, #160]	; (8002728 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002688:	f7ff feed 	bl	8002466 <LL_ADC_IsEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	4323      	orrs	r3, r4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d137      	bne.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800269c:	f023 030f 	bic.w	r3, r3, #15
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	6811      	ldr	r1, [r2, #0]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	6892      	ldr	r2, [r2, #8]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	431a      	orrs	r2, r3
 80026ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026b0:	e028      	b.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026be:	4817      	ldr	r0, [pc, #92]	; (800271c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026c0:	f7ff fed1 	bl	8002466 <LL_ADC_IsEnabled>
 80026c4:	4604      	mov	r4, r0
 80026c6:	4816      	ldr	r0, [pc, #88]	; (8002720 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026c8:	f7ff fecd 	bl	8002466 <LL_ADC_IsEnabled>
 80026cc:	4603      	mov	r3, r0
 80026ce:	431c      	orrs	r4, r3
 80026d0:	4815      	ldr	r0, [pc, #84]	; (8002728 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026d2:	f7ff fec8 	bl	8002466 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4323      	orrs	r3, r4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d112      	bne.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026e6:	f023 030f 	bic.w	r3, r3, #15
 80026ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026ee:	e009      	b.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002702:	e000      	b.n	8002706 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002704:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800270e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002712:	4618      	mov	r0, r3
 8002714:	377c      	adds	r7, #124	; 0x7c
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	50040000 	.word	0x50040000
 8002720:	50040100 	.word	0x50040100
 8002724:	50040300 	.word	0x50040300
 8002728:	50040200 	.word	0x50040200

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f7ff ff8e 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff29 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028f4:	f7ff ff3e 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff8e 	bl	8002820 <NVIC_EncodePriority>
 8002904:	4602      	mov	r2, r0
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5d 	bl	80027cc <__NVIC_SetPriority>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff31 	bl	8002790 <__NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa2 	bl	8002888 <SysTick_Config>
 8002944:	4603      	mov	r3, r0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e098      	b.n	8002a94 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	4b4d      	ldr	r3, [pc, #308]	; (8002aa0 <HAL_DMA_Init+0x150>)
 800296a:	429a      	cmp	r2, r3
 800296c:	d80f      	bhi.n	800298e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <HAL_DMA_Init+0x154>)
 8002976:	4413      	add	r3, r2
 8002978:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <HAL_DMA_Init+0x158>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	009a      	lsls	r2, r3, #2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a48      	ldr	r2, [pc, #288]	; (8002aac <HAL_DMA_Init+0x15c>)
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
 800298c:	e00e      	b.n	80029ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <HAL_DMA_Init+0x160>)
 8002996:	4413      	add	r3, r2
 8002998:	4a43      	ldr	r2, [pc, #268]	; (8002aa8 <HAL_DMA_Init+0x158>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	009a      	lsls	r2, r3, #2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a42      	ldr	r2, [pc, #264]	; (8002ab4 <HAL_DMA_Init+0x164>)
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a06:	d039      	beq.n	8002a7c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	4a27      	ldr	r2, [pc, #156]	; (8002aac <HAL_DMA_Init+0x15c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d11a      	bne.n	8002a48 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a12:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_DMA_Init+0x168>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f003 031c 	and.w	r3, r3, #28
 8002a1e:	210f      	movs	r1, #15
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	4924      	ldr	r1, [pc, #144]	; (8002ab8 <HAL_DMA_Init+0x168>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a2c:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <HAL_DMA_Init+0x168>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	f003 031c 	and.w	r3, r3, #28
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	491d      	ldr	r1, [pc, #116]	; (8002ab8 <HAL_DMA_Init+0x168>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
 8002a46:	e019      	b.n	8002a7c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a48:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <HAL_DMA_Init+0x16c>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	f003 031c 	and.w	r3, r3, #28
 8002a54:	210f      	movs	r1, #15
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	4917      	ldr	r1, [pc, #92]	; (8002abc <HAL_DMA_Init+0x16c>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_DMA_Init+0x16c>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	f003 031c 	and.w	r3, r3, #28
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	4911      	ldr	r1, [pc, #68]	; (8002abc <HAL_DMA_Init+0x16c>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40020407 	.word	0x40020407
 8002aa4:	bffdfff8 	.word	0xbffdfff8
 8002aa8:	cccccccd 	.word	0xcccccccd
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	bffdfbf8 	.word	0xbffdfbf8
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	400200a8 	.word	0x400200a8
 8002abc:	400204a8 	.word	0x400204a8

08002ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_DMA_Start_IT+0x20>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e04b      	b.n	8002b78 <HAL_DMA_Start_IT+0xb8>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d13a      	bne.n	8002b6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f95f 	bl	8002ddc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 020e 	orr.w	r2, r2, #14
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e00f      	b.n	8002b58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0204 	bic.w	r2, r2, #4
 8002b46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 020a 	orr.w	r2, r2, #10
 8002b56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e005      	b.n	8002b76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b72:	2302      	movs	r3, #2
 8002b74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d008      	beq.n	8002baa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e022      	b.n	8002bf0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 020e 	bic.w	r2, r2, #14
 8002bb8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	f003 021c 	and.w	r2, r3, #28
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bdc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d005      	beq.n	8002c20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2204      	movs	r2, #4
 8002c18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	e029      	b.n	8002c74 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 020e 	bic.w	r2, r2, #14
 8002c2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	f003 021c 	and.w	r2, r3, #28
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
    }
  }
  return status;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f003 031c 	and.w	r3, r3, #28
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d026      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x7a>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d021      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d107      	bne.n	8002cd2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0204 	bic.w	r2, r2, #4
 8002cd0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f003 021c 	and.w	r2, r3, #28
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	2104      	movs	r1, #4
 8002ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d071      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002cf6:	e06c      	b.n	8002dd2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	f003 031c 	and.w	r3, r3, #28
 8002d00:	2202      	movs	r2, #2
 8002d02:	409a      	lsls	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d02e      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xec>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d029      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 020a 	bic.w	r2, r2, #10
 8002d32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	f003 021c 	and.w	r2, r3, #28
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	2102      	movs	r1, #2
 8002d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d038      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d68:	e033      	b.n	8002dd2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f003 031c 	and.w	r3, r3, #28
 8002d72:	2208      	movs	r2, #8
 8002d74:	409a      	lsls	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d02a      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x156>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d025      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 020e 	bic.w	r2, r2, #14
 8002d96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f003 021c 	and.w	r2, r3, #28
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f202 	lsl.w	r2, r1, r2
 8002daa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
}
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f003 021c 	and.w	r2, r3, #28
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2101      	movs	r1, #1
 8002df8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d108      	bne.n	8002e20 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e1e:	e007      	b.n	8002e30 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	60da      	str	r2, [r3, #12]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e4a:	e17f      	b.n	800314c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8171 	beq.w	8003146 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d00b      	beq.n	8002e84 <HAL_GPIO_Init+0x48>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d007      	beq.n	8002e84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e78:	2b11      	cmp	r3, #17
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b12      	cmp	r3, #18
 8002e82:	d130      	bne.n	8002ee6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eba:	2201      	movs	r2, #1
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 0201 	and.w	r2, r3, #1
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d118      	bne.n	8002f24 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	08db      	lsrs	r3, r3, #3
 8002f0e:	f003 0201 	and.w	r2, r3, #1
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x128>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b12      	cmp	r3, #18
 8002f62:	d123      	bne.n	8002fac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	08da      	lsrs	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3208      	adds	r2, #8
 8002f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	08da      	lsrs	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3208      	adds	r2, #8
 8002fa6:	6939      	ldr	r1, [r7, #16]
 8002fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80ac 	beq.w	8003146 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	4b5f      	ldr	r3, [pc, #380]	; (800316c <HAL_GPIO_Init+0x330>)
 8002ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	; (800316c <HAL_GPIO_Init+0x330>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	; (800316c <HAL_GPIO_Init+0x330>)
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003006:	4a5a      	ldr	r2, [pc, #360]	; (8003170 <HAL_GPIO_Init+0x334>)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	089b      	lsrs	r3, r3, #2
 800300c:	3302      	adds	r3, #2
 800300e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003030:	d025      	beq.n	800307e <HAL_GPIO_Init+0x242>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a4f      	ldr	r2, [pc, #316]	; (8003174 <HAL_GPIO_Init+0x338>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01f      	beq.n	800307a <HAL_GPIO_Init+0x23e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4e      	ldr	r2, [pc, #312]	; (8003178 <HAL_GPIO_Init+0x33c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d019      	beq.n	8003076 <HAL_GPIO_Init+0x23a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4d      	ldr	r2, [pc, #308]	; (800317c <HAL_GPIO_Init+0x340>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_GPIO_Init+0x236>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4c      	ldr	r2, [pc, #304]	; (8003180 <HAL_GPIO_Init+0x344>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00d      	beq.n	800306e <HAL_GPIO_Init+0x232>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4b      	ldr	r2, [pc, #300]	; (8003184 <HAL_GPIO_Init+0x348>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <HAL_GPIO_Init+0x22e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a4a      	ldr	r2, [pc, #296]	; (8003188 <HAL_GPIO_Init+0x34c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_GPIO_Init+0x22a>
 8003062:	2306      	movs	r3, #6
 8003064:	e00c      	b.n	8003080 <HAL_GPIO_Init+0x244>
 8003066:	2307      	movs	r3, #7
 8003068:	e00a      	b.n	8003080 <HAL_GPIO_Init+0x244>
 800306a:	2305      	movs	r3, #5
 800306c:	e008      	b.n	8003080 <HAL_GPIO_Init+0x244>
 800306e:	2304      	movs	r3, #4
 8003070:	e006      	b.n	8003080 <HAL_GPIO_Init+0x244>
 8003072:	2303      	movs	r3, #3
 8003074:	e004      	b.n	8003080 <HAL_GPIO_Init+0x244>
 8003076:	2302      	movs	r3, #2
 8003078:	e002      	b.n	8003080 <HAL_GPIO_Init+0x244>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_GPIO_Init+0x244>
 800307e:	2300      	movs	r3, #0
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	f002 0203 	and.w	r2, r2, #3
 8003086:	0092      	lsls	r2, r2, #2
 8003088:	4093      	lsls	r3, r2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003090:	4937      	ldr	r1, [pc, #220]	; (8003170 <HAL_GPIO_Init+0x334>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	3302      	adds	r3, #2
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800309e:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_GPIO_Init+0x350>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030c2:	4a32      	ldr	r2, [pc, #200]	; (800318c <HAL_GPIO_Init+0x350>)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030c8:	4b30      	ldr	r3, [pc, #192]	; (800318c <HAL_GPIO_Init+0x350>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030ec:	4a27      	ldr	r2, [pc, #156]	; (800318c <HAL_GPIO_Init+0x350>)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f2:	4b26      	ldr	r3, [pc, #152]	; (800318c <HAL_GPIO_Init+0x350>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003116:	4a1d      	ldr	r2, [pc, #116]	; (800318c <HAL_GPIO_Init+0x350>)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <HAL_GPIO_Init+0x350>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003140:	4a12      	ldr	r2, [pc, #72]	; (800318c <HAL_GPIO_Init+0x350>)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3301      	adds	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	f47f ae78 	bne.w	8002e4c <HAL_GPIO_Init+0x10>
  }
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	40010000 	.word	0x40010000
 8003174:	48000400 	.word	0x48000400
 8003178:	48000800 	.word	0x48000800
 800317c:	48000c00 	.word	0x48000c00
 8003180:	48001000 	.word	0x48001000
 8003184:	48001400 	.word	0x48001400
 8003188:	48001800 	.word	0x48001800
 800318c:	40010400 	.word	0x40010400

08003190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
 800319c:	4613      	mov	r3, r2
 800319e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031a0:	787b      	ldrb	r3, [r7, #1]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031ac:	e002      	b.n	80031b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ae:	887a      	ldrh	r2, [r7, #2]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40007000 	.word	0x40007000

080031dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ea:	d130      	bne.n	800324e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ec:	4b23      	ldr	r3, [pc, #140]	; (800327c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f8:	d038      	beq.n	800326c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003202:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003204:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003208:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2232      	movs	r2, #50	; 0x32
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	0c9b      	lsrs	r3, r3, #18
 800321c:	3301      	adds	r3, #1
 800321e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003220:	e002      	b.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3b01      	subs	r3, #1
 8003226:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003234:	d102      	bne.n	800323c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f2      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003248:	d110      	bne.n	800326c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e00f      	b.n	800326e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325a:	d007      	beq.n	800326c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800325c:	4b07      	ldr	r3, [pc, #28]	; (800327c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003264:	4a05      	ldr	r2, [pc, #20]	; (800327c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800326a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40007000 	.word	0x40007000
 8003280:	20000000 	.word	0x20000000
 8003284:	431bde83 	.word	0x431bde83

08003288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e3d4      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329a:	4ba1      	ldr	r3, [pc, #644]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a4:	4b9e      	ldr	r3, [pc, #632]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80e4 	beq.w	8003484 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_RCC_OscConfig+0x4a>
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b0c      	cmp	r3, #12
 80032c6:	f040 808b 	bne.w	80033e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	f040 8087 	bne.w	80033e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032d2:	4b93      	ldr	r3, [pc, #588]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_RCC_OscConfig+0x62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e3ac      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1a      	ldr	r2, [r3, #32]
 80032ee:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <HAL_RCC_OscConfig+0x7c>
 80032fa:	4b89      	ldr	r3, [pc, #548]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003302:	e005      	b.n	8003310 <HAL_RCC_OscConfig+0x88>
 8003304:	4b86      	ldr	r3, [pc, #536]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003310:	4293      	cmp	r3, r2
 8003312:	d223      	bcs.n	800335c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fd41 	bl	8003da0 <RCC_SetFlashLatencyFromMSIRange>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e38d      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003328:	4b7d      	ldr	r3, [pc, #500]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a7c      	ldr	r2, [pc, #496]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 800332e:	f043 0308 	orr.w	r3, r3, #8
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b7a      	ldr	r3, [pc, #488]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4977      	ldr	r1, [pc, #476]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003346:	4b76      	ldr	r3, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	4972      	ldr	r1, [pc, #456]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
 800335a:	e025      	b.n	80033a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800335c:	4b70      	ldr	r3, [pc, #448]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6f      	ldr	r2, [pc, #444]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003362:	f043 0308 	orr.w	r3, r3, #8
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b6d      	ldr	r3, [pc, #436]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	496a      	ldr	r1, [pc, #424]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800337a:	4b69      	ldr	r3, [pc, #420]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	4965      	ldr	r1, [pc, #404]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fd01 	bl	8003da0 <RCC_SetFlashLatencyFromMSIRange>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e34d      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033a8:	f000 fc36 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b5c      	ldr	r3, [pc, #368]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	495a      	ldr	r1, [pc, #360]	; (8003524 <HAL_RCC_OscConfig+0x29c>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
 80033c4:	4a58      	ldr	r2, [pc, #352]	; (8003528 <HAL_RCC_OscConfig+0x2a0>)
 80033c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033c8:	4b58      	ldr	r3, [pc, #352]	; (800352c <HAL_RCC_OscConfig+0x2a4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fe61 	bl	8001094 <HAL_InitTick>
 80033d2:	4603      	mov	r3, r0
 80033d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d052      	beq.n	8003482 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	e331      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d032      	beq.n	800344e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033e8:	4b4d      	ldr	r3, [pc, #308]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a4c      	ldr	r2, [pc, #304]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033f4:	f7fd fe9e 	bl	8001134 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033fc:	f7fd fe9a 	bl	8001134 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e31a      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800340e:	4b44      	ldr	r3, [pc, #272]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800341a:	4b41      	ldr	r3, [pc, #260]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a40      	ldr	r2, [pc, #256]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003420:	f043 0308 	orr.w	r3, r3, #8
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	493b      	ldr	r1, [pc, #236]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003438:	4b39      	ldr	r3, [pc, #228]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	4936      	ldr	r1, [pc, #216]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
 800344c:	e01a      	b.n	8003484 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800344e:	4b34      	ldr	r3, [pc, #208]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a33      	ldr	r2, [pc, #204]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800345a:	f7fd fe6b 	bl	8001134 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003462:	f7fd fe67 	bl	8001134 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e2e7      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x1da>
 8003480:	e000      	b.n	8003484 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003482:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d074      	beq.n	800357a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b08      	cmp	r3, #8
 8003494:	d005      	beq.n	80034a2 <HAL_RCC_OscConfig+0x21a>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b0c      	cmp	r3, #12
 800349a:	d10e      	bne.n	80034ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d10b      	bne.n	80034ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d064      	beq.n	8003578 <HAL_RCC_OscConfig+0x2f0>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d160      	bne.n	8003578 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e2c4      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x24a>
 80034c4:	4b16      	ldr	r3, [pc, #88]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a15      	ldr	r2, [pc, #84]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e01d      	b.n	800350e <HAL_RCC_OscConfig+0x286>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034da:	d10c      	bne.n	80034f6 <HAL_RCC_OscConfig+0x26e>
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0f      	ldr	r2, [pc, #60]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80034e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0c      	ldr	r2, [pc, #48]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80034ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	e00b      	b.n	800350e <HAL_RCC_OscConfig+0x286>
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a09      	ldr	r2, [pc, #36]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 80034fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a06      	ldr	r2, [pc, #24]	; (8003520 <HAL_RCC_OscConfig+0x298>)
 8003508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01c      	beq.n	8003550 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003516:	f7fd fe0d 	bl	8001134 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800351c:	e011      	b.n	8003542 <HAL_RCC_OscConfig+0x2ba>
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	08007960 	.word	0x08007960
 8003528:	20000000 	.word	0x20000000
 800352c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7fd fe00 	bl	8001134 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e280      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003542:	4baf      	ldr	r3, [pc, #700]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x2a8>
 800354e:	e014      	b.n	800357a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fd fdf0 	bl	8001134 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003558:	f7fd fdec 	bl	8001134 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e26c      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800356a:	4ba5      	ldr	r3, [pc, #660]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x2d0>
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d060      	beq.n	8003648 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b04      	cmp	r3, #4
 800358a:	d005      	beq.n	8003598 <HAL_RCC_OscConfig+0x310>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b0c      	cmp	r3, #12
 8003590:	d119      	bne.n	80035c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d116      	bne.n	80035c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003598:	4b99      	ldr	r3, [pc, #612]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_OscConfig+0x328>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e249      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	4b93      	ldr	r3, [pc, #588]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	4990      	ldr	r1, [pc, #576]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c4:	e040      	b.n	8003648 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d023      	beq.n	8003616 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ce:	4b8c      	ldr	r3, [pc, #560]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a8b      	ldr	r2, [pc, #556]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80035d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fd fdab 	bl	8001134 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e2:	f7fd fda7 	bl	8001134 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e227      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f4:	4b82      	ldr	r3, [pc, #520]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003600:	4b7f      	ldr	r3, [pc, #508]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	497c      	ldr	r1, [pc, #496]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
 8003614:	e018      	b.n	8003648 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003616:	4b7a      	ldr	r3, [pc, #488]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a79      	ldr	r2, [pc, #484]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 800361c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fd fd87 	bl	8001134 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362a:	f7fd fd83 	bl	8001134 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e203      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800363c:	4b70      	ldr	r3, [pc, #448]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d03c      	beq.n	80036ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01c      	beq.n	8003696 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365c:	4b68      	ldr	r3, [pc, #416]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 800365e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003662:	4a67      	ldr	r2, [pc, #412]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fd fd62 	bl	8001134 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003674:	f7fd fd5e 	bl	8001134 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1de      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003686:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ef      	beq.n	8003674 <HAL_RCC_OscConfig+0x3ec>
 8003694:	e01b      	b.n	80036ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003696:	4b5a      	ldr	r3, [pc, #360]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369c:	4a58      	ldr	r2, [pc, #352]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fd fd45 	bl	8001134 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ae:	f7fd fd41 	bl	8001134 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e1c1      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036c0:	4b4f      	ldr	r3, [pc, #316]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80036c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ef      	bne.n	80036ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80a6 	beq.w	8003828 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036dc:	2300      	movs	r3, #0
 80036de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036e0:	4b47      	ldr	r3, [pc, #284]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10d      	bne.n	8003708 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ec:	4b44      	ldr	r3, [pc, #272]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	4a43      	ldr	r2, [pc, #268]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80036f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6593      	str	r3, [r2, #88]	; 0x58
 80036f8:	4b41      	ldr	r3, [pc, #260]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003704:	2301      	movs	r3, #1
 8003706:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003708:	4b3e      	ldr	r3, [pc, #248]	; (8003804 <HAL_RCC_OscConfig+0x57c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d118      	bne.n	8003746 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003714:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <HAL_RCC_OscConfig+0x57c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3a      	ldr	r2, [pc, #232]	; (8003804 <HAL_RCC_OscConfig+0x57c>)
 800371a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003720:	f7fd fd08 	bl	8001134 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003728:	f7fd fd04 	bl	8001134 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e184      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800373a:	4b32      	ldr	r3, [pc, #200]	; (8003804 <HAL_RCC_OscConfig+0x57c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d108      	bne.n	8003760 <HAL_RCC_OscConfig+0x4d8>
 800374e:	4b2c      	ldr	r3, [pc, #176]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800375e:	e024      	b.n	80037aa <HAL_RCC_OscConfig+0x522>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b05      	cmp	r3, #5
 8003766:	d110      	bne.n	800378a <HAL_RCC_OscConfig+0x502>
 8003768:	4b25      	ldr	r3, [pc, #148]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	4a24      	ldr	r2, [pc, #144]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	4a20      	ldr	r2, [pc, #128]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003788:	e00f      	b.n	80037aa <HAL_RCC_OscConfig+0x522>
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800379a:	4b19      	ldr	r3, [pc, #100]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	4a17      	ldr	r2, [pc, #92]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80037a2:	f023 0304 	bic.w	r3, r3, #4
 80037a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d016      	beq.n	80037e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fd fcbf 	bl	8001134 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fd fcbb 	bl	8001134 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e139      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCC_OscConfig+0x578>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ed      	beq.n	80037ba <HAL_RCC_OscConfig+0x532>
 80037de:	e01a      	b.n	8003816 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fd fca8 	bl	8001134 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e6:	e00f      	b.n	8003808 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fd fca4 	bl	8001134 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d906      	bls.n	8003808 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e122      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003808:	4b90      	ldr	r3, [pc, #576]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e8      	bne.n	80037e8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003816:	7ffb      	ldrb	r3, [r7, #31]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381c:	4b8b      	ldr	r3, [pc, #556]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	4a8a      	ldr	r2, [pc, #552]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 8003822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003826:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8108 	beq.w	8003a42 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	2b02      	cmp	r3, #2
 8003838:	f040 80d0 	bne.w	80039dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800383c:	4b83      	ldr	r3, [pc, #524]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	429a      	cmp	r2, r3
 800384e:	d130      	bne.n	80038b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	3b01      	subs	r3, #1
 800385c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d127      	bne.n	80038b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d11f      	bne.n	80038b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800387c:	2a07      	cmp	r2, #7
 800387e:	bf14      	ite	ne
 8003880:	2201      	movne	r2, #1
 8003882:	2200      	moveq	r2, #0
 8003884:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003886:	4293      	cmp	r3, r2
 8003888:	d113      	bne.n	80038b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	3b01      	subs	r3, #1
 8003898:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	3b01      	subs	r3, #1
 80038ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d06e      	beq.n	8003990 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d069      	beq.n	800398c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038b8:	4b64      	ldr	r3, [pc, #400]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038c4:	4b61      	ldr	r3, [pc, #388]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0b7      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038d4:	4b5d      	ldr	r3, [pc, #372]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80038da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038e0:	f7fd fc28 	bl	8001134 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fd fc24 	bl	8001134 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e0a4      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fa:	4b54      	ldr	r3, [pc, #336]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003906:	4b51      	ldr	r3, [pc, #324]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	4b51      	ldr	r3, [pc, #324]	; (8003a50 <HAL_RCC_OscConfig+0x7c8>)
 800390c:	4013      	ands	r3, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003916:	3a01      	subs	r2, #1
 8003918:	0112      	lsls	r2, r2, #4
 800391a:	4311      	orrs	r1, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003920:	0212      	lsls	r2, r2, #8
 8003922:	4311      	orrs	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003928:	0852      	lsrs	r2, r2, #1
 800392a:	3a01      	subs	r2, #1
 800392c:	0552      	lsls	r2, r2, #21
 800392e:	4311      	orrs	r1, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003934:	0852      	lsrs	r2, r2, #1
 8003936:	3a01      	subs	r2, #1
 8003938:	0652      	lsls	r2, r2, #25
 800393a:	4311      	orrs	r1, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003940:	0912      	lsrs	r2, r2, #4
 8003942:	0452      	lsls	r2, r2, #17
 8003944:	430a      	orrs	r2, r1
 8003946:	4941      	ldr	r1, [pc, #260]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 8003948:	4313      	orrs	r3, r2
 800394a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800394c:	4b3f      	ldr	r3, [pc, #252]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3e      	ldr	r2, [pc, #248]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 8003952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003956:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003958:	4b3c      	ldr	r3, [pc, #240]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a3b      	ldr	r2, [pc, #236]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 800395e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003962:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003964:	f7fd fbe6 	bl	8001134 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fd fbe2 	bl	8001134 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e062      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397e:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800398a:	e05a      	b.n	8003a42 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e059      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003990:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d152      	bne.n	8003a42 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2a      	ldr	r2, [pc, #168]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80039a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4a27      	ldr	r2, [pc, #156]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80039ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039b4:	f7fd fbbe 	bl	8001134 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd fbba 	bl	8001134 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e03a      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ce:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x734>
 80039da:	e032      	b.n	8003a42 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d02d      	beq.n	8003a3e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80039e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 8003a00:	f023 0303 	bic.w	r3, r3, #3
 8003a04:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 8003a0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a16:	f7fd fb8d 	bl	8001134 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7fd fb89 	bl	8001134 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e009      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCC_OscConfig+0x7c4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f0      	bne.n	8003a1e <HAL_RCC_OscConfig+0x796>
 8003a3c:	e001      	b.n	8003a42 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	f99d808c 	.word	0xf99d808c

08003a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0c8      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a68:	4b66      	ldr	r3, [pc, #408]	; (8003c04 <HAL_RCC_ClockConfig+0x1b0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d910      	bls.n	8003a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <HAL_RCC_ClockConfig+0x1b0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 0207 	bic.w	r2, r3, #7
 8003a7e:	4961      	ldr	r1, [pc, #388]	; (8003c04 <HAL_RCC_ClockConfig+0x1b0>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b5f      	ldr	r3, [pc, #380]	; (8003c04 <HAL_RCC_ClockConfig+0x1b0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0b0      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d04c      	beq.n	8003b3e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aac:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d121      	bne.n	8003afc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e09e      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac4:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d115      	bne.n	8003afc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e092      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003adc:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e086      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aec:	4b46      	ldr	r3, [pc, #280]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e07e      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003afc:	4b42      	ldr	r3, [pc, #264]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 0203 	bic.w	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	493f      	ldr	r1, [pc, #252]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0e:	f7fd fb11 	bl	8001134 <HAL_GetTick>
 8003b12:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b16:	f7fd fb0d 	bl	8001134 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e066      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2c:	4b36      	ldr	r3, [pc, #216]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 020c 	and.w	r2, r3, #12
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d1eb      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	492c      	ldr	r1, [pc, #176]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b29      	ldr	r3, [pc, #164]	; (8003c04 <HAL_RCC_ClockConfig+0x1b0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d210      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <HAL_RCC_ClockConfig+0x1b0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	4924      	ldr	r1, [pc, #144]	; (8003c04 <HAL_RCC_ClockConfig+0x1b0>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_RCC_ClockConfig+0x1b0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e036      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b98:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4918      	ldr	r1, [pc, #96]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb6:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4910      	ldr	r1, [pc, #64]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bca:	f000 f825 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <HAL_RCC_ClockConfig+0x1b4>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	490c      	ldr	r1, [pc, #48]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	5ccb      	ldrb	r3, [r1, r3]
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	fa22 f303 	lsr.w	r3, r2, r3
 8003be6:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd fa50 	bl	8001094 <HAL_InitTick>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bf8:	7afb      	ldrb	r3, [r7, #11]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40022000 	.word	0x40022000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	08007960 	.word	0x08007960
 8003c10:	20000000 	.word	0x20000000
 8003c14:	20000004 	.word	0x20000004

08003c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b089      	sub	sp, #36	; 0x24
 8003c1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c26:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c30:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x34>
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d121      	bne.n	8003c8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d11e      	bne.n	8003c8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c4c:	4b34      	ldr	r3, [pc, #208]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c58:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5e:	0a1b      	lsrs	r3, r3, #8
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	e005      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c68:	4b2d      	ldr	r3, [pc, #180]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c74:	4a2b      	ldr	r2, [pc, #172]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10d      	bne.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d102      	bne.n	8003c96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e004      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c9c:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8003c9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d134      	bne.n	8003d10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ca6:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d003      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0xa6>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d003      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xac>
 8003cbc:	e005      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cbe:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cc0:	617b      	str	r3, [r7, #20]
      break;
 8003cc2:	e005      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8003cc6:	617b      	str	r3, [r7, #20]
      break;
 8003cc8:	e002      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	617b      	str	r3, [r7, #20]
      break;
 8003cce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd0:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	3301      	adds	r3, #1
 8003cdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	fb02 f203 	mul.w	r2, r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	0e5b      	lsrs	r3, r3, #25
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	3301      	adds	r3, #1
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d10:	69bb      	ldr	r3, [r7, #24]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3724      	adds	r7, #36	; 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	08007978 	.word	0x08007978
 8003d28:	00f42400 	.word	0x00f42400
 8003d2c:	007a1200 	.word	0x007a1200

08003d30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000000 	.word	0x20000000

08003d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d4c:	f7ff fff0 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4904      	ldr	r1, [pc, #16]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	08007970 	.word	0x08007970

08003d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d78:	f7ff ffda 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	0adb      	lsrs	r3, r3, #11
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	4904      	ldr	r1, [pc, #16]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d8a:	5ccb      	ldrb	r3, [r1, r3]
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	08007970 	.word	0x08007970

08003da0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dac:	4b2a      	ldr	r3, [pc, #168]	; (8003e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003db8:	f7ff fa02 	bl	80031c0 <HAL_PWREx_GetVoltageRange>
 8003dbc:	6178      	str	r0, [r7, #20]
 8003dbe:	e014      	b.n	8003dea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	4a24      	ldr	r2, [pc, #144]	; (8003e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dca:	6593      	str	r3, [r2, #88]	; 0x58
 8003dcc:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003dd8:	f7ff f9f2 	bl	80031c0 <HAL_PWREx_GetVoltageRange>
 8003ddc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003dde:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df0:	d10b      	bne.n	8003e0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b80      	cmp	r3, #128	; 0x80
 8003df6:	d919      	bls.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2ba0      	cmp	r3, #160	; 0xa0
 8003dfc:	d902      	bls.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dfe:	2302      	movs	r3, #2
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	e013      	b.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e04:	2301      	movs	r3, #1
 8003e06:	613b      	str	r3, [r7, #16]
 8003e08:	e010      	b.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b80      	cmp	r3, #128	; 0x80
 8003e0e:	d902      	bls.n	8003e16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e10:	2303      	movs	r3, #3
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	e00a      	b.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b80      	cmp	r3, #128	; 0x80
 8003e1a:	d102      	bne.n	8003e22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	e004      	b.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b70      	cmp	r3, #112	; 0x70
 8003e26:	d101      	bne.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e28:	2301      	movs	r3, #1
 8003e2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 0207 	bic.w	r2, r3, #7
 8003e34:	4909      	ldr	r1, [pc, #36]	; (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e3c:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d001      	beq.n	8003e4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40022000 	.word	0x40022000

08003e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e68:	2300      	movs	r3, #0
 8003e6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d041      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e84:	d02a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e8a:	d824      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e90:	d008      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e96:	d81e      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea0:	d010      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ea2:	e018      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ea4:	4b86      	ldr	r3, [pc, #536]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4a85      	ldr	r2, [pc, #532]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eb0:	e015      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fabb 	bl	8004434 <RCCEx_PLLSAI1_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ec2:	e00c      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3320      	adds	r3, #32
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fba6 	bl	800461c <RCCEx_PLLSAI2_Config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ed4:	e003      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	74fb      	strb	r3, [r7, #19]
      break;
 8003eda:	e000      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10b      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ee4:	4b76      	ldr	r3, [pc, #472]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef2:	4973      	ldr	r1, [pc, #460]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003efa:	e001      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d041      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f14:	d02a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f1a:	d824      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f20:	d008      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f26:	d81e      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f30:	d010      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f32:	e018      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f34:	4b62      	ldr	r3, [pc, #392]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a61      	ldr	r2, [pc, #388]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f40:	e015      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fa73 	bl	8004434 <RCCEx_PLLSAI1_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f52:	e00c      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3320      	adds	r3, #32
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fb5e 	bl	800461c <RCCEx_PLLSAI2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f64:	e003      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	74fb      	strb	r3, [r7, #19]
      break;
 8003f6a:	e000      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f6e:	7cfb      	ldrb	r3, [r7, #19]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10b      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f74:	4b52      	ldr	r3, [pc, #328]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f82:	494f      	ldr	r1, [pc, #316]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f8a:	e001      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80a0 	beq.w	80040de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb8:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	4a40      	ldr	r2, [pc, #256]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc4:	4b3e      	ldr	r3, [pc, #248]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd4:	4b3b      	ldr	r3, [pc, #236]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a3a      	ldr	r2, [pc, #232]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fe0:	f7fd f8a8 	bl	8001134 <HAL_GetTick>
 8003fe4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fe6:	e009      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe8:	f7fd f8a4 	bl	8001134 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d902      	bls.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	74fb      	strb	r3, [r7, #19]
        break;
 8003ffa:	e005      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ffc:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ef      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004008:	7cfb      	ldrb	r3, [r7, #19]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d15c      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800400e:	4b2c      	ldr	r3, [pc, #176]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004018:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d01f      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	429a      	cmp	r2, r3
 800402a:	d019      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800402c:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004036:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004038:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	4a20      	ldr	r2, [pc, #128]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004048:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d016      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fd f863 	bl	8001134 <HAL_GetTick>
 800406e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004070:	e00b      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fd f85f 	bl	8001134 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d902      	bls.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	74fb      	strb	r3, [r7, #19]
            break;
 8004088:	e006      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ec      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10c      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ae:	4904      	ldr	r1, [pc, #16]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040b6:	e009      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	74bb      	strb	r3, [r7, #18]
 80040bc:	e006      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040be:	bf00      	nop
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040cc:	7c7b      	ldrb	r3, [r7, #17]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d105      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d2:	4b9e      	ldr	r3, [pc, #632]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	4a9d      	ldr	r2, [pc, #628]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ea:	4b98      	ldr	r3, [pc, #608]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f023 0203 	bic.w	r2, r3, #3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	4994      	ldr	r1, [pc, #592]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800410c:	4b8f      	ldr	r3, [pc, #572]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f023 020c 	bic.w	r2, r3, #12
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	498c      	ldr	r1, [pc, #560]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800412e:	4b87      	ldr	r3, [pc, #540]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	4983      	ldr	r1, [pc, #524]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004150:	4b7e      	ldr	r3, [pc, #504]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	497b      	ldr	r1, [pc, #492]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004172:	4b76      	ldr	r3, [pc, #472]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004180:	4972      	ldr	r1, [pc, #456]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004194:	4b6d      	ldr	r3, [pc, #436]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a2:	496a      	ldr	r1, [pc, #424]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041b6:	4b65      	ldr	r3, [pc, #404]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	4961      	ldr	r1, [pc, #388]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041d8:	4b5c      	ldr	r3, [pc, #368]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e6:	4959      	ldr	r1, [pc, #356]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041fa:	4b54      	ldr	r3, [pc, #336]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004208:	4950      	ldr	r1, [pc, #320]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800421c:	4b4b      	ldr	r3, [pc, #300]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	4948      	ldr	r1, [pc, #288]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800423e:	4b43      	ldr	r3, [pc, #268]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	493f      	ldr	r1, [pc, #252]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d028      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004260:	4b3a      	ldr	r3, [pc, #232]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426e:	4937      	ldr	r1, [pc, #220]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800427a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427e:	d106      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004280:	4b32      	ldr	r3, [pc, #200]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a31      	ldr	r2, [pc, #196]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428a:	60d3      	str	r3, [r2, #12]
 800428c:	e011      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004296:	d10c      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	2101      	movs	r1, #1
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f8c8 	bl	8004434 <RCCEx_PLLSAI1_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042ae:	7cfb      	ldrb	r3, [r7, #19]
 80042b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d028      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042be:	4b23      	ldr	r3, [pc, #140]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	491f      	ldr	r1, [pc, #124]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042dc:	d106      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042de:	4b1b      	ldr	r3, [pc, #108]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e8:	60d3      	str	r3, [r2, #12]
 80042ea:	e011      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f4:	d10c      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3304      	adds	r3, #4
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f899 	bl	8004434 <RCCEx_PLLSAI1_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02b      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432a:	4908      	ldr	r1, [pc, #32]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800433a:	d109      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4a02      	ldr	r2, [pc, #8]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004346:	60d3      	str	r3, [r2, #12]
 8004348:	e014      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004358:	d10c      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3304      	adds	r3, #4
 800435e:	2101      	movs	r1, #1
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f867 	bl	8004434 <RCCEx_PLLSAI1_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d02f      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004380:	4b2b      	ldr	r3, [pc, #172]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438e:	4928      	ldr	r1, [pc, #160]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800439a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800439e:	d10d      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	2102      	movs	r1, #2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f844 	bl	8004434 <RCCEx_PLLSAI1_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d014      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043b6:	7cfb      	ldrb	r3, [r7, #19]
 80043b8:	74bb      	strb	r3, [r7, #18]
 80043ba:	e011      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3320      	adds	r3, #32
 80043ca:	2102      	movs	r1, #2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 f925 	bl	800461c <RCCEx_PLLSAI2_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043d6:	7cfb      	ldrb	r3, [r7, #19]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043ec:	4b10      	ldr	r3, [pc, #64]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043fa:	490d      	ldr	r1, [pc, #52]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441e:	4904      	ldr	r1, [pc, #16]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004426:	7cbb      	ldrb	r3, [r7, #18]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40021000 	.word	0x40021000

08004434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004442:	4b75      	ldr	r3, [pc, #468]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d018      	beq.n	8004480 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800444e:	4b72      	ldr	r3, [pc, #456]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0203 	and.w	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d10d      	bne.n	800447a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
       ||
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004466:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
       ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d047      	beq.n	800450a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
 800447e:	e044      	b.n	800450a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d018      	beq.n	80044ba <RCCEx_PLLSAI1_Config+0x86>
 8004488:	2b03      	cmp	r3, #3
 800448a:	d825      	bhi.n	80044d8 <RCCEx_PLLSAI1_Config+0xa4>
 800448c:	2b01      	cmp	r3, #1
 800448e:	d002      	beq.n	8004496 <RCCEx_PLLSAI1_Config+0x62>
 8004490:	2b02      	cmp	r3, #2
 8004492:	d009      	beq.n	80044a8 <RCCEx_PLLSAI1_Config+0x74>
 8004494:	e020      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004496:	4b60      	ldr	r3, [pc, #384]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11d      	bne.n	80044de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a6:	e01a      	b.n	80044de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044a8:	4b5b      	ldr	r3, [pc, #364]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d116      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b8:	e013      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ba:	4b57      	ldr	r3, [pc, #348]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044c6:	4b54      	ldr	r3, [pc, #336]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044d6:	e006      	b.n	80044e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      break;
 80044dc:	e004      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044de:	bf00      	nop
 80044e0:	e002      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044ee:	4b4a      	ldr	r3, [pc, #296]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	3b01      	subs	r3, #1
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	430b      	orrs	r3, r1
 8004504:	4944      	ldr	r1, [pc, #272]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004506:	4313      	orrs	r3, r2
 8004508:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d17d      	bne.n	800460c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004510:	4b41      	ldr	r3, [pc, #260]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a40      	ldr	r2, [pc, #256]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004516:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800451a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451c:	f7fc fe0a 	bl	8001134 <HAL_GetTick>
 8004520:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004522:	e009      	b.n	8004538 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004524:	f7fc fe06 	bl	8001134 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d902      	bls.n	8004538 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	73fb      	strb	r3, [r7, #15]
        break;
 8004536:	e005      	b.n	8004544 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004538:	4b37      	ldr	r3, [pc, #220]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ef      	bne.n	8004524 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d160      	bne.n	800460c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d111      	bne.n	8004574 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004550:	4b31      	ldr	r3, [pc, #196]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6892      	ldr	r2, [r2, #8]
 8004560:	0211      	lsls	r1, r2, #8
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68d2      	ldr	r2, [r2, #12]
 8004566:	0912      	lsrs	r2, r2, #4
 8004568:	0452      	lsls	r2, r2, #17
 800456a:	430a      	orrs	r2, r1
 800456c:	492a      	ldr	r1, [pc, #168]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456e:	4313      	orrs	r3, r2
 8004570:	610b      	str	r3, [r1, #16]
 8004572:	e027      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d112      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800457a:	4b27      	ldr	r3, [pc, #156]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004582:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6892      	ldr	r2, [r2, #8]
 800458a:	0211      	lsls	r1, r2, #8
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6912      	ldr	r2, [r2, #16]
 8004590:	0852      	lsrs	r2, r2, #1
 8004592:	3a01      	subs	r2, #1
 8004594:	0552      	lsls	r2, r2, #21
 8004596:	430a      	orrs	r2, r1
 8004598:	491f      	ldr	r1, [pc, #124]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459a:	4313      	orrs	r3, r2
 800459c:	610b      	str	r3, [r1, #16]
 800459e:	e011      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a0:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6892      	ldr	r2, [r2, #8]
 80045b0:	0211      	lsls	r1, r2, #8
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6952      	ldr	r2, [r2, #20]
 80045b6:	0852      	lsrs	r2, r2, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0652      	lsls	r2, r2, #25
 80045bc:	430a      	orrs	r2, r1
 80045be:	4916      	ldr	r1, [pc, #88]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a13      	ldr	r2, [pc, #76]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fc fdb0 	bl	8001134 <HAL_GetTick>
 80045d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d6:	e009      	b.n	80045ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d8:	f7fc fdac 	bl	8001134 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d902      	bls.n	80045ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	73fb      	strb	r3, [r7, #15]
          break;
 80045ea:	e005      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ef      	beq.n	80045d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	4904      	ldr	r1, [pc, #16]	; (8004618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004608:	4313      	orrs	r3, r2
 800460a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000

0800461c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800462a:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d018      	beq.n	8004668 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004636:	4b67      	ldr	r3, [pc, #412]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0203 	and.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d10d      	bne.n	8004662 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
       ||
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800464e:	4b61      	ldr	r3, [pc, #388]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
       ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d047      	beq.n	80046f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	e044      	b.n	80046f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d018      	beq.n	80046a2 <RCCEx_PLLSAI2_Config+0x86>
 8004670:	2b03      	cmp	r3, #3
 8004672:	d825      	bhi.n	80046c0 <RCCEx_PLLSAI2_Config+0xa4>
 8004674:	2b01      	cmp	r3, #1
 8004676:	d002      	beq.n	800467e <RCCEx_PLLSAI2_Config+0x62>
 8004678:	2b02      	cmp	r3, #2
 800467a:	d009      	beq.n	8004690 <RCCEx_PLLSAI2_Config+0x74>
 800467c:	e020      	b.n	80046c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800467e:	4b55      	ldr	r3, [pc, #340]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11d      	bne.n	80046c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800468e:	e01a      	b.n	80046c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004690:	4b50      	ldr	r3, [pc, #320]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004698:	2b00      	cmp	r3, #0
 800469a:	d116      	bne.n	80046ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a0:	e013      	b.n	80046ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046a2:	4b4c      	ldr	r3, [pc, #304]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046ae:	4b49      	ldr	r3, [pc, #292]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046be:	e006      	b.n	80046ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      break;
 80046c4:	e004      	b.n	80046d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046c6:	bf00      	nop
 80046c8:	e002      	b.n	80046d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10d      	bne.n	80046f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046d6:	4b3f      	ldr	r3, [pc, #252]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	430b      	orrs	r3, r1
 80046ec:	4939      	ldr	r1, [pc, #228]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d167      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046f8:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a35      	ldr	r2, [pc, #212]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004704:	f7fc fd16 	bl	8001134 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800470a:	e009      	b.n	8004720 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800470c:	f7fc fd12 	bl	8001134 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d902      	bls.n	8004720 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	73fb      	strb	r3, [r7, #15]
        break;
 800471e:	e005      	b.n	800472c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004720:	4b2c      	ldr	r3, [pc, #176]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ef      	bne.n	800470c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d14a      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d111      	bne.n	800475c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004738:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6892      	ldr	r2, [r2, #8]
 8004748:	0211      	lsls	r1, r2, #8
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68d2      	ldr	r2, [r2, #12]
 800474e:	0912      	lsrs	r2, r2, #4
 8004750:	0452      	lsls	r2, r2, #17
 8004752:	430a      	orrs	r2, r1
 8004754:	491f      	ldr	r1, [pc, #124]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004756:	4313      	orrs	r3, r2
 8004758:	614b      	str	r3, [r1, #20]
 800475a:	e011      	b.n	8004780 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800475c:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004764:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6892      	ldr	r2, [r2, #8]
 800476c:	0211      	lsls	r1, r2, #8
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6912      	ldr	r2, [r2, #16]
 8004772:	0852      	lsrs	r2, r2, #1
 8004774:	3a01      	subs	r2, #1
 8004776:	0652      	lsls	r2, r2, #25
 8004778:	430a      	orrs	r2, r1
 800477a:	4916      	ldr	r1, [pc, #88]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fc fcd2 	bl	8001134 <HAL_GetTick>
 8004790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004792:	e009      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004794:	f7fc fcce 	bl	8001134 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d902      	bls.n	80047a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	73fb      	strb	r3, [r7, #15]
          break;
 80047a6:	e005      	b.n	80047b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ef      	beq.n	8004794 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4904      	ldr	r1, [pc, #16]	; (80047d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000

080047d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e049      	b.n	800487e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fc fa1e 	bl	8000c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f000 fcc4 	bl	80051a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e049      	b.n	800492c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f841 	bl	8004934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f000 fc6d 	bl	80051a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d109      	bne.n	800496c <HAL_TIM_PWM_Start+0x24>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
 8004966:	2300      	moveq	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e03c      	b.n	80049e6 <HAL_TIM_PWM_Start+0x9e>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b04      	cmp	r3, #4
 8004970:	d109      	bne.n	8004986 <HAL_TIM_PWM_Start+0x3e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b01      	cmp	r3, #1
 800497c:	bf14      	ite	ne
 800497e:	2301      	movne	r3, #1
 8004980:	2300      	moveq	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	e02f      	b.n	80049e6 <HAL_TIM_PWM_Start+0x9e>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d109      	bne.n	80049a0 <HAL_TIM_PWM_Start+0x58>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e022      	b.n	80049e6 <HAL_TIM_PWM_Start+0x9e>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d109      	bne.n	80049ba <HAL_TIM_PWM_Start+0x72>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e015      	b.n	80049e6 <HAL_TIM_PWM_Start+0x9e>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d109      	bne.n	80049d4 <HAL_TIM_PWM_Start+0x8c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e008      	b.n	80049e6 <HAL_TIM_PWM_Start+0x9e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e09c      	b.n	8004b28 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Start+0xb6>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fc:	e023      	b.n	8004a46 <HAL_TIM_PWM_Start+0xfe>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start+0xc6>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0c:	e01b      	b.n	8004a46 <HAL_TIM_PWM_Start+0xfe>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_PWM_Start+0xd6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1c:	e013      	b.n	8004a46 <HAL_TIM_PWM_Start+0xfe>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	d104      	bne.n	8004a2e <HAL_TIM_PWM_Start+0xe6>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a2c:	e00b      	b.n	8004a46 <HAL_TIM_PWM_Start+0xfe>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b10      	cmp	r3, #16
 8004a32:	d104      	bne.n	8004a3e <HAL_TIM_PWM_Start+0xf6>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3c:	e003      	b.n	8004a46 <HAL_TIM_PWM_Start+0xfe>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 ffb2 	bl	80059b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a35      	ldr	r2, [pc, #212]	; (8004b30 <HAL_TIM_PWM_Start+0x1e8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_TIM_PWM_Start+0x13e>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a34      	ldr	r2, [pc, #208]	; (8004b34 <HAL_TIM_PWM_Start+0x1ec>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00e      	beq.n	8004a86 <HAL_TIM_PWM_Start+0x13e>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a32      	ldr	r2, [pc, #200]	; (8004b38 <HAL_TIM_PWM_Start+0x1f0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d009      	beq.n	8004a86 <HAL_TIM_PWM_Start+0x13e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a31      	ldr	r2, [pc, #196]	; (8004b3c <HAL_TIM_PWM_Start+0x1f4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_TIM_PWM_Start+0x13e>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <HAL_TIM_PWM_Start+0x1f8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d101      	bne.n	8004a8a <HAL_TIM_PWM_Start+0x142>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_TIM_PWM_Start+0x144>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a22      	ldr	r2, [pc, #136]	; (8004b30 <HAL_TIM_PWM_Start+0x1e8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d01d      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x19e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab2:	d018      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x19e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <HAL_TIM_PWM_Start+0x1fc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d013      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x19e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <HAL_TIM_PWM_Start+0x200>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x19e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <HAL_TIM_PWM_Start+0x204>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x19e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a17      	ldr	r2, [pc, #92]	; (8004b34 <HAL_TIM_PWM_Start+0x1ec>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d004      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x19e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <HAL_TIM_PWM_Start+0x1f0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d115      	bne.n	8004b12 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	4b18      	ldr	r3, [pc, #96]	; (8004b50 <HAL_TIM_PWM_Start+0x208>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b06      	cmp	r3, #6
 8004af6:	d015      	beq.n	8004b24 <HAL_TIM_PWM_Start+0x1dc>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afe:	d011      	beq.n	8004b24 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b10:	e008      	b.n	8004b24 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0201 	orr.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	e000      	b.n	8004b26 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40012c00 	.word	0x40012c00
 8004b34:	40013400 	.word	0x40013400
 8004b38:	40014000 	.word	0x40014000
 8004b3c:	40014400 	.word	0x40014400
 8004b40:	40014800 	.word	0x40014800
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	00010007 	.word	0x00010007

08004b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d122      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d11b      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0202 	mvn.w	r2, #2
 8004b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fae6 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 8004b9c:	e005      	b.n	8004baa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fad8 	bl	8005154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fae9 	bl	800517c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d122      	bne.n	8004c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d11b      	bne.n	8004c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0204 	mvn.w	r2, #4
 8004bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fabc 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 faae 	bl	8005154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fabf 	bl	800517c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d122      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0208 	mvn.w	r2, #8
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fa92 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa84 	bl	8005154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fa95 	bl	800517c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d122      	bne.n	8004cac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d11b      	bne.n	8004cac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0210 	mvn.w	r2, #16
 8004c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2208      	movs	r2, #8
 8004c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fa68 	bl	8005168 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fa5a 	bl	8005154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fa6b 	bl	800517c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10e      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d107      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0201 	mvn.w	r2, #1
 8004cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa34 	bl	8005140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b80      	cmp	r3, #128	; 0x80
 8004ce4:	d10e      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf0:	2b80      	cmp	r3, #128	; 0x80
 8004cf2:	d107      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 ff12 	bl	8005b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d12:	d10e      	bne.n	8004d32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1e:	2b80      	cmp	r3, #128	; 0x80
 8004d20:	d107      	bne.n	8004d32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 ff05 	bl	8005b3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d10e      	bne.n	8004d5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d107      	bne.n	8004d5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fa19 	bl	8005190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d10e      	bne.n	8004d8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d107      	bne.n	8004d8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f06f 0220 	mvn.w	r2, #32
 8004d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fec5 	bl	8005b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e0fd      	b.n	8004faa <HAL_TIM_PWM_ConfigChannel+0x216>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b14      	cmp	r3, #20
 8004dba:	f200 80f0 	bhi.w	8004f9e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004e19 	.word	0x08004e19
 8004dc8:	08004f9f 	.word	0x08004f9f
 8004dcc:	08004f9f 	.word	0x08004f9f
 8004dd0:	08004f9f 	.word	0x08004f9f
 8004dd4:	08004e59 	.word	0x08004e59
 8004dd8:	08004f9f 	.word	0x08004f9f
 8004ddc:	08004f9f 	.word	0x08004f9f
 8004de0:	08004f9f 	.word	0x08004f9f
 8004de4:	08004e9b 	.word	0x08004e9b
 8004de8:	08004f9f 	.word	0x08004f9f
 8004dec:	08004f9f 	.word	0x08004f9f
 8004df0:	08004f9f 	.word	0x08004f9f
 8004df4:	08004edb 	.word	0x08004edb
 8004df8:	08004f9f 	.word	0x08004f9f
 8004dfc:	08004f9f 	.word	0x08004f9f
 8004e00:	08004f9f 	.word	0x08004f9f
 8004e04:	08004f1d 	.word	0x08004f1d
 8004e08:	08004f9f 	.word	0x08004f9f
 8004e0c:	08004f9f 	.word	0x08004f9f
 8004e10:	08004f9f 	.word	0x08004f9f
 8004e14:	08004f5d 	.word	0x08004f5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa5a 	bl	80052d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0208 	orr.w	r2, r2, #8
 8004e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0204 	bic.w	r2, r2, #4
 8004e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	619a      	str	r2, [r3, #24]
      break;
 8004e56:	e0a3      	b.n	8004fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 faca 	bl	80053f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6999      	ldr	r1, [r3, #24]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	021a      	lsls	r2, r3, #8
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	619a      	str	r2, [r3, #24]
      break;
 8004e98:	e082      	b.n	8004fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fb33 	bl	800550c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0208 	orr.w	r2, r2, #8
 8004eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0204 	bic.w	r2, r2, #4
 8004ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69d9      	ldr	r1, [r3, #28]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	61da      	str	r2, [r3, #28]
      break;
 8004ed8:	e062      	b.n	8004fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fb9b 	bl	800561c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69d9      	ldr	r1, [r3, #28]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	021a      	lsls	r2, r3, #8
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	61da      	str	r2, [r3, #28]
      break;
 8004f1a:	e041      	b.n	8004fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fbe4 	bl	80056f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0208 	orr.w	r2, r2, #8
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0204 	bic.w	r2, r2, #4
 8004f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f5a:	e021      	b.n	8004fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fc28 	bl	80057b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	021a      	lsls	r2, r3, #8
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f9c:	e000      	b.n	8004fa0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004f9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop

08004fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIM_ConfigClockSource+0x18>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e0b5      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x184>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ff6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005008:	d03e      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0xd4>
 800500a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500e:	f200 8087 	bhi.w	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005016:	f000 8085 	beq.w	8005124 <HAL_TIM_ConfigClockSource+0x170>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	d87f      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b70      	cmp	r3, #112	; 0x70
 8005022:	d01a      	beq.n	800505a <HAL_TIM_ConfigClockSource+0xa6>
 8005024:	2b70      	cmp	r3, #112	; 0x70
 8005026:	d87b      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b60      	cmp	r3, #96	; 0x60
 800502a:	d050      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x11a>
 800502c:	2b60      	cmp	r3, #96	; 0x60
 800502e:	d877      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005030:	2b50      	cmp	r3, #80	; 0x50
 8005032:	d03c      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0xfa>
 8005034:	2b50      	cmp	r3, #80	; 0x50
 8005036:	d873      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b40      	cmp	r3, #64	; 0x40
 800503a:	d058      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x13a>
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d86f      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b30      	cmp	r3, #48	; 0x30
 8005042:	d064      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15a>
 8005044:	2b30      	cmp	r3, #48	; 0x30
 8005046:	d86b      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b20      	cmp	r3, #32
 800504a:	d060      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15a>
 800504c:	2b20      	cmp	r3, #32
 800504e:	d867      	bhi.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d05c      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15a>
 8005054:	2b10      	cmp	r3, #16
 8005056:	d05a      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005058:	e062      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6899      	ldr	r1, [r3, #8]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f000 fc85 	bl	8005978 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800507c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	609a      	str	r2, [r3, #8]
      break;
 8005086:	e04e      	b.n	8005126 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6899      	ldr	r1, [r3, #8]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f000 fc6e 	bl	8005978 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050aa:	609a      	str	r2, [r3, #8]
      break;
 80050ac:	e03b      	b.n	8005126 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f000 fbe2 	bl	8005884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2150      	movs	r1, #80	; 0x50
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fc3b 	bl	8005942 <TIM_ITRx_SetConfig>
      break;
 80050cc:	e02b      	b.n	8005126 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 fc01 	bl	80058e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2160      	movs	r1, #96	; 0x60
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fc2b 	bl	8005942 <TIM_ITRx_SetConfig>
      break;
 80050ec:	e01b      	b.n	8005126 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 fbc2 	bl	8005884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2140      	movs	r1, #64	; 0x40
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fc1b 	bl	8005942 <TIM_ITRx_SetConfig>
      break;
 800510c:	e00b      	b.n	8005126 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f000 fc12 	bl	8005942 <TIM_ITRx_SetConfig>
        break;
 800511e:	e002      	b.n	8005126 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005120:	bf00      	nop
 8005122:	e000      	b.n	8005126 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005124:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a40      	ldr	r2, [pc, #256]	; (80052b8 <TIM_Base_SetConfig+0x114>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c2:	d00f      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a3d      	ldr	r2, [pc, #244]	; (80052bc <TIM_Base_SetConfig+0x118>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a3c      	ldr	r2, [pc, #240]	; (80052c0 <TIM_Base_SetConfig+0x11c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3b      	ldr	r2, [pc, #236]	; (80052c4 <TIM_Base_SetConfig+0x120>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3a      	ldr	r2, [pc, #232]	; (80052c8 <TIM_Base_SetConfig+0x124>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2f      	ldr	r2, [pc, #188]	; (80052b8 <TIM_Base_SetConfig+0x114>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01f      	beq.n	800523e <TIM_Base_SetConfig+0x9a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d01b      	beq.n	800523e <TIM_Base_SetConfig+0x9a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2c      	ldr	r2, [pc, #176]	; (80052bc <TIM_Base_SetConfig+0x118>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d017      	beq.n	800523e <TIM_Base_SetConfig+0x9a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2b      	ldr	r2, [pc, #172]	; (80052c0 <TIM_Base_SetConfig+0x11c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <TIM_Base_SetConfig+0x9a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2a      	ldr	r2, [pc, #168]	; (80052c4 <TIM_Base_SetConfig+0x120>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00f      	beq.n	800523e <TIM_Base_SetConfig+0x9a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a29      	ldr	r2, [pc, #164]	; (80052c8 <TIM_Base_SetConfig+0x124>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00b      	beq.n	800523e <TIM_Base_SetConfig+0x9a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a28      	ldr	r2, [pc, #160]	; (80052cc <TIM_Base_SetConfig+0x128>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d007      	beq.n	800523e <TIM_Base_SetConfig+0x9a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <TIM_Base_SetConfig+0x12c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_Base_SetConfig+0x9a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <TIM_Base_SetConfig+0x130>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d108      	bne.n	8005250 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a10      	ldr	r2, [pc, #64]	; (80052b8 <TIM_Base_SetConfig+0x114>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00f      	beq.n	800529c <TIM_Base_SetConfig+0xf8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <TIM_Base_SetConfig+0x124>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00b      	beq.n	800529c <TIM_Base_SetConfig+0xf8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a11      	ldr	r2, [pc, #68]	; (80052cc <TIM_Base_SetConfig+0x128>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d007      	beq.n	800529c <TIM_Base_SetConfig+0xf8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a10      	ldr	r2, [pc, #64]	; (80052d0 <TIM_Base_SetConfig+0x12c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_Base_SetConfig+0xf8>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a0f      	ldr	r2, [pc, #60]	; (80052d4 <TIM_Base_SetConfig+0x130>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d103      	bne.n	80052a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	615a      	str	r2, [r3, #20]
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40013400 	.word	0x40013400
 80052cc:	40014000 	.word	0x40014000
 80052d0:	40014400 	.word	0x40014400
 80052d4:	40014800 	.word	0x40014800

080052d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0303 	bic.w	r3, r3, #3
 8005312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f023 0302 	bic.w	r3, r3, #2
 8005324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a2c      	ldr	r2, [pc, #176]	; (80053e4 <TIM_OC1_SetConfig+0x10c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00f      	beq.n	8005358 <TIM_OC1_SetConfig+0x80>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a2b      	ldr	r2, [pc, #172]	; (80053e8 <TIM_OC1_SetConfig+0x110>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00b      	beq.n	8005358 <TIM_OC1_SetConfig+0x80>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a2a      	ldr	r2, [pc, #168]	; (80053ec <TIM_OC1_SetConfig+0x114>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d007      	beq.n	8005358 <TIM_OC1_SetConfig+0x80>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a29      	ldr	r2, [pc, #164]	; (80053f0 <TIM_OC1_SetConfig+0x118>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_OC1_SetConfig+0x80>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a28      	ldr	r2, [pc, #160]	; (80053f4 <TIM_OC1_SetConfig+0x11c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d10c      	bne.n	8005372 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 0308 	bic.w	r3, r3, #8
 800535e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 0304 	bic.w	r3, r3, #4
 8005370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1b      	ldr	r2, [pc, #108]	; (80053e4 <TIM_OC1_SetConfig+0x10c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00f      	beq.n	800539a <TIM_OC1_SetConfig+0xc2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a1a      	ldr	r2, [pc, #104]	; (80053e8 <TIM_OC1_SetConfig+0x110>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00b      	beq.n	800539a <TIM_OC1_SetConfig+0xc2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a19      	ldr	r2, [pc, #100]	; (80053ec <TIM_OC1_SetConfig+0x114>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d007      	beq.n	800539a <TIM_OC1_SetConfig+0xc2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <TIM_OC1_SetConfig+0x118>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d003      	beq.n	800539a <TIM_OC1_SetConfig+0xc2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a17      	ldr	r2, [pc, #92]	; (80053f4 <TIM_OC1_SetConfig+0x11c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d111      	bne.n	80053be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	621a      	str	r2, [r3, #32]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40013400 	.word	0x40013400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800

080053f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f023 0210 	bic.w	r2, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f023 0320 	bic.w	r3, r3, #32
 8005446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a28      	ldr	r2, [pc, #160]	; (80054f8 <TIM_OC2_SetConfig+0x100>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_OC2_SetConfig+0x6c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a27      	ldr	r2, [pc, #156]	; (80054fc <TIM_OC2_SetConfig+0x104>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d10d      	bne.n	8005480 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <TIM_OC2_SetConfig+0x100>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00f      	beq.n	80054a8 <TIM_OC2_SetConfig+0xb0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <TIM_OC2_SetConfig+0x104>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <TIM_OC2_SetConfig+0xb0>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <TIM_OC2_SetConfig+0x108>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_OC2_SetConfig+0xb0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <TIM_OC2_SetConfig+0x10c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_OC2_SetConfig+0xb0>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a19      	ldr	r2, [pc, #100]	; (8005508 <TIM_OC2_SetConfig+0x110>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d113      	bne.n	80054d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40013400 	.word	0x40013400
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800

0800550c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a27      	ldr	r2, [pc, #156]	; (8005608 <TIM_OC3_SetConfig+0xfc>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d003      	beq.n	8005576 <TIM_OC3_SetConfig+0x6a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a26      	ldr	r2, [pc, #152]	; (800560c <TIM_OC3_SetConfig+0x100>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d10d      	bne.n	8005592 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800557c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <TIM_OC3_SetConfig+0xfc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00f      	beq.n	80055ba <TIM_OC3_SetConfig+0xae>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a1b      	ldr	r2, [pc, #108]	; (800560c <TIM_OC3_SetConfig+0x100>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00b      	beq.n	80055ba <TIM_OC3_SetConfig+0xae>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <TIM_OC3_SetConfig+0x104>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <TIM_OC3_SetConfig+0xae>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a19      	ldr	r2, [pc, #100]	; (8005614 <TIM_OC3_SetConfig+0x108>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d003      	beq.n	80055ba <TIM_OC3_SetConfig+0xae>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <TIM_OC3_SetConfig+0x10c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d113      	bne.n	80055e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	621a      	str	r2, [r3, #32]
}
 80055fc:	bf00      	nop
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	40012c00 	.word	0x40012c00
 800560c:	40013400 	.word	0x40013400
 8005610:	40014000 	.word	0x40014000
 8005614:	40014400 	.word	0x40014400
 8005618:	40014800 	.word	0x40014800

0800561c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800564a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800566a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	031b      	lsls	r3, r3, #12
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a18      	ldr	r2, [pc, #96]	; (80056dc <TIM_OC4_SetConfig+0xc0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00f      	beq.n	80056a0 <TIM_OC4_SetConfig+0x84>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a17      	ldr	r2, [pc, #92]	; (80056e0 <TIM_OC4_SetConfig+0xc4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00b      	beq.n	80056a0 <TIM_OC4_SetConfig+0x84>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a16      	ldr	r2, [pc, #88]	; (80056e4 <TIM_OC4_SetConfig+0xc8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_OC4_SetConfig+0x84>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a15      	ldr	r2, [pc, #84]	; (80056e8 <TIM_OC4_SetConfig+0xcc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_OC4_SetConfig+0x84>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a14      	ldr	r2, [pc, #80]	; (80056ec <TIM_OC4_SetConfig+0xd0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d109      	bne.n	80056b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	019b      	lsls	r3, r3, #6
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40012c00 	.word	0x40012c00
 80056e0:	40013400 	.word	0x40013400
 80056e4:	40014000 	.word	0x40014000
 80056e8:	40014400 	.word	0x40014400
 80056ec:	40014800 	.word	0x40014800

080056f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005734:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	041b      	lsls	r3, r3, #16
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a17      	ldr	r2, [pc, #92]	; (80057a4 <TIM_OC5_SetConfig+0xb4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00f      	beq.n	800576a <TIM_OC5_SetConfig+0x7a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <TIM_OC5_SetConfig+0xb8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00b      	beq.n	800576a <TIM_OC5_SetConfig+0x7a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a15      	ldr	r2, [pc, #84]	; (80057ac <TIM_OC5_SetConfig+0xbc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <TIM_OC5_SetConfig+0x7a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <TIM_OC5_SetConfig+0xc0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_OC5_SetConfig+0x7a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <TIM_OC5_SetConfig+0xc4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d109      	bne.n	800577e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005770:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	621a      	str	r2, [r3, #32]
}
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	40012c00 	.word	0x40012c00
 80057a8:	40013400 	.word	0x40013400
 80057ac:	40014000 	.word	0x40014000
 80057b0:	40014400 	.word	0x40014400
 80057b4:	40014800 	.word	0x40014800

080057b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	051b      	lsls	r3, r3, #20
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a18      	ldr	r2, [pc, #96]	; (8005870 <TIM_OC6_SetConfig+0xb8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00f      	beq.n	8005834 <TIM_OC6_SetConfig+0x7c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a17      	ldr	r2, [pc, #92]	; (8005874 <TIM_OC6_SetConfig+0xbc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00b      	beq.n	8005834 <TIM_OC6_SetConfig+0x7c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a16      	ldr	r2, [pc, #88]	; (8005878 <TIM_OC6_SetConfig+0xc0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d007      	beq.n	8005834 <TIM_OC6_SetConfig+0x7c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a15      	ldr	r2, [pc, #84]	; (800587c <TIM_OC6_SetConfig+0xc4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_OC6_SetConfig+0x7c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a14      	ldr	r2, [pc, #80]	; (8005880 <TIM_OC6_SetConfig+0xc8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d109      	bne.n	8005848 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800583a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	029b      	lsls	r3, r3, #10
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40013400 	.word	0x40013400
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800

08005884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f023 0201 	bic.w	r2, r3, #1
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f023 030a 	bic.w	r3, r3, #10
 80058c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b087      	sub	sp, #28
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f023 0210 	bic.w	r2, r3, #16
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800590c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	031b      	lsls	r3, r3, #12
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800591e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	f043 0307 	orr.w	r3, r3, #7
 8005964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	021a      	lsls	r2, r3, #8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	431a      	orrs	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4313      	orrs	r3, r2
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	609a      	str	r2, [r3, #8]
}
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	2201      	movs	r2, #1
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a1a      	ldr	r2, [r3, #32]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	43db      	mvns	r3, r3
 80059da:	401a      	ands	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a1a      	ldr	r2, [r3, #32]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	431a      	orrs	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e068      	b.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2e      	ldr	r2, [pc, #184]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2d      	ldr	r2, [pc, #180]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d108      	bne.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1e      	ldr	r2, [pc, #120]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01d      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d018      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d013      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1a      	ldr	r2, [pc, #104]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d009      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a13      	ldr	r2, [pc, #76]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d004      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a14      	ldr	r2, [pc, #80]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d10c      	bne.n	8005adc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40013400 	.word	0x40013400
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40014000 	.word	0x40014000

08005b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e040      	b.n	8005be4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fb f8c2 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2224      	movs	r2, #36	; 0x24
 8005b7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fae2 	bl	8006158 <UART_SetConfig>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e022      	b.n	8005be4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fd60 	bl	800666c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fde7 	bl	80067b0 <UART_CheckIdleState>
 8005be2:	4603      	mov	r3, r0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08a      	sub	sp, #40	; 0x28
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c00:	2b20      	cmp	r3, #32
 8005c02:	f040 8082 	bne.w	8005d0a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_UART_Transmit+0x26>
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e07a      	b.n	8005d0c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_UART_Transmit+0x38>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e073      	b.n	8005d0c <HAL_UART_Transmit+0x120>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2221      	movs	r2, #33	; 0x21
 8005c38:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c3a:	f7fb fa7b 	bl	8001134 <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	88fa      	ldrh	r2, [r7, #6]
 8005c44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c58:	d108      	bne.n	8005c6c <HAL_UART_Transmit+0x80>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	e003      	b.n	8005c74 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005c7c:	e02d      	b.n	8005cda <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2200      	movs	r2, #0
 8005c86:	2180      	movs	r1, #128	; 0x80
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fdda 	bl	8006842 <UART_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e039      	b.n	8005d0c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10b      	bne.n	8005cb6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	881a      	ldrh	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005caa:	b292      	uxth	r2, r2
 8005cac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	e008      	b.n	8005cc8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	781a      	ldrb	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	b292      	uxth	r2, r2
 8005cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1cb      	bne.n	8005c7e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2200      	movs	r2, #0
 8005cee:	2140      	movs	r1, #64	; 0x40
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fda6 	bl	8006842 <UART_WaitOnFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e005      	b.n	8005d0c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	e000      	b.n	8005d0c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005d0a:	2302      	movs	r3, #2
  }
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3720      	adds	r7, #32
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d113      	bne.n	8005d6c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00e      	beq.n	8005d6c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f003 0320 	and.w	r3, r3, #32
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 81ce 	beq.w	80060fe <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	4798      	blx	r3
      }
      return;
 8005d6a:	e1c8      	b.n	80060fe <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 80e3 	beq.w	8005f3a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d105      	bne.n	8005d8a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4ba6      	ldr	r3, [pc, #664]	; (800601c <HAL_UART_IRQHandler+0x308>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80d8 	beq.w	8005f3a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d010      	beq.n	8005db6 <HAL_UART_IRQHandler+0xa2>
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2201      	movs	r2, #1
 8005da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dac:	f043 0201 	orr.w	r2, r3, #1
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d010      	beq.n	8005de2 <HAL_UART_IRQHandler+0xce>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd8:	f043 0204 	orr.w	r2, r3, #4
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d010      	beq.n	8005e0e <HAL_UART_IRQHandler+0xfa>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00b      	beq.n	8005e0e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e04:	f043 0202 	orr.w	r2, r3, #2
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d015      	beq.n	8005e44 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d104      	bne.n	8005e2c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2208      	movs	r2, #8
 8005e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e3a:	f043 0208 	orr.w	r2, r3, #8
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d011      	beq.n	8005e72 <HAL_UART_IRQHandler+0x15e>
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00c      	beq.n	8005e72 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e68:	f043 0220 	orr.w	r2, r3, #32
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8142 	beq.w	8006102 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00c      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ea8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b40      	cmp	r3, #64	; 0x40
 8005eb6:	d004      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d031      	beq.n	8005f26 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fd39 	bl	800693a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	d123      	bne.n	8005f1e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d013      	beq.n	8005f16 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	4a4b      	ldr	r2, [pc, #300]	; (8006020 <HAL_UART_IRQHandler+0x30c>)
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fc fe7e 	bl	8002bfc <HAL_DMA_Abort_IT>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d017      	beq.n	8005f36 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005f10:	4610      	mov	r0, r2
 8005f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	e00f      	b.n	8005f36 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f908 	bl	800612c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	e00b      	b.n	8005f36 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f904 	bl	800612c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f24:	e007      	b.n	8005f36 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f900 	bl	800612c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005f34:	e0e5      	b.n	8006102 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f36:	bf00      	nop
    return;
 8005f38:	e0e3      	b.n	8006102 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	f040 80a9 	bne.w	8006096 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80a3 	beq.w	8006096 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 809d 	beq.w	8006096 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2210      	movs	r2, #16
 8005f62:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6e:	2b40      	cmp	r3, #64	; 0x40
 8005f70:	d158      	bne.n	8006024 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005f7c:	893b      	ldrh	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80c1 	beq.w	8006106 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f8a:	893a      	ldrh	r2, [r7, #8]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	f080 80ba 	bcs.w	8006106 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	893a      	ldrh	r2, [r7, #8]
 8005f96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d12a      	bne.n	8006000 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fb8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 0201 	bic.w	r2, r2, #1
 8005fc8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0210 	bic.w	r2, r2, #16
 8005ff4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fc fdc0 	bl	8002b80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800600c:	b29b      	uxth	r3, r3
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	b29b      	uxth	r3, r3
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f893 	bl	8006140 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800601a:	e074      	b.n	8006106 <HAL_UART_IRQHandler+0x3f2>
 800601c:	04000120 	.word	0x04000120
 8006020:	08006999 	.word	0x08006999
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006030:	b29b      	uxth	r3, r3
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d063      	beq.n	800610a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8006042:	897b      	ldrh	r3, [r7, #10]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d060      	beq.n	800610a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006056:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0210 	bic.w	r2, r2, #16
 8006088:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800608a:	897b      	ldrh	r3, [r7, #10]
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f856 	bl	8006140 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006094:	e039      	b.n	800610a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00d      	beq.n	80060bc <HAL_UART_IRQHandler+0x3a8>
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d008      	beq.n	80060bc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fc9e 	bl	80069f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060ba:	e029      	b.n	8006110 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01a      	beq.n	800610e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
    }
    return;
 80060e0:	e015      	b.n	800610e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d011      	beq.n	8006110 <HAL_UART_IRQHandler+0x3fc>
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00c      	beq.n	8006110 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fc64 	bl	80069c4 <UART_EndTransmit_IT>
    return;
 80060fc:	e008      	b.n	8006110 <HAL_UART_IRQHandler+0x3fc>
      return;
 80060fe:	bf00      	nop
 8006100:	e006      	b.n	8006110 <HAL_UART_IRQHandler+0x3fc>
    return;
 8006102:	bf00      	nop
 8006104:	e004      	b.n	8006110 <HAL_UART_IRQHandler+0x3fc>
      return;
 8006106:	bf00      	nop
 8006108:	e002      	b.n	8006110 <HAL_UART_IRQHandler+0x3fc>
      return;
 800610a:	bf00      	nop
 800610c:	e000      	b.n	8006110 <HAL_UART_IRQHandler+0x3fc>
    return;
 800610e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop

08006118 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006158:	b5b0      	push	{r4, r5, r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	4313      	orrs	r3, r2
 800617a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4bad      	ldr	r3, [pc, #692]	; (8006438 <UART_SetConfig+0x2e0>)
 8006184:	4013      	ands	r3, r2
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	69f9      	ldr	r1, [r7, #28]
 800618c:	430b      	orrs	r3, r1
 800618e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4aa2      	ldr	r2, [pc, #648]	; (800643c <UART_SetConfig+0x2e4>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d004      	beq.n	80061c0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a99      	ldr	r2, [pc, #612]	; (8006440 <UART_SetConfig+0x2e8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d121      	bne.n	8006222 <UART_SetConfig+0xca>
 80061de:	4b99      	ldr	r3, [pc, #612]	; (8006444 <UART_SetConfig+0x2ec>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d817      	bhi.n	800621c <UART_SetConfig+0xc4>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0x9c>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006205 	.word	0x08006205
 80061f8:	08006211 	.word	0x08006211
 80061fc:	0800620b 	.word	0x0800620b
 8006200:	08006217 	.word	0x08006217
 8006204:	2301      	movs	r3, #1
 8006206:	76fb      	strb	r3, [r7, #27]
 8006208:	e0e7      	b.n	80063da <UART_SetConfig+0x282>
 800620a:	2302      	movs	r3, #2
 800620c:	76fb      	strb	r3, [r7, #27]
 800620e:	e0e4      	b.n	80063da <UART_SetConfig+0x282>
 8006210:	2304      	movs	r3, #4
 8006212:	76fb      	strb	r3, [r7, #27]
 8006214:	e0e1      	b.n	80063da <UART_SetConfig+0x282>
 8006216:	2308      	movs	r3, #8
 8006218:	76fb      	strb	r3, [r7, #27]
 800621a:	e0de      	b.n	80063da <UART_SetConfig+0x282>
 800621c:	2310      	movs	r3, #16
 800621e:	76fb      	strb	r3, [r7, #27]
 8006220:	e0db      	b.n	80063da <UART_SetConfig+0x282>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a88      	ldr	r2, [pc, #544]	; (8006448 <UART_SetConfig+0x2f0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d132      	bne.n	8006292 <UART_SetConfig+0x13a>
 800622c:	4b85      	ldr	r3, [pc, #532]	; (8006444 <UART_SetConfig+0x2ec>)
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006232:	f003 030c 	and.w	r3, r3, #12
 8006236:	2b0c      	cmp	r3, #12
 8006238:	d828      	bhi.n	800628c <UART_SetConfig+0x134>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0xe8>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006275 	.word	0x08006275
 8006244:	0800628d 	.word	0x0800628d
 8006248:	0800628d 	.word	0x0800628d
 800624c:	0800628d 	.word	0x0800628d
 8006250:	08006281 	.word	0x08006281
 8006254:	0800628d 	.word	0x0800628d
 8006258:	0800628d 	.word	0x0800628d
 800625c:	0800628d 	.word	0x0800628d
 8006260:	0800627b 	.word	0x0800627b
 8006264:	0800628d 	.word	0x0800628d
 8006268:	0800628d 	.word	0x0800628d
 800626c:	0800628d 	.word	0x0800628d
 8006270:	08006287 	.word	0x08006287
 8006274:	2300      	movs	r3, #0
 8006276:	76fb      	strb	r3, [r7, #27]
 8006278:	e0af      	b.n	80063da <UART_SetConfig+0x282>
 800627a:	2302      	movs	r3, #2
 800627c:	76fb      	strb	r3, [r7, #27]
 800627e:	e0ac      	b.n	80063da <UART_SetConfig+0x282>
 8006280:	2304      	movs	r3, #4
 8006282:	76fb      	strb	r3, [r7, #27]
 8006284:	e0a9      	b.n	80063da <UART_SetConfig+0x282>
 8006286:	2308      	movs	r3, #8
 8006288:	76fb      	strb	r3, [r7, #27]
 800628a:	e0a6      	b.n	80063da <UART_SetConfig+0x282>
 800628c:	2310      	movs	r3, #16
 800628e:	76fb      	strb	r3, [r7, #27]
 8006290:	e0a3      	b.n	80063da <UART_SetConfig+0x282>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a6d      	ldr	r2, [pc, #436]	; (800644c <UART_SetConfig+0x2f4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d120      	bne.n	80062de <UART_SetConfig+0x186>
 800629c:	4b69      	ldr	r3, [pc, #420]	; (8006444 <UART_SetConfig+0x2ec>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062a6:	2b30      	cmp	r3, #48	; 0x30
 80062a8:	d013      	beq.n	80062d2 <UART_SetConfig+0x17a>
 80062aa:	2b30      	cmp	r3, #48	; 0x30
 80062ac:	d814      	bhi.n	80062d8 <UART_SetConfig+0x180>
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d009      	beq.n	80062c6 <UART_SetConfig+0x16e>
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d810      	bhi.n	80062d8 <UART_SetConfig+0x180>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <UART_SetConfig+0x168>
 80062ba:	2b10      	cmp	r3, #16
 80062bc:	d006      	beq.n	80062cc <UART_SetConfig+0x174>
 80062be:	e00b      	b.n	80062d8 <UART_SetConfig+0x180>
 80062c0:	2300      	movs	r3, #0
 80062c2:	76fb      	strb	r3, [r7, #27]
 80062c4:	e089      	b.n	80063da <UART_SetConfig+0x282>
 80062c6:	2302      	movs	r3, #2
 80062c8:	76fb      	strb	r3, [r7, #27]
 80062ca:	e086      	b.n	80063da <UART_SetConfig+0x282>
 80062cc:	2304      	movs	r3, #4
 80062ce:	76fb      	strb	r3, [r7, #27]
 80062d0:	e083      	b.n	80063da <UART_SetConfig+0x282>
 80062d2:	2308      	movs	r3, #8
 80062d4:	76fb      	strb	r3, [r7, #27]
 80062d6:	e080      	b.n	80063da <UART_SetConfig+0x282>
 80062d8:	2310      	movs	r3, #16
 80062da:	76fb      	strb	r3, [r7, #27]
 80062dc:	e07d      	b.n	80063da <UART_SetConfig+0x282>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a5b      	ldr	r2, [pc, #364]	; (8006450 <UART_SetConfig+0x2f8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d120      	bne.n	800632a <UART_SetConfig+0x1d2>
 80062e8:	4b56      	ldr	r3, [pc, #344]	; (8006444 <UART_SetConfig+0x2ec>)
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062f2:	2bc0      	cmp	r3, #192	; 0xc0
 80062f4:	d013      	beq.n	800631e <UART_SetConfig+0x1c6>
 80062f6:	2bc0      	cmp	r3, #192	; 0xc0
 80062f8:	d814      	bhi.n	8006324 <UART_SetConfig+0x1cc>
 80062fa:	2b80      	cmp	r3, #128	; 0x80
 80062fc:	d009      	beq.n	8006312 <UART_SetConfig+0x1ba>
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d810      	bhi.n	8006324 <UART_SetConfig+0x1cc>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <UART_SetConfig+0x1b4>
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d006      	beq.n	8006318 <UART_SetConfig+0x1c0>
 800630a:	e00b      	b.n	8006324 <UART_SetConfig+0x1cc>
 800630c:	2300      	movs	r3, #0
 800630e:	76fb      	strb	r3, [r7, #27]
 8006310:	e063      	b.n	80063da <UART_SetConfig+0x282>
 8006312:	2302      	movs	r3, #2
 8006314:	76fb      	strb	r3, [r7, #27]
 8006316:	e060      	b.n	80063da <UART_SetConfig+0x282>
 8006318:	2304      	movs	r3, #4
 800631a:	76fb      	strb	r3, [r7, #27]
 800631c:	e05d      	b.n	80063da <UART_SetConfig+0x282>
 800631e:	2308      	movs	r3, #8
 8006320:	76fb      	strb	r3, [r7, #27]
 8006322:	e05a      	b.n	80063da <UART_SetConfig+0x282>
 8006324:	2310      	movs	r3, #16
 8006326:	76fb      	strb	r3, [r7, #27]
 8006328:	e057      	b.n	80063da <UART_SetConfig+0x282>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a49      	ldr	r2, [pc, #292]	; (8006454 <UART_SetConfig+0x2fc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d125      	bne.n	8006380 <UART_SetConfig+0x228>
 8006334:	4b43      	ldr	r3, [pc, #268]	; (8006444 <UART_SetConfig+0x2ec>)
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006342:	d017      	beq.n	8006374 <UART_SetConfig+0x21c>
 8006344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006348:	d817      	bhi.n	800637a <UART_SetConfig+0x222>
 800634a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800634e:	d00b      	beq.n	8006368 <UART_SetConfig+0x210>
 8006350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006354:	d811      	bhi.n	800637a <UART_SetConfig+0x222>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <UART_SetConfig+0x20a>
 800635a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635e:	d006      	beq.n	800636e <UART_SetConfig+0x216>
 8006360:	e00b      	b.n	800637a <UART_SetConfig+0x222>
 8006362:	2300      	movs	r3, #0
 8006364:	76fb      	strb	r3, [r7, #27]
 8006366:	e038      	b.n	80063da <UART_SetConfig+0x282>
 8006368:	2302      	movs	r3, #2
 800636a:	76fb      	strb	r3, [r7, #27]
 800636c:	e035      	b.n	80063da <UART_SetConfig+0x282>
 800636e:	2304      	movs	r3, #4
 8006370:	76fb      	strb	r3, [r7, #27]
 8006372:	e032      	b.n	80063da <UART_SetConfig+0x282>
 8006374:	2308      	movs	r3, #8
 8006376:	76fb      	strb	r3, [r7, #27]
 8006378:	e02f      	b.n	80063da <UART_SetConfig+0x282>
 800637a:	2310      	movs	r3, #16
 800637c:	76fb      	strb	r3, [r7, #27]
 800637e:	e02c      	b.n	80063da <UART_SetConfig+0x282>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2d      	ldr	r2, [pc, #180]	; (800643c <UART_SetConfig+0x2e4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d125      	bne.n	80063d6 <UART_SetConfig+0x27e>
 800638a:	4b2e      	ldr	r3, [pc, #184]	; (8006444 <UART_SetConfig+0x2ec>)
 800638c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006390:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006394:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006398:	d017      	beq.n	80063ca <UART_SetConfig+0x272>
 800639a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800639e:	d817      	bhi.n	80063d0 <UART_SetConfig+0x278>
 80063a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a4:	d00b      	beq.n	80063be <UART_SetConfig+0x266>
 80063a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063aa:	d811      	bhi.n	80063d0 <UART_SetConfig+0x278>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <UART_SetConfig+0x260>
 80063b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b4:	d006      	beq.n	80063c4 <UART_SetConfig+0x26c>
 80063b6:	e00b      	b.n	80063d0 <UART_SetConfig+0x278>
 80063b8:	2300      	movs	r3, #0
 80063ba:	76fb      	strb	r3, [r7, #27]
 80063bc:	e00d      	b.n	80063da <UART_SetConfig+0x282>
 80063be:	2302      	movs	r3, #2
 80063c0:	76fb      	strb	r3, [r7, #27]
 80063c2:	e00a      	b.n	80063da <UART_SetConfig+0x282>
 80063c4:	2304      	movs	r3, #4
 80063c6:	76fb      	strb	r3, [r7, #27]
 80063c8:	e007      	b.n	80063da <UART_SetConfig+0x282>
 80063ca:	2308      	movs	r3, #8
 80063cc:	76fb      	strb	r3, [r7, #27]
 80063ce:	e004      	b.n	80063da <UART_SetConfig+0x282>
 80063d0:	2310      	movs	r3, #16
 80063d2:	76fb      	strb	r3, [r7, #27]
 80063d4:	e001      	b.n	80063da <UART_SetConfig+0x282>
 80063d6:	2310      	movs	r3, #16
 80063d8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a17      	ldr	r2, [pc, #92]	; (800643c <UART_SetConfig+0x2e4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	f040 8087 	bne.w	80064f4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063e6:	7efb      	ldrb	r3, [r7, #27]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d837      	bhi.n	800645c <UART_SetConfig+0x304>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <UART_SetConfig+0x29c>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006419 	.word	0x08006419
 80063f8:	0800645d 	.word	0x0800645d
 80063fc:	08006421 	.word	0x08006421
 8006400:	0800645d 	.word	0x0800645d
 8006404:	08006427 	.word	0x08006427
 8006408:	0800645d 	.word	0x0800645d
 800640c:	0800645d 	.word	0x0800645d
 8006410:	0800645d 	.word	0x0800645d
 8006414:	0800642f 	.word	0x0800642f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006418:	f7fd fc96 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 800641c:	6178      	str	r0, [r7, #20]
        break;
 800641e:	e022      	b.n	8006466 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006420:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <UART_SetConfig+0x300>)
 8006422:	617b      	str	r3, [r7, #20]
        break;
 8006424:	e01f      	b.n	8006466 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006426:	f7fd fbf7 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 800642a:	6178      	str	r0, [r7, #20]
        break;
 800642c:	e01b      	b.n	8006466 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006432:	617b      	str	r3, [r7, #20]
        break;
 8006434:	e017      	b.n	8006466 <UART_SetConfig+0x30e>
 8006436:	bf00      	nop
 8006438:	efff69f3 	.word	0xefff69f3
 800643c:	40008000 	.word	0x40008000
 8006440:	40013800 	.word	0x40013800
 8006444:	40021000 	.word	0x40021000
 8006448:	40004400 	.word	0x40004400
 800644c:	40004800 	.word	0x40004800
 8006450:	40004c00 	.word	0x40004c00
 8006454:	40005000 	.word	0x40005000
 8006458:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	76bb      	strb	r3, [r7, #26]
        break;
 8006464:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 80f1 	beq.w	8006650 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	4413      	add	r3, r2
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	429a      	cmp	r2, r3
 800647c:	d305      	bcc.n	800648a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	429a      	cmp	r2, r3
 8006488:	d902      	bls.n	8006490 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	76bb      	strb	r3, [r7, #26]
 800648e:	e0df      	b.n	8006650 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4618      	mov	r0, r3
 8006494:	f04f 0100 	mov.w	r1, #0
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	020b      	lsls	r3, r1, #8
 80064a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064a6:	0202      	lsls	r2, r0, #8
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	6849      	ldr	r1, [r1, #4]
 80064ac:	0849      	lsrs	r1, r1, #1
 80064ae:	4608      	mov	r0, r1
 80064b0:	f04f 0100 	mov.w	r1, #0
 80064b4:	1814      	adds	r4, r2, r0
 80064b6:	eb43 0501 	adc.w	r5, r3, r1
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	461a      	mov	r2, r3
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	4620      	mov	r0, r4
 80064c6:	4629      	mov	r1, r5
 80064c8:	f7f9 fed2 	bl	8000270 <__aeabi_uldivmod>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4613      	mov	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064da:	d308      	bcc.n	80064ee <UART_SetConfig+0x396>
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e2:	d204      	bcs.n	80064ee <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	60da      	str	r2, [r3, #12]
 80064ec:	e0b0      	b.n	8006650 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	76bb      	strb	r3, [r7, #26]
 80064f2:	e0ad      	b.n	8006650 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064fc:	d15c      	bne.n	80065b8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80064fe:	7efb      	ldrb	r3, [r7, #27]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d828      	bhi.n	8006556 <UART_SetConfig+0x3fe>
 8006504:	a201      	add	r2, pc, #4	; (adr r2, 800650c <UART_SetConfig+0x3b4>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	08006531 	.word	0x08006531
 8006510:	08006539 	.word	0x08006539
 8006514:	08006541 	.word	0x08006541
 8006518:	08006557 	.word	0x08006557
 800651c:	08006547 	.word	0x08006547
 8006520:	08006557 	.word	0x08006557
 8006524:	08006557 	.word	0x08006557
 8006528:	08006557 	.word	0x08006557
 800652c:	0800654f 	.word	0x0800654f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006530:	f7fd fc0a 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8006534:	6178      	str	r0, [r7, #20]
        break;
 8006536:	e013      	b.n	8006560 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006538:	f7fd fc1c 	bl	8003d74 <HAL_RCC_GetPCLK2Freq>
 800653c:	6178      	str	r0, [r7, #20]
        break;
 800653e:	e00f      	b.n	8006560 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006540:	4b49      	ldr	r3, [pc, #292]	; (8006668 <UART_SetConfig+0x510>)
 8006542:	617b      	str	r3, [r7, #20]
        break;
 8006544:	e00c      	b.n	8006560 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006546:	f7fd fb67 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 800654a:	6178      	str	r0, [r7, #20]
        break;
 800654c:	e008      	b.n	8006560 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006552:	617b      	str	r3, [r7, #20]
        break;
 8006554:	e004      	b.n	8006560 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	76bb      	strb	r3, [r7, #26]
        break;
 800655e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d074      	beq.n	8006650 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	005a      	lsls	r2, r3, #1
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	085b      	lsrs	r3, r3, #1
 8006570:	441a      	add	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	fbb2 f3f3 	udiv	r3, r2, r3
 800657a:	b29b      	uxth	r3, r3
 800657c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b0f      	cmp	r3, #15
 8006582:	d916      	bls.n	80065b2 <UART_SetConfig+0x45a>
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658a:	d212      	bcs.n	80065b2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f023 030f 	bic.w	r3, r3, #15
 8006594:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	085b      	lsrs	r3, r3, #1
 800659a:	b29b      	uxth	r3, r3
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	89fb      	ldrh	r3, [r7, #14]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	89fa      	ldrh	r2, [r7, #14]
 80065ae:	60da      	str	r2, [r3, #12]
 80065b0:	e04e      	b.n	8006650 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	76bb      	strb	r3, [r7, #26]
 80065b6:	e04b      	b.n	8006650 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065b8:	7efb      	ldrb	r3, [r7, #27]
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d827      	bhi.n	800660e <UART_SetConfig+0x4b6>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <UART_SetConfig+0x46c>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	080065f1 	.word	0x080065f1
 80065cc:	080065f9 	.word	0x080065f9
 80065d0:	0800660f 	.word	0x0800660f
 80065d4:	080065ff 	.word	0x080065ff
 80065d8:	0800660f 	.word	0x0800660f
 80065dc:	0800660f 	.word	0x0800660f
 80065e0:	0800660f 	.word	0x0800660f
 80065e4:	08006607 	.word	0x08006607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e8:	f7fd fbae 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 80065ec:	6178      	str	r0, [r7, #20]
        break;
 80065ee:	e013      	b.n	8006618 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f0:	f7fd fbc0 	bl	8003d74 <HAL_RCC_GetPCLK2Freq>
 80065f4:	6178      	str	r0, [r7, #20]
        break;
 80065f6:	e00f      	b.n	8006618 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065f8:	4b1b      	ldr	r3, [pc, #108]	; (8006668 <UART_SetConfig+0x510>)
 80065fa:	617b      	str	r3, [r7, #20]
        break;
 80065fc:	e00c      	b.n	8006618 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065fe:	f7fd fb0b 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8006602:	6178      	str	r0, [r7, #20]
        break;
 8006604:	e008      	b.n	8006618 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660a:	617b      	str	r3, [r7, #20]
        break;
 800660c:	e004      	b.n	8006618 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	76bb      	strb	r3, [r7, #26]
        break;
 8006616:	bf00      	nop
    }

    if (pclk != 0U)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d018      	beq.n	8006650 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	085a      	lsrs	r2, r3, #1
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	441a      	add	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006630:	b29b      	uxth	r3, r3
 8006632:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2b0f      	cmp	r3, #15
 8006638:	d908      	bls.n	800664c <UART_SetConfig+0x4f4>
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006640:	d204      	bcs.n	800664c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	e001      	b.n	8006650 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800665c:	7ebb      	ldrb	r3, [r7, #26]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3720      	adds	r7, #32
 8006662:	46bd      	mov	sp, r7
 8006664:	bdb0      	pop	{r4, r5, r7, pc}
 8006666:	bf00      	nop
 8006668:	00f42400 	.word	0x00f42400

0800666c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01a      	beq.n	8006782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800676a:	d10a      	bne.n	8006782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	605a      	str	r2, [r3, #4]
  }
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067c0:	f7fa fcb8 	bl	8001134 <HAL_GetTick>
 80067c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d10e      	bne.n	80067f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f82d 	bl	8006842 <UART_WaitOnFlagUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e023      	b.n	800683a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d10e      	bne.n	800681e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f817 	bl	8006842 <UART_WaitOnFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e00d      	b.n	800683a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	4613      	mov	r3, r2
 8006850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006852:	e05e      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d05a      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685c:	f7fa fc6a 	bl	8001134 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	429a      	cmp	r2, r3
 800686a:	d302      	bcc.n	8006872 <UART_WaitOnFlagUntilTimeout+0x30>
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d11b      	bne.n	80068aa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006880:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e043      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d02c      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c6:	d124      	bne.n	8006912 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068d0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0201 	bic.w	r2, r2, #1
 80068f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2220      	movs	r2, #32
 80068f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e00f      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4013      	ands	r3, r2
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	429a      	cmp	r2, r3
 800692e:	d091      	beq.n	8006854 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006950:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0201 	bic.w	r2, r2, #1
 8006960:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006966:	2b01      	cmp	r3, #1
 8006968:	d107      	bne.n	800697a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0210 	bic.w	r2, r2, #16
 8006978:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f7ff fbb8 	bl	800612c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069da:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff fb95 	bl	8006118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
	...

08006a0c <__errno>:
 8006a0c:	4b01      	ldr	r3, [pc, #4]	; (8006a14 <__errno+0x8>)
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	2000000c 	.word	0x2000000c

08006a18 <__libc_init_array>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	4d0d      	ldr	r5, [pc, #52]	; (8006a50 <__libc_init_array+0x38>)
 8006a1c:	4c0d      	ldr	r4, [pc, #52]	; (8006a54 <__libc_init_array+0x3c>)
 8006a1e:	1b64      	subs	r4, r4, r5
 8006a20:	10a4      	asrs	r4, r4, #2
 8006a22:	2600      	movs	r6, #0
 8006a24:	42a6      	cmp	r6, r4
 8006a26:	d109      	bne.n	8006a3c <__libc_init_array+0x24>
 8006a28:	4d0b      	ldr	r5, [pc, #44]	; (8006a58 <__libc_init_array+0x40>)
 8006a2a:	4c0c      	ldr	r4, [pc, #48]	; (8006a5c <__libc_init_array+0x44>)
 8006a2c:	f000 ff76 	bl	800791c <_init>
 8006a30:	1b64      	subs	r4, r4, r5
 8006a32:	10a4      	asrs	r4, r4, #2
 8006a34:	2600      	movs	r6, #0
 8006a36:	42a6      	cmp	r6, r4
 8006a38:	d105      	bne.n	8006a46 <__libc_init_array+0x2e>
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}
 8006a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a40:	4798      	blx	r3
 8006a42:	3601      	adds	r6, #1
 8006a44:	e7ee      	b.n	8006a24 <__libc_init_array+0xc>
 8006a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a4a:	4798      	blx	r3
 8006a4c:	3601      	adds	r6, #1
 8006a4e:	e7f2      	b.n	8006a36 <__libc_init_array+0x1e>
 8006a50:	08007a48 	.word	0x08007a48
 8006a54:	08007a48 	.word	0x08007a48
 8006a58:	08007a48 	.word	0x08007a48
 8006a5c:	08007a4c 	.word	0x08007a4c

08006a60 <memset>:
 8006a60:	4402      	add	r2, r0
 8006a62:	4603      	mov	r3, r0
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d100      	bne.n	8006a6a <memset+0xa>
 8006a68:	4770      	bx	lr
 8006a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a6e:	e7f9      	b.n	8006a64 <memset+0x4>

08006a70 <iprintf>:
 8006a70:	b40f      	push	{r0, r1, r2, r3}
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <iprintf+0x2c>)
 8006a74:	b513      	push	{r0, r1, r4, lr}
 8006a76:	681c      	ldr	r4, [r3, #0]
 8006a78:	b124      	cbz	r4, 8006a84 <iprintf+0x14>
 8006a7a:	69a3      	ldr	r3, [r4, #24]
 8006a7c:	b913      	cbnz	r3, 8006a84 <iprintf+0x14>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 f866 	bl	8006b50 <__sinit>
 8006a84:	ab05      	add	r3, sp, #20
 8006a86:	9a04      	ldr	r2, [sp, #16]
 8006a88:	68a1      	ldr	r1, [r4, #8]
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 f983 	bl	8006d98 <_vfiprintf_r>
 8006a92:	b002      	add	sp, #8
 8006a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a98:	b004      	add	sp, #16
 8006a9a:	4770      	bx	lr
 8006a9c:	2000000c 	.word	0x2000000c

08006aa0 <std>:
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8006aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aae:	6083      	str	r3, [r0, #8]
 8006ab0:	8181      	strh	r1, [r0, #12]
 8006ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ab4:	81c2      	strh	r2, [r0, #14]
 8006ab6:	6183      	str	r3, [r0, #24]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	2208      	movs	r2, #8
 8006abc:	305c      	adds	r0, #92	; 0x5c
 8006abe:	f7ff ffcf 	bl	8006a60 <memset>
 8006ac2:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <std+0x38>)
 8006ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8006ac6:	4b05      	ldr	r3, [pc, #20]	; (8006adc <std+0x3c>)
 8006ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006aca:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <std+0x40>)
 8006acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ace:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <std+0x44>)
 8006ad0:	6224      	str	r4, [r4, #32]
 8006ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ad4:	bd10      	pop	{r4, pc}
 8006ad6:	bf00      	nop
 8006ad8:	08007341 	.word	0x08007341
 8006adc:	08007363 	.word	0x08007363
 8006ae0:	0800739b 	.word	0x0800739b
 8006ae4:	080073bf 	.word	0x080073bf

08006ae8 <_cleanup_r>:
 8006ae8:	4901      	ldr	r1, [pc, #4]	; (8006af0 <_cleanup_r+0x8>)
 8006aea:	f000 b8af 	b.w	8006c4c <_fwalk_reent>
 8006aee:	bf00      	nop
 8006af0:	08007699 	.word	0x08007699

08006af4 <__sfmoreglue>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	1e4a      	subs	r2, r1, #1
 8006af8:	2568      	movs	r5, #104	; 0x68
 8006afa:	4355      	muls	r5, r2
 8006afc:	460e      	mov	r6, r1
 8006afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b02:	f000 f8c5 	bl	8006c90 <_malloc_r>
 8006b06:	4604      	mov	r4, r0
 8006b08:	b140      	cbz	r0, 8006b1c <__sfmoreglue+0x28>
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8006b10:	300c      	adds	r0, #12
 8006b12:	60a0      	str	r0, [r4, #8]
 8006b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b18:	f7ff ffa2 	bl	8006a60 <memset>
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	bd70      	pop	{r4, r5, r6, pc}

08006b20 <__sfp_lock_acquire>:
 8006b20:	4801      	ldr	r0, [pc, #4]	; (8006b28 <__sfp_lock_acquire+0x8>)
 8006b22:	f000 b8b3 	b.w	8006c8c <__retarget_lock_acquire_recursive>
 8006b26:	bf00      	nop
 8006b28:	20000228 	.word	0x20000228

08006b2c <__sfp_lock_release>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	; (8006b34 <__sfp_lock_release+0x8>)
 8006b2e:	f000 b8ae 	b.w	8006c8e <__retarget_lock_release_recursive>
 8006b32:	bf00      	nop
 8006b34:	20000228 	.word	0x20000228

08006b38 <__sinit_lock_acquire>:
 8006b38:	4801      	ldr	r0, [pc, #4]	; (8006b40 <__sinit_lock_acquire+0x8>)
 8006b3a:	f000 b8a7 	b.w	8006c8c <__retarget_lock_acquire_recursive>
 8006b3e:	bf00      	nop
 8006b40:	20000223 	.word	0x20000223

08006b44 <__sinit_lock_release>:
 8006b44:	4801      	ldr	r0, [pc, #4]	; (8006b4c <__sinit_lock_release+0x8>)
 8006b46:	f000 b8a2 	b.w	8006c8e <__retarget_lock_release_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	20000223 	.word	0x20000223

08006b50 <__sinit>:
 8006b50:	b510      	push	{r4, lr}
 8006b52:	4604      	mov	r4, r0
 8006b54:	f7ff fff0 	bl	8006b38 <__sinit_lock_acquire>
 8006b58:	69a3      	ldr	r3, [r4, #24]
 8006b5a:	b11b      	cbz	r3, 8006b64 <__sinit+0x14>
 8006b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b60:	f7ff bff0 	b.w	8006b44 <__sinit_lock_release>
 8006b64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b68:	6523      	str	r3, [r4, #80]	; 0x50
 8006b6a:	4b13      	ldr	r3, [pc, #76]	; (8006bb8 <__sinit+0x68>)
 8006b6c:	4a13      	ldr	r2, [pc, #76]	; (8006bbc <__sinit+0x6c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	bf04      	itt	eq
 8006b76:	2301      	moveq	r3, #1
 8006b78:	61a3      	streq	r3, [r4, #24]
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 f820 	bl	8006bc0 <__sfp>
 8006b80:	6060      	str	r0, [r4, #4]
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 f81c 	bl	8006bc0 <__sfp>
 8006b88:	60a0      	str	r0, [r4, #8]
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f000 f818 	bl	8006bc0 <__sfp>
 8006b90:	2200      	movs	r2, #0
 8006b92:	60e0      	str	r0, [r4, #12]
 8006b94:	2104      	movs	r1, #4
 8006b96:	6860      	ldr	r0, [r4, #4]
 8006b98:	f7ff ff82 	bl	8006aa0 <std>
 8006b9c:	68a0      	ldr	r0, [r4, #8]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	2109      	movs	r1, #9
 8006ba2:	f7ff ff7d 	bl	8006aa0 <std>
 8006ba6:	68e0      	ldr	r0, [r4, #12]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	2112      	movs	r1, #18
 8006bac:	f7ff ff78 	bl	8006aa0 <std>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	61a3      	str	r3, [r4, #24]
 8006bb4:	e7d2      	b.n	8006b5c <__sinit+0xc>
 8006bb6:	bf00      	nop
 8006bb8:	080079a8 	.word	0x080079a8
 8006bbc:	08006ae9 	.word	0x08006ae9

08006bc0 <__sfp>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	f7ff ffac 	bl	8006b20 <__sfp_lock_acquire>
 8006bc8:	4b1e      	ldr	r3, [pc, #120]	; (8006c44 <__sfp+0x84>)
 8006bca:	681e      	ldr	r6, [r3, #0]
 8006bcc:	69b3      	ldr	r3, [r6, #24]
 8006bce:	b913      	cbnz	r3, 8006bd6 <__sfp+0x16>
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f7ff ffbd 	bl	8006b50 <__sinit>
 8006bd6:	3648      	adds	r6, #72	; 0x48
 8006bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	d503      	bpl.n	8006be8 <__sfp+0x28>
 8006be0:	6833      	ldr	r3, [r6, #0]
 8006be2:	b30b      	cbz	r3, 8006c28 <__sfp+0x68>
 8006be4:	6836      	ldr	r6, [r6, #0]
 8006be6:	e7f7      	b.n	8006bd8 <__sfp+0x18>
 8006be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bec:	b9d5      	cbnz	r5, 8006c24 <__sfp+0x64>
 8006bee:	4b16      	ldr	r3, [pc, #88]	; (8006c48 <__sfp+0x88>)
 8006bf0:	60e3      	str	r3, [r4, #12]
 8006bf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bf6:	6665      	str	r5, [r4, #100]	; 0x64
 8006bf8:	f000 f847 	bl	8006c8a <__retarget_lock_init_recursive>
 8006bfc:	f7ff ff96 	bl	8006b2c <__sfp_lock_release>
 8006c00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c08:	6025      	str	r5, [r4, #0]
 8006c0a:	61a5      	str	r5, [r4, #24]
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	4629      	mov	r1, r5
 8006c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c14:	f7ff ff24 	bl	8006a60 <memset>
 8006c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c20:	4620      	mov	r0, r4
 8006c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c24:	3468      	adds	r4, #104	; 0x68
 8006c26:	e7d9      	b.n	8006bdc <__sfp+0x1c>
 8006c28:	2104      	movs	r1, #4
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	f7ff ff62 	bl	8006af4 <__sfmoreglue>
 8006c30:	4604      	mov	r4, r0
 8006c32:	6030      	str	r0, [r6, #0]
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d1d5      	bne.n	8006be4 <__sfp+0x24>
 8006c38:	f7ff ff78 	bl	8006b2c <__sfp_lock_release>
 8006c3c:	230c      	movs	r3, #12
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	e7ee      	b.n	8006c20 <__sfp+0x60>
 8006c42:	bf00      	nop
 8006c44:	080079a8 	.word	0x080079a8
 8006c48:	ffff0001 	.word	0xffff0001

08006c4c <_fwalk_reent>:
 8006c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c50:	4606      	mov	r6, r0
 8006c52:	4688      	mov	r8, r1
 8006c54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c58:	2700      	movs	r7, #0
 8006c5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c5e:	f1b9 0901 	subs.w	r9, r9, #1
 8006c62:	d505      	bpl.n	8006c70 <_fwalk_reent+0x24>
 8006c64:	6824      	ldr	r4, [r4, #0]
 8006c66:	2c00      	cmp	r4, #0
 8006c68:	d1f7      	bne.n	8006c5a <_fwalk_reent+0xe>
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c70:	89ab      	ldrh	r3, [r5, #12]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d907      	bls.n	8006c86 <_fwalk_reent+0x3a>
 8006c76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	d003      	beq.n	8006c86 <_fwalk_reent+0x3a>
 8006c7e:	4629      	mov	r1, r5
 8006c80:	4630      	mov	r0, r6
 8006c82:	47c0      	blx	r8
 8006c84:	4307      	orrs	r7, r0
 8006c86:	3568      	adds	r5, #104	; 0x68
 8006c88:	e7e9      	b.n	8006c5e <_fwalk_reent+0x12>

08006c8a <__retarget_lock_init_recursive>:
 8006c8a:	4770      	bx	lr

08006c8c <__retarget_lock_acquire_recursive>:
 8006c8c:	4770      	bx	lr

08006c8e <__retarget_lock_release_recursive>:
 8006c8e:	4770      	bx	lr

08006c90 <_malloc_r>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	1ccd      	adds	r5, r1, #3
 8006c94:	f025 0503 	bic.w	r5, r5, #3
 8006c98:	3508      	adds	r5, #8
 8006c9a:	2d0c      	cmp	r5, #12
 8006c9c:	bf38      	it	cc
 8006c9e:	250c      	movcc	r5, #12
 8006ca0:	2d00      	cmp	r5, #0
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	db01      	blt.n	8006caa <_malloc_r+0x1a>
 8006ca6:	42a9      	cmp	r1, r5
 8006ca8:	d903      	bls.n	8006cb2 <_malloc_r+0x22>
 8006caa:	230c      	movs	r3, #12
 8006cac:	6033      	str	r3, [r6, #0]
 8006cae:	2000      	movs	r0, #0
 8006cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb2:	f000 fda3 	bl	80077fc <__malloc_lock>
 8006cb6:	4921      	ldr	r1, [pc, #132]	; (8006d3c <_malloc_r+0xac>)
 8006cb8:	680a      	ldr	r2, [r1, #0]
 8006cba:	4614      	mov	r4, r2
 8006cbc:	b99c      	cbnz	r4, 8006ce6 <_malloc_r+0x56>
 8006cbe:	4f20      	ldr	r7, [pc, #128]	; (8006d40 <_malloc_r+0xb0>)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	b923      	cbnz	r3, 8006cce <_malloc_r+0x3e>
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f000 fb2a 	bl	8007320 <_sbrk_r>
 8006ccc:	6038      	str	r0, [r7, #0]
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f000 fb25 	bl	8007320 <_sbrk_r>
 8006cd6:	1c43      	adds	r3, r0, #1
 8006cd8:	d123      	bne.n	8006d22 <_malloc_r+0x92>
 8006cda:	230c      	movs	r3, #12
 8006cdc:	6033      	str	r3, [r6, #0]
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f000 fd92 	bl	8007808 <__malloc_unlock>
 8006ce4:	e7e3      	b.n	8006cae <_malloc_r+0x1e>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	1b5b      	subs	r3, r3, r5
 8006cea:	d417      	bmi.n	8006d1c <_malloc_r+0x8c>
 8006cec:	2b0b      	cmp	r3, #11
 8006cee:	d903      	bls.n	8006cf8 <_malloc_r+0x68>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	441c      	add	r4, r3
 8006cf4:	6025      	str	r5, [r4, #0]
 8006cf6:	e004      	b.n	8006d02 <_malloc_r+0x72>
 8006cf8:	6863      	ldr	r3, [r4, #4]
 8006cfa:	42a2      	cmp	r2, r4
 8006cfc:	bf0c      	ite	eq
 8006cfe:	600b      	streq	r3, [r1, #0]
 8006d00:	6053      	strne	r3, [r2, #4]
 8006d02:	4630      	mov	r0, r6
 8006d04:	f000 fd80 	bl	8007808 <__malloc_unlock>
 8006d08:	f104 000b 	add.w	r0, r4, #11
 8006d0c:	1d23      	adds	r3, r4, #4
 8006d0e:	f020 0007 	bic.w	r0, r0, #7
 8006d12:	1ac2      	subs	r2, r0, r3
 8006d14:	d0cc      	beq.n	8006cb0 <_malloc_r+0x20>
 8006d16:	1a1b      	subs	r3, r3, r0
 8006d18:	50a3      	str	r3, [r4, r2]
 8006d1a:	e7c9      	b.n	8006cb0 <_malloc_r+0x20>
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	6864      	ldr	r4, [r4, #4]
 8006d20:	e7cc      	b.n	8006cbc <_malloc_r+0x2c>
 8006d22:	1cc4      	adds	r4, r0, #3
 8006d24:	f024 0403 	bic.w	r4, r4, #3
 8006d28:	42a0      	cmp	r0, r4
 8006d2a:	d0e3      	beq.n	8006cf4 <_malloc_r+0x64>
 8006d2c:	1a21      	subs	r1, r4, r0
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f000 faf6 	bl	8007320 <_sbrk_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d1dd      	bne.n	8006cf4 <_malloc_r+0x64>
 8006d38:	e7cf      	b.n	8006cda <_malloc_r+0x4a>
 8006d3a:	bf00      	nop
 8006d3c:	20000090 	.word	0x20000090
 8006d40:	20000094 	.word	0x20000094

08006d44 <__sfputc_r>:
 8006d44:	6893      	ldr	r3, [r2, #8]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	b410      	push	{r4}
 8006d4c:	6093      	str	r3, [r2, #8]
 8006d4e:	da08      	bge.n	8006d62 <__sfputc_r+0x1e>
 8006d50:	6994      	ldr	r4, [r2, #24]
 8006d52:	42a3      	cmp	r3, r4
 8006d54:	db01      	blt.n	8006d5a <__sfputc_r+0x16>
 8006d56:	290a      	cmp	r1, #10
 8006d58:	d103      	bne.n	8006d62 <__sfputc_r+0x1e>
 8006d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d5e:	f000 bb33 	b.w	80073c8 <__swbuf_r>
 8006d62:	6813      	ldr	r3, [r2, #0]
 8006d64:	1c58      	adds	r0, r3, #1
 8006d66:	6010      	str	r0, [r2, #0]
 8006d68:	7019      	strb	r1, [r3, #0]
 8006d6a:	4608      	mov	r0, r1
 8006d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <__sfputs_r>:
 8006d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d74:	4606      	mov	r6, r0
 8006d76:	460f      	mov	r7, r1
 8006d78:	4614      	mov	r4, r2
 8006d7a:	18d5      	adds	r5, r2, r3
 8006d7c:	42ac      	cmp	r4, r5
 8006d7e:	d101      	bne.n	8006d84 <__sfputs_r+0x12>
 8006d80:	2000      	movs	r0, #0
 8006d82:	e007      	b.n	8006d94 <__sfputs_r+0x22>
 8006d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d88:	463a      	mov	r2, r7
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f7ff ffda 	bl	8006d44 <__sfputc_r>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d1f3      	bne.n	8006d7c <__sfputs_r+0xa>
 8006d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d98 <_vfiprintf_r>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	460d      	mov	r5, r1
 8006d9e:	b09d      	sub	sp, #116	; 0x74
 8006da0:	4614      	mov	r4, r2
 8006da2:	4698      	mov	r8, r3
 8006da4:	4606      	mov	r6, r0
 8006da6:	b118      	cbz	r0, 8006db0 <_vfiprintf_r+0x18>
 8006da8:	6983      	ldr	r3, [r0, #24]
 8006daa:	b90b      	cbnz	r3, 8006db0 <_vfiprintf_r+0x18>
 8006dac:	f7ff fed0 	bl	8006b50 <__sinit>
 8006db0:	4b89      	ldr	r3, [pc, #548]	; (8006fd8 <_vfiprintf_r+0x240>)
 8006db2:	429d      	cmp	r5, r3
 8006db4:	d11b      	bne.n	8006dee <_vfiprintf_r+0x56>
 8006db6:	6875      	ldr	r5, [r6, #4]
 8006db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dba:	07d9      	lsls	r1, r3, #31
 8006dbc:	d405      	bmi.n	8006dca <_vfiprintf_r+0x32>
 8006dbe:	89ab      	ldrh	r3, [r5, #12]
 8006dc0:	059a      	lsls	r2, r3, #22
 8006dc2:	d402      	bmi.n	8006dca <_vfiprintf_r+0x32>
 8006dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dc6:	f7ff ff61 	bl	8006c8c <__retarget_lock_acquire_recursive>
 8006dca:	89ab      	ldrh	r3, [r5, #12]
 8006dcc:	071b      	lsls	r3, r3, #28
 8006dce:	d501      	bpl.n	8006dd4 <_vfiprintf_r+0x3c>
 8006dd0:	692b      	ldr	r3, [r5, #16]
 8006dd2:	b9eb      	cbnz	r3, 8006e10 <_vfiprintf_r+0x78>
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f000 fb5a 	bl	8007490 <__swsetup_r>
 8006ddc:	b1c0      	cbz	r0, 8006e10 <_vfiprintf_r+0x78>
 8006dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006de0:	07dc      	lsls	r4, r3, #31
 8006de2:	d50e      	bpl.n	8006e02 <_vfiprintf_r+0x6a>
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295
 8006de8:	b01d      	add	sp, #116	; 0x74
 8006dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dee:	4b7b      	ldr	r3, [pc, #492]	; (8006fdc <_vfiprintf_r+0x244>)
 8006df0:	429d      	cmp	r5, r3
 8006df2:	d101      	bne.n	8006df8 <_vfiprintf_r+0x60>
 8006df4:	68b5      	ldr	r5, [r6, #8]
 8006df6:	e7df      	b.n	8006db8 <_vfiprintf_r+0x20>
 8006df8:	4b79      	ldr	r3, [pc, #484]	; (8006fe0 <_vfiprintf_r+0x248>)
 8006dfa:	429d      	cmp	r5, r3
 8006dfc:	bf08      	it	eq
 8006dfe:	68f5      	ldreq	r5, [r6, #12]
 8006e00:	e7da      	b.n	8006db8 <_vfiprintf_r+0x20>
 8006e02:	89ab      	ldrh	r3, [r5, #12]
 8006e04:	0598      	lsls	r0, r3, #22
 8006e06:	d4ed      	bmi.n	8006de4 <_vfiprintf_r+0x4c>
 8006e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e0a:	f7ff ff40 	bl	8006c8e <__retarget_lock_release_recursive>
 8006e0e:	e7e9      	b.n	8006de4 <_vfiprintf_r+0x4c>
 8006e10:	2300      	movs	r3, #0
 8006e12:	9309      	str	r3, [sp, #36]	; 0x24
 8006e14:	2320      	movs	r3, #32
 8006e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e1e:	2330      	movs	r3, #48	; 0x30
 8006e20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006fe4 <_vfiprintf_r+0x24c>
 8006e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e28:	f04f 0901 	mov.w	r9, #1
 8006e2c:	4623      	mov	r3, r4
 8006e2e:	469a      	mov	sl, r3
 8006e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e34:	b10a      	cbz	r2, 8006e3a <_vfiprintf_r+0xa2>
 8006e36:	2a25      	cmp	r2, #37	; 0x25
 8006e38:	d1f9      	bne.n	8006e2e <_vfiprintf_r+0x96>
 8006e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e3e:	d00b      	beq.n	8006e58 <_vfiprintf_r+0xc0>
 8006e40:	465b      	mov	r3, fp
 8006e42:	4622      	mov	r2, r4
 8006e44:	4629      	mov	r1, r5
 8006e46:	4630      	mov	r0, r6
 8006e48:	f7ff ff93 	bl	8006d72 <__sfputs_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	f000 80aa 	beq.w	8006fa6 <_vfiprintf_r+0x20e>
 8006e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e54:	445a      	add	r2, fp
 8006e56:	9209      	str	r2, [sp, #36]	; 0x24
 8006e58:	f89a 3000 	ldrb.w	r3, [sl]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80a2 	beq.w	8006fa6 <_vfiprintf_r+0x20e>
 8006e62:	2300      	movs	r3, #0
 8006e64:	f04f 32ff 	mov.w	r2, #4294967295
 8006e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e6c:	f10a 0a01 	add.w	sl, sl, #1
 8006e70:	9304      	str	r3, [sp, #16]
 8006e72:	9307      	str	r3, [sp, #28]
 8006e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e78:	931a      	str	r3, [sp, #104]	; 0x68
 8006e7a:	4654      	mov	r4, sl
 8006e7c:	2205      	movs	r2, #5
 8006e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e82:	4858      	ldr	r0, [pc, #352]	; (8006fe4 <_vfiprintf_r+0x24c>)
 8006e84:	f7f9 f9a4 	bl	80001d0 <memchr>
 8006e88:	9a04      	ldr	r2, [sp, #16]
 8006e8a:	b9d8      	cbnz	r0, 8006ec4 <_vfiprintf_r+0x12c>
 8006e8c:	06d1      	lsls	r1, r2, #27
 8006e8e:	bf44      	itt	mi
 8006e90:	2320      	movmi	r3, #32
 8006e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e96:	0713      	lsls	r3, r2, #28
 8006e98:	bf44      	itt	mi
 8006e9a:	232b      	movmi	r3, #43	; 0x2b
 8006e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ea6:	d015      	beq.n	8006ed4 <_vfiprintf_r+0x13c>
 8006ea8:	9a07      	ldr	r2, [sp, #28]
 8006eaa:	4654      	mov	r4, sl
 8006eac:	2000      	movs	r0, #0
 8006eae:	f04f 0c0a 	mov.w	ip, #10
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eb8:	3b30      	subs	r3, #48	; 0x30
 8006eba:	2b09      	cmp	r3, #9
 8006ebc:	d94e      	bls.n	8006f5c <_vfiprintf_r+0x1c4>
 8006ebe:	b1b0      	cbz	r0, 8006eee <_vfiprintf_r+0x156>
 8006ec0:	9207      	str	r2, [sp, #28]
 8006ec2:	e014      	b.n	8006eee <_vfiprintf_r+0x156>
 8006ec4:	eba0 0308 	sub.w	r3, r0, r8
 8006ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	9304      	str	r3, [sp, #16]
 8006ed0:	46a2      	mov	sl, r4
 8006ed2:	e7d2      	b.n	8006e7a <_vfiprintf_r+0xe2>
 8006ed4:	9b03      	ldr	r3, [sp, #12]
 8006ed6:	1d19      	adds	r1, r3, #4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	9103      	str	r1, [sp, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bfbb      	ittet	lt
 8006ee0:	425b      	neglt	r3, r3
 8006ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ee6:	9307      	strge	r3, [sp, #28]
 8006ee8:	9307      	strlt	r3, [sp, #28]
 8006eea:	bfb8      	it	lt
 8006eec:	9204      	strlt	r2, [sp, #16]
 8006eee:	7823      	ldrb	r3, [r4, #0]
 8006ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ef2:	d10c      	bne.n	8006f0e <_vfiprintf_r+0x176>
 8006ef4:	7863      	ldrb	r3, [r4, #1]
 8006ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ef8:	d135      	bne.n	8006f66 <_vfiprintf_r+0x1ce>
 8006efa:	9b03      	ldr	r3, [sp, #12]
 8006efc:	1d1a      	adds	r2, r3, #4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	9203      	str	r2, [sp, #12]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bfb8      	it	lt
 8006f06:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f0a:	3402      	adds	r4, #2
 8006f0c:	9305      	str	r3, [sp, #20]
 8006f0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ff4 <_vfiprintf_r+0x25c>
 8006f12:	7821      	ldrb	r1, [r4, #0]
 8006f14:	2203      	movs	r2, #3
 8006f16:	4650      	mov	r0, sl
 8006f18:	f7f9 f95a 	bl	80001d0 <memchr>
 8006f1c:	b140      	cbz	r0, 8006f30 <_vfiprintf_r+0x198>
 8006f1e:	2340      	movs	r3, #64	; 0x40
 8006f20:	eba0 000a 	sub.w	r0, r0, sl
 8006f24:	fa03 f000 	lsl.w	r0, r3, r0
 8006f28:	9b04      	ldr	r3, [sp, #16]
 8006f2a:	4303      	orrs	r3, r0
 8006f2c:	3401      	adds	r4, #1
 8006f2e:	9304      	str	r3, [sp, #16]
 8006f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f34:	482c      	ldr	r0, [pc, #176]	; (8006fe8 <_vfiprintf_r+0x250>)
 8006f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f3a:	2206      	movs	r2, #6
 8006f3c:	f7f9 f948 	bl	80001d0 <memchr>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d03f      	beq.n	8006fc4 <_vfiprintf_r+0x22c>
 8006f44:	4b29      	ldr	r3, [pc, #164]	; (8006fec <_vfiprintf_r+0x254>)
 8006f46:	bb1b      	cbnz	r3, 8006f90 <_vfiprintf_r+0x1f8>
 8006f48:	9b03      	ldr	r3, [sp, #12]
 8006f4a:	3307      	adds	r3, #7
 8006f4c:	f023 0307 	bic.w	r3, r3, #7
 8006f50:	3308      	adds	r3, #8
 8006f52:	9303      	str	r3, [sp, #12]
 8006f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f56:	443b      	add	r3, r7
 8006f58:	9309      	str	r3, [sp, #36]	; 0x24
 8006f5a:	e767      	b.n	8006e2c <_vfiprintf_r+0x94>
 8006f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f60:	460c      	mov	r4, r1
 8006f62:	2001      	movs	r0, #1
 8006f64:	e7a5      	b.n	8006eb2 <_vfiprintf_r+0x11a>
 8006f66:	2300      	movs	r3, #0
 8006f68:	3401      	adds	r4, #1
 8006f6a:	9305      	str	r3, [sp, #20]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f04f 0c0a 	mov.w	ip, #10
 8006f72:	4620      	mov	r0, r4
 8006f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f78:	3a30      	subs	r2, #48	; 0x30
 8006f7a:	2a09      	cmp	r2, #9
 8006f7c:	d903      	bls.n	8006f86 <_vfiprintf_r+0x1ee>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0c5      	beq.n	8006f0e <_vfiprintf_r+0x176>
 8006f82:	9105      	str	r1, [sp, #20]
 8006f84:	e7c3      	b.n	8006f0e <_vfiprintf_r+0x176>
 8006f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e7f0      	b.n	8006f72 <_vfiprintf_r+0x1da>
 8006f90:	ab03      	add	r3, sp, #12
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	462a      	mov	r2, r5
 8006f96:	4b16      	ldr	r3, [pc, #88]	; (8006ff0 <_vfiprintf_r+0x258>)
 8006f98:	a904      	add	r1, sp, #16
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f3af 8000 	nop.w
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	1c78      	adds	r0, r7, #1
 8006fa4:	d1d6      	bne.n	8006f54 <_vfiprintf_r+0x1bc>
 8006fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fa8:	07d9      	lsls	r1, r3, #31
 8006faa:	d405      	bmi.n	8006fb8 <_vfiprintf_r+0x220>
 8006fac:	89ab      	ldrh	r3, [r5, #12]
 8006fae:	059a      	lsls	r2, r3, #22
 8006fb0:	d402      	bmi.n	8006fb8 <_vfiprintf_r+0x220>
 8006fb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fb4:	f7ff fe6b 	bl	8006c8e <__retarget_lock_release_recursive>
 8006fb8:	89ab      	ldrh	r3, [r5, #12]
 8006fba:	065b      	lsls	r3, r3, #25
 8006fbc:	f53f af12 	bmi.w	8006de4 <_vfiprintf_r+0x4c>
 8006fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fc2:	e711      	b.n	8006de8 <_vfiprintf_r+0x50>
 8006fc4:	ab03      	add	r3, sp, #12
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	462a      	mov	r2, r5
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <_vfiprintf_r+0x258>)
 8006fcc:	a904      	add	r1, sp, #16
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f000 f880 	bl	80070d4 <_printf_i>
 8006fd4:	e7e4      	b.n	8006fa0 <_vfiprintf_r+0x208>
 8006fd6:	bf00      	nop
 8006fd8:	080079cc 	.word	0x080079cc
 8006fdc:	080079ec 	.word	0x080079ec
 8006fe0:	080079ac 	.word	0x080079ac
 8006fe4:	08007a0c 	.word	0x08007a0c
 8006fe8:	08007a16 	.word	0x08007a16
 8006fec:	00000000 	.word	0x00000000
 8006ff0:	08006d73 	.word	0x08006d73
 8006ff4:	08007a12 	.word	0x08007a12

08006ff8 <_printf_common>:
 8006ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	4616      	mov	r6, r2
 8006ffe:	4699      	mov	r9, r3
 8007000:	688a      	ldr	r2, [r1, #8]
 8007002:	690b      	ldr	r3, [r1, #16]
 8007004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007008:	4293      	cmp	r3, r2
 800700a:	bfb8      	it	lt
 800700c:	4613      	movlt	r3, r2
 800700e:	6033      	str	r3, [r6, #0]
 8007010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007014:	4607      	mov	r7, r0
 8007016:	460c      	mov	r4, r1
 8007018:	b10a      	cbz	r2, 800701e <_printf_common+0x26>
 800701a:	3301      	adds	r3, #1
 800701c:	6033      	str	r3, [r6, #0]
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	0699      	lsls	r1, r3, #26
 8007022:	bf42      	ittt	mi
 8007024:	6833      	ldrmi	r3, [r6, #0]
 8007026:	3302      	addmi	r3, #2
 8007028:	6033      	strmi	r3, [r6, #0]
 800702a:	6825      	ldr	r5, [r4, #0]
 800702c:	f015 0506 	ands.w	r5, r5, #6
 8007030:	d106      	bne.n	8007040 <_printf_common+0x48>
 8007032:	f104 0a19 	add.w	sl, r4, #25
 8007036:	68e3      	ldr	r3, [r4, #12]
 8007038:	6832      	ldr	r2, [r6, #0]
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	42ab      	cmp	r3, r5
 800703e:	dc26      	bgt.n	800708e <_printf_common+0x96>
 8007040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007044:	1e13      	subs	r3, r2, #0
 8007046:	6822      	ldr	r2, [r4, #0]
 8007048:	bf18      	it	ne
 800704a:	2301      	movne	r3, #1
 800704c:	0692      	lsls	r2, r2, #26
 800704e:	d42b      	bmi.n	80070a8 <_printf_common+0xb0>
 8007050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007054:	4649      	mov	r1, r9
 8007056:	4638      	mov	r0, r7
 8007058:	47c0      	blx	r8
 800705a:	3001      	adds	r0, #1
 800705c:	d01e      	beq.n	800709c <_printf_common+0xa4>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	68e5      	ldr	r5, [r4, #12]
 8007062:	6832      	ldr	r2, [r6, #0]
 8007064:	f003 0306 	and.w	r3, r3, #6
 8007068:	2b04      	cmp	r3, #4
 800706a:	bf08      	it	eq
 800706c:	1aad      	subeq	r5, r5, r2
 800706e:	68a3      	ldr	r3, [r4, #8]
 8007070:	6922      	ldr	r2, [r4, #16]
 8007072:	bf0c      	ite	eq
 8007074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007078:	2500      	movne	r5, #0
 800707a:	4293      	cmp	r3, r2
 800707c:	bfc4      	itt	gt
 800707e:	1a9b      	subgt	r3, r3, r2
 8007080:	18ed      	addgt	r5, r5, r3
 8007082:	2600      	movs	r6, #0
 8007084:	341a      	adds	r4, #26
 8007086:	42b5      	cmp	r5, r6
 8007088:	d11a      	bne.n	80070c0 <_printf_common+0xc8>
 800708a:	2000      	movs	r0, #0
 800708c:	e008      	b.n	80070a0 <_printf_common+0xa8>
 800708e:	2301      	movs	r3, #1
 8007090:	4652      	mov	r2, sl
 8007092:	4649      	mov	r1, r9
 8007094:	4638      	mov	r0, r7
 8007096:	47c0      	blx	r8
 8007098:	3001      	adds	r0, #1
 800709a:	d103      	bne.n	80070a4 <_printf_common+0xac>
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a4:	3501      	adds	r5, #1
 80070a6:	e7c6      	b.n	8007036 <_printf_common+0x3e>
 80070a8:	18e1      	adds	r1, r4, r3
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	2030      	movs	r0, #48	; 0x30
 80070ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070b2:	4422      	add	r2, r4
 80070b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070bc:	3302      	adds	r3, #2
 80070be:	e7c7      	b.n	8007050 <_printf_common+0x58>
 80070c0:	2301      	movs	r3, #1
 80070c2:	4622      	mov	r2, r4
 80070c4:	4649      	mov	r1, r9
 80070c6:	4638      	mov	r0, r7
 80070c8:	47c0      	blx	r8
 80070ca:	3001      	adds	r0, #1
 80070cc:	d0e6      	beq.n	800709c <_printf_common+0xa4>
 80070ce:	3601      	adds	r6, #1
 80070d0:	e7d9      	b.n	8007086 <_printf_common+0x8e>
	...

080070d4 <_printf_i>:
 80070d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d8:	460c      	mov	r4, r1
 80070da:	4691      	mov	r9, r2
 80070dc:	7e27      	ldrb	r7, [r4, #24]
 80070de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070e0:	2f78      	cmp	r7, #120	; 0x78
 80070e2:	4680      	mov	r8, r0
 80070e4:	469a      	mov	sl, r3
 80070e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070ea:	d807      	bhi.n	80070fc <_printf_i+0x28>
 80070ec:	2f62      	cmp	r7, #98	; 0x62
 80070ee:	d80a      	bhi.n	8007106 <_printf_i+0x32>
 80070f0:	2f00      	cmp	r7, #0
 80070f2:	f000 80d8 	beq.w	80072a6 <_printf_i+0x1d2>
 80070f6:	2f58      	cmp	r7, #88	; 0x58
 80070f8:	f000 80a3 	beq.w	8007242 <_printf_i+0x16e>
 80070fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007104:	e03a      	b.n	800717c <_printf_i+0xa8>
 8007106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800710a:	2b15      	cmp	r3, #21
 800710c:	d8f6      	bhi.n	80070fc <_printf_i+0x28>
 800710e:	a001      	add	r0, pc, #4	; (adr r0, 8007114 <_printf_i+0x40>)
 8007110:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007114:	0800716d 	.word	0x0800716d
 8007118:	08007181 	.word	0x08007181
 800711c:	080070fd 	.word	0x080070fd
 8007120:	080070fd 	.word	0x080070fd
 8007124:	080070fd 	.word	0x080070fd
 8007128:	080070fd 	.word	0x080070fd
 800712c:	08007181 	.word	0x08007181
 8007130:	080070fd 	.word	0x080070fd
 8007134:	080070fd 	.word	0x080070fd
 8007138:	080070fd 	.word	0x080070fd
 800713c:	080070fd 	.word	0x080070fd
 8007140:	0800728d 	.word	0x0800728d
 8007144:	080071b1 	.word	0x080071b1
 8007148:	0800726f 	.word	0x0800726f
 800714c:	080070fd 	.word	0x080070fd
 8007150:	080070fd 	.word	0x080070fd
 8007154:	080072af 	.word	0x080072af
 8007158:	080070fd 	.word	0x080070fd
 800715c:	080071b1 	.word	0x080071b1
 8007160:	080070fd 	.word	0x080070fd
 8007164:	080070fd 	.word	0x080070fd
 8007168:	08007277 	.word	0x08007277
 800716c:	680b      	ldr	r3, [r1, #0]
 800716e:	1d1a      	adds	r2, r3, #4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	600a      	str	r2, [r1, #0]
 8007174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800717c:	2301      	movs	r3, #1
 800717e:	e0a3      	b.n	80072c8 <_printf_i+0x1f4>
 8007180:	6825      	ldr	r5, [r4, #0]
 8007182:	6808      	ldr	r0, [r1, #0]
 8007184:	062e      	lsls	r6, r5, #24
 8007186:	f100 0304 	add.w	r3, r0, #4
 800718a:	d50a      	bpl.n	80071a2 <_printf_i+0xce>
 800718c:	6805      	ldr	r5, [r0, #0]
 800718e:	600b      	str	r3, [r1, #0]
 8007190:	2d00      	cmp	r5, #0
 8007192:	da03      	bge.n	800719c <_printf_i+0xc8>
 8007194:	232d      	movs	r3, #45	; 0x2d
 8007196:	426d      	negs	r5, r5
 8007198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800719c:	485e      	ldr	r0, [pc, #376]	; (8007318 <_printf_i+0x244>)
 800719e:	230a      	movs	r3, #10
 80071a0:	e019      	b.n	80071d6 <_printf_i+0x102>
 80071a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80071a6:	6805      	ldr	r5, [r0, #0]
 80071a8:	600b      	str	r3, [r1, #0]
 80071aa:	bf18      	it	ne
 80071ac:	b22d      	sxthne	r5, r5
 80071ae:	e7ef      	b.n	8007190 <_printf_i+0xbc>
 80071b0:	680b      	ldr	r3, [r1, #0]
 80071b2:	6825      	ldr	r5, [r4, #0]
 80071b4:	1d18      	adds	r0, r3, #4
 80071b6:	6008      	str	r0, [r1, #0]
 80071b8:	0628      	lsls	r0, r5, #24
 80071ba:	d501      	bpl.n	80071c0 <_printf_i+0xec>
 80071bc:	681d      	ldr	r5, [r3, #0]
 80071be:	e002      	b.n	80071c6 <_printf_i+0xf2>
 80071c0:	0669      	lsls	r1, r5, #25
 80071c2:	d5fb      	bpl.n	80071bc <_printf_i+0xe8>
 80071c4:	881d      	ldrh	r5, [r3, #0]
 80071c6:	4854      	ldr	r0, [pc, #336]	; (8007318 <_printf_i+0x244>)
 80071c8:	2f6f      	cmp	r7, #111	; 0x6f
 80071ca:	bf0c      	ite	eq
 80071cc:	2308      	moveq	r3, #8
 80071ce:	230a      	movne	r3, #10
 80071d0:	2100      	movs	r1, #0
 80071d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071d6:	6866      	ldr	r6, [r4, #4]
 80071d8:	60a6      	str	r6, [r4, #8]
 80071da:	2e00      	cmp	r6, #0
 80071dc:	bfa2      	ittt	ge
 80071de:	6821      	ldrge	r1, [r4, #0]
 80071e0:	f021 0104 	bicge.w	r1, r1, #4
 80071e4:	6021      	strge	r1, [r4, #0]
 80071e6:	b90d      	cbnz	r5, 80071ec <_printf_i+0x118>
 80071e8:	2e00      	cmp	r6, #0
 80071ea:	d04d      	beq.n	8007288 <_printf_i+0x1b4>
 80071ec:	4616      	mov	r6, r2
 80071ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80071f2:	fb03 5711 	mls	r7, r3, r1, r5
 80071f6:	5dc7      	ldrb	r7, [r0, r7]
 80071f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071fc:	462f      	mov	r7, r5
 80071fe:	42bb      	cmp	r3, r7
 8007200:	460d      	mov	r5, r1
 8007202:	d9f4      	bls.n	80071ee <_printf_i+0x11a>
 8007204:	2b08      	cmp	r3, #8
 8007206:	d10b      	bne.n	8007220 <_printf_i+0x14c>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	07df      	lsls	r7, r3, #31
 800720c:	d508      	bpl.n	8007220 <_printf_i+0x14c>
 800720e:	6923      	ldr	r3, [r4, #16]
 8007210:	6861      	ldr	r1, [r4, #4]
 8007212:	4299      	cmp	r1, r3
 8007214:	bfde      	ittt	le
 8007216:	2330      	movle	r3, #48	; 0x30
 8007218:	f806 3c01 	strble.w	r3, [r6, #-1]
 800721c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007220:	1b92      	subs	r2, r2, r6
 8007222:	6122      	str	r2, [r4, #16]
 8007224:	f8cd a000 	str.w	sl, [sp]
 8007228:	464b      	mov	r3, r9
 800722a:	aa03      	add	r2, sp, #12
 800722c:	4621      	mov	r1, r4
 800722e:	4640      	mov	r0, r8
 8007230:	f7ff fee2 	bl	8006ff8 <_printf_common>
 8007234:	3001      	adds	r0, #1
 8007236:	d14c      	bne.n	80072d2 <_printf_i+0x1fe>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	b004      	add	sp, #16
 800723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007242:	4835      	ldr	r0, [pc, #212]	; (8007318 <_printf_i+0x244>)
 8007244:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	680e      	ldr	r6, [r1, #0]
 800724c:	061f      	lsls	r7, r3, #24
 800724e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007252:	600e      	str	r6, [r1, #0]
 8007254:	d514      	bpl.n	8007280 <_printf_i+0x1ac>
 8007256:	07d9      	lsls	r1, r3, #31
 8007258:	bf44      	itt	mi
 800725a:	f043 0320 	orrmi.w	r3, r3, #32
 800725e:	6023      	strmi	r3, [r4, #0]
 8007260:	b91d      	cbnz	r5, 800726a <_printf_i+0x196>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	f023 0320 	bic.w	r3, r3, #32
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	2310      	movs	r3, #16
 800726c:	e7b0      	b.n	80071d0 <_printf_i+0xfc>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	f043 0320 	orr.w	r3, r3, #32
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	2378      	movs	r3, #120	; 0x78
 8007278:	4828      	ldr	r0, [pc, #160]	; (800731c <_printf_i+0x248>)
 800727a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800727e:	e7e3      	b.n	8007248 <_printf_i+0x174>
 8007280:	065e      	lsls	r6, r3, #25
 8007282:	bf48      	it	mi
 8007284:	b2ad      	uxthmi	r5, r5
 8007286:	e7e6      	b.n	8007256 <_printf_i+0x182>
 8007288:	4616      	mov	r6, r2
 800728a:	e7bb      	b.n	8007204 <_printf_i+0x130>
 800728c:	680b      	ldr	r3, [r1, #0]
 800728e:	6826      	ldr	r6, [r4, #0]
 8007290:	6960      	ldr	r0, [r4, #20]
 8007292:	1d1d      	adds	r5, r3, #4
 8007294:	600d      	str	r5, [r1, #0]
 8007296:	0635      	lsls	r5, r6, #24
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	d501      	bpl.n	80072a0 <_printf_i+0x1cc>
 800729c:	6018      	str	r0, [r3, #0]
 800729e:	e002      	b.n	80072a6 <_printf_i+0x1d2>
 80072a0:	0671      	lsls	r1, r6, #25
 80072a2:	d5fb      	bpl.n	800729c <_printf_i+0x1c8>
 80072a4:	8018      	strh	r0, [r3, #0]
 80072a6:	2300      	movs	r3, #0
 80072a8:	6123      	str	r3, [r4, #16]
 80072aa:	4616      	mov	r6, r2
 80072ac:	e7ba      	b.n	8007224 <_printf_i+0x150>
 80072ae:	680b      	ldr	r3, [r1, #0]
 80072b0:	1d1a      	adds	r2, r3, #4
 80072b2:	600a      	str	r2, [r1, #0]
 80072b4:	681e      	ldr	r6, [r3, #0]
 80072b6:	6862      	ldr	r2, [r4, #4]
 80072b8:	2100      	movs	r1, #0
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7f8 ff88 	bl	80001d0 <memchr>
 80072c0:	b108      	cbz	r0, 80072c6 <_printf_i+0x1f2>
 80072c2:	1b80      	subs	r0, r0, r6
 80072c4:	6060      	str	r0, [r4, #4]
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	6123      	str	r3, [r4, #16]
 80072ca:	2300      	movs	r3, #0
 80072cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d0:	e7a8      	b.n	8007224 <_printf_i+0x150>
 80072d2:	6923      	ldr	r3, [r4, #16]
 80072d4:	4632      	mov	r2, r6
 80072d6:	4649      	mov	r1, r9
 80072d8:	4640      	mov	r0, r8
 80072da:	47d0      	blx	sl
 80072dc:	3001      	adds	r0, #1
 80072de:	d0ab      	beq.n	8007238 <_printf_i+0x164>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	079b      	lsls	r3, r3, #30
 80072e4:	d413      	bmi.n	800730e <_printf_i+0x23a>
 80072e6:	68e0      	ldr	r0, [r4, #12]
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	4298      	cmp	r0, r3
 80072ec:	bfb8      	it	lt
 80072ee:	4618      	movlt	r0, r3
 80072f0:	e7a4      	b.n	800723c <_printf_i+0x168>
 80072f2:	2301      	movs	r3, #1
 80072f4:	4632      	mov	r2, r6
 80072f6:	4649      	mov	r1, r9
 80072f8:	4640      	mov	r0, r8
 80072fa:	47d0      	blx	sl
 80072fc:	3001      	adds	r0, #1
 80072fe:	d09b      	beq.n	8007238 <_printf_i+0x164>
 8007300:	3501      	adds	r5, #1
 8007302:	68e3      	ldr	r3, [r4, #12]
 8007304:	9903      	ldr	r1, [sp, #12]
 8007306:	1a5b      	subs	r3, r3, r1
 8007308:	42ab      	cmp	r3, r5
 800730a:	dcf2      	bgt.n	80072f2 <_printf_i+0x21e>
 800730c:	e7eb      	b.n	80072e6 <_printf_i+0x212>
 800730e:	2500      	movs	r5, #0
 8007310:	f104 0619 	add.w	r6, r4, #25
 8007314:	e7f5      	b.n	8007302 <_printf_i+0x22e>
 8007316:	bf00      	nop
 8007318:	08007a1d 	.word	0x08007a1d
 800731c:	08007a2e 	.word	0x08007a2e

08007320 <_sbrk_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4d06      	ldr	r5, [pc, #24]	; (800733c <_sbrk_r+0x1c>)
 8007324:	2300      	movs	r3, #0
 8007326:	4604      	mov	r4, r0
 8007328:	4608      	mov	r0, r1
 800732a:	602b      	str	r3, [r5, #0]
 800732c:	f7f9 fe00 	bl	8000f30 <_sbrk>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_sbrk_r+0x1a>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b103      	cbz	r3, 800733a <_sbrk_r+0x1a>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	2000022c 	.word	0x2000022c

08007340 <__sread>:
 8007340:	b510      	push	{r4, lr}
 8007342:	460c      	mov	r4, r1
 8007344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007348:	f000 fab4 	bl	80078b4 <_read_r>
 800734c:	2800      	cmp	r0, #0
 800734e:	bfab      	itete	ge
 8007350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007352:	89a3      	ldrhlt	r3, [r4, #12]
 8007354:	181b      	addge	r3, r3, r0
 8007356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800735a:	bfac      	ite	ge
 800735c:	6563      	strge	r3, [r4, #84]	; 0x54
 800735e:	81a3      	strhlt	r3, [r4, #12]
 8007360:	bd10      	pop	{r4, pc}

08007362 <__swrite>:
 8007362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007366:	461f      	mov	r7, r3
 8007368:	898b      	ldrh	r3, [r1, #12]
 800736a:	05db      	lsls	r3, r3, #23
 800736c:	4605      	mov	r5, r0
 800736e:	460c      	mov	r4, r1
 8007370:	4616      	mov	r6, r2
 8007372:	d505      	bpl.n	8007380 <__swrite+0x1e>
 8007374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007378:	2302      	movs	r3, #2
 800737a:	2200      	movs	r2, #0
 800737c:	f000 f9c8 	bl	8007710 <_lseek_r>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	4632      	mov	r2, r6
 800738e:	463b      	mov	r3, r7
 8007390:	4628      	mov	r0, r5
 8007392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	f000 b869 	b.w	800746c <_write_r>

0800739a <__sseek>:
 800739a:	b510      	push	{r4, lr}
 800739c:	460c      	mov	r4, r1
 800739e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a2:	f000 f9b5 	bl	8007710 <_lseek_r>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	bf15      	itete	ne
 80073ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80073ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073b6:	81a3      	strheq	r3, [r4, #12]
 80073b8:	bf18      	it	ne
 80073ba:	81a3      	strhne	r3, [r4, #12]
 80073bc:	bd10      	pop	{r4, pc}

080073be <__sclose>:
 80073be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c2:	f000 b8d3 	b.w	800756c <_close_r>
	...

080073c8 <__swbuf_r>:
 80073c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ca:	460e      	mov	r6, r1
 80073cc:	4614      	mov	r4, r2
 80073ce:	4605      	mov	r5, r0
 80073d0:	b118      	cbz	r0, 80073da <__swbuf_r+0x12>
 80073d2:	6983      	ldr	r3, [r0, #24]
 80073d4:	b90b      	cbnz	r3, 80073da <__swbuf_r+0x12>
 80073d6:	f7ff fbbb 	bl	8006b50 <__sinit>
 80073da:	4b21      	ldr	r3, [pc, #132]	; (8007460 <__swbuf_r+0x98>)
 80073dc:	429c      	cmp	r4, r3
 80073de:	d12b      	bne.n	8007438 <__swbuf_r+0x70>
 80073e0:	686c      	ldr	r4, [r5, #4]
 80073e2:	69a3      	ldr	r3, [r4, #24]
 80073e4:	60a3      	str	r3, [r4, #8]
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	071a      	lsls	r2, r3, #28
 80073ea:	d52f      	bpl.n	800744c <__swbuf_r+0x84>
 80073ec:	6923      	ldr	r3, [r4, #16]
 80073ee:	b36b      	cbz	r3, 800744c <__swbuf_r+0x84>
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	6820      	ldr	r0, [r4, #0]
 80073f4:	1ac0      	subs	r0, r0, r3
 80073f6:	6963      	ldr	r3, [r4, #20]
 80073f8:	b2f6      	uxtb	r6, r6
 80073fa:	4283      	cmp	r3, r0
 80073fc:	4637      	mov	r7, r6
 80073fe:	dc04      	bgt.n	800740a <__swbuf_r+0x42>
 8007400:	4621      	mov	r1, r4
 8007402:	4628      	mov	r0, r5
 8007404:	f000 f948 	bl	8007698 <_fflush_r>
 8007408:	bb30      	cbnz	r0, 8007458 <__swbuf_r+0x90>
 800740a:	68a3      	ldr	r3, [r4, #8]
 800740c:	3b01      	subs	r3, #1
 800740e:	60a3      	str	r3, [r4, #8]
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	6022      	str	r2, [r4, #0]
 8007416:	701e      	strb	r6, [r3, #0]
 8007418:	6963      	ldr	r3, [r4, #20]
 800741a:	3001      	adds	r0, #1
 800741c:	4283      	cmp	r3, r0
 800741e:	d004      	beq.n	800742a <__swbuf_r+0x62>
 8007420:	89a3      	ldrh	r3, [r4, #12]
 8007422:	07db      	lsls	r3, r3, #31
 8007424:	d506      	bpl.n	8007434 <__swbuf_r+0x6c>
 8007426:	2e0a      	cmp	r6, #10
 8007428:	d104      	bne.n	8007434 <__swbuf_r+0x6c>
 800742a:	4621      	mov	r1, r4
 800742c:	4628      	mov	r0, r5
 800742e:	f000 f933 	bl	8007698 <_fflush_r>
 8007432:	b988      	cbnz	r0, 8007458 <__swbuf_r+0x90>
 8007434:	4638      	mov	r0, r7
 8007436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007438:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <__swbuf_r+0x9c>)
 800743a:	429c      	cmp	r4, r3
 800743c:	d101      	bne.n	8007442 <__swbuf_r+0x7a>
 800743e:	68ac      	ldr	r4, [r5, #8]
 8007440:	e7cf      	b.n	80073e2 <__swbuf_r+0x1a>
 8007442:	4b09      	ldr	r3, [pc, #36]	; (8007468 <__swbuf_r+0xa0>)
 8007444:	429c      	cmp	r4, r3
 8007446:	bf08      	it	eq
 8007448:	68ec      	ldreq	r4, [r5, #12]
 800744a:	e7ca      	b.n	80073e2 <__swbuf_r+0x1a>
 800744c:	4621      	mov	r1, r4
 800744e:	4628      	mov	r0, r5
 8007450:	f000 f81e 	bl	8007490 <__swsetup_r>
 8007454:	2800      	cmp	r0, #0
 8007456:	d0cb      	beq.n	80073f0 <__swbuf_r+0x28>
 8007458:	f04f 37ff 	mov.w	r7, #4294967295
 800745c:	e7ea      	b.n	8007434 <__swbuf_r+0x6c>
 800745e:	bf00      	nop
 8007460:	080079cc 	.word	0x080079cc
 8007464:	080079ec 	.word	0x080079ec
 8007468:	080079ac 	.word	0x080079ac

0800746c <_write_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4d07      	ldr	r5, [pc, #28]	; (800748c <_write_r+0x20>)
 8007470:	4604      	mov	r4, r0
 8007472:	4608      	mov	r0, r1
 8007474:	4611      	mov	r1, r2
 8007476:	2200      	movs	r2, #0
 8007478:	602a      	str	r2, [r5, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	f7f9 fd07 	bl	8000e8e <_write>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_write_r+0x1e>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_write_r+0x1e>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	2000022c 	.word	0x2000022c

08007490 <__swsetup_r>:
 8007490:	4b32      	ldr	r3, [pc, #200]	; (800755c <__swsetup_r+0xcc>)
 8007492:	b570      	push	{r4, r5, r6, lr}
 8007494:	681d      	ldr	r5, [r3, #0]
 8007496:	4606      	mov	r6, r0
 8007498:	460c      	mov	r4, r1
 800749a:	b125      	cbz	r5, 80074a6 <__swsetup_r+0x16>
 800749c:	69ab      	ldr	r3, [r5, #24]
 800749e:	b913      	cbnz	r3, 80074a6 <__swsetup_r+0x16>
 80074a0:	4628      	mov	r0, r5
 80074a2:	f7ff fb55 	bl	8006b50 <__sinit>
 80074a6:	4b2e      	ldr	r3, [pc, #184]	; (8007560 <__swsetup_r+0xd0>)
 80074a8:	429c      	cmp	r4, r3
 80074aa:	d10f      	bne.n	80074cc <__swsetup_r+0x3c>
 80074ac:	686c      	ldr	r4, [r5, #4]
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074b4:	0719      	lsls	r1, r3, #28
 80074b6:	d42c      	bmi.n	8007512 <__swsetup_r+0x82>
 80074b8:	06dd      	lsls	r5, r3, #27
 80074ba:	d411      	bmi.n	80074e0 <__swsetup_r+0x50>
 80074bc:	2309      	movs	r3, #9
 80074be:	6033      	str	r3, [r6, #0]
 80074c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ca:	e03e      	b.n	800754a <__swsetup_r+0xba>
 80074cc:	4b25      	ldr	r3, [pc, #148]	; (8007564 <__swsetup_r+0xd4>)
 80074ce:	429c      	cmp	r4, r3
 80074d0:	d101      	bne.n	80074d6 <__swsetup_r+0x46>
 80074d2:	68ac      	ldr	r4, [r5, #8]
 80074d4:	e7eb      	b.n	80074ae <__swsetup_r+0x1e>
 80074d6:	4b24      	ldr	r3, [pc, #144]	; (8007568 <__swsetup_r+0xd8>)
 80074d8:	429c      	cmp	r4, r3
 80074da:	bf08      	it	eq
 80074dc:	68ec      	ldreq	r4, [r5, #12]
 80074de:	e7e6      	b.n	80074ae <__swsetup_r+0x1e>
 80074e0:	0758      	lsls	r0, r3, #29
 80074e2:	d512      	bpl.n	800750a <__swsetup_r+0x7a>
 80074e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074e6:	b141      	cbz	r1, 80074fa <__swsetup_r+0x6a>
 80074e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074ec:	4299      	cmp	r1, r3
 80074ee:	d002      	beq.n	80074f6 <__swsetup_r+0x66>
 80074f0:	4630      	mov	r0, r6
 80074f2:	f000 f98f 	bl	8007814 <_free_r>
 80074f6:	2300      	movs	r3, #0
 80074f8:	6363      	str	r3, [r4, #52]	; 0x34
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	2300      	movs	r3, #0
 8007504:	6063      	str	r3, [r4, #4]
 8007506:	6923      	ldr	r3, [r4, #16]
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	f043 0308 	orr.w	r3, r3, #8
 8007510:	81a3      	strh	r3, [r4, #12]
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	b94b      	cbnz	r3, 800752a <__swsetup_r+0x9a>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800751c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007520:	d003      	beq.n	800752a <__swsetup_r+0x9a>
 8007522:	4621      	mov	r1, r4
 8007524:	4630      	mov	r0, r6
 8007526:	f000 f929 	bl	800777c <__smakebuf_r>
 800752a:	89a0      	ldrh	r0, [r4, #12]
 800752c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007530:	f010 0301 	ands.w	r3, r0, #1
 8007534:	d00a      	beq.n	800754c <__swsetup_r+0xbc>
 8007536:	2300      	movs	r3, #0
 8007538:	60a3      	str	r3, [r4, #8]
 800753a:	6963      	ldr	r3, [r4, #20]
 800753c:	425b      	negs	r3, r3
 800753e:	61a3      	str	r3, [r4, #24]
 8007540:	6923      	ldr	r3, [r4, #16]
 8007542:	b943      	cbnz	r3, 8007556 <__swsetup_r+0xc6>
 8007544:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007548:	d1ba      	bne.n	80074c0 <__swsetup_r+0x30>
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	0781      	lsls	r1, r0, #30
 800754e:	bf58      	it	pl
 8007550:	6963      	ldrpl	r3, [r4, #20]
 8007552:	60a3      	str	r3, [r4, #8]
 8007554:	e7f4      	b.n	8007540 <__swsetup_r+0xb0>
 8007556:	2000      	movs	r0, #0
 8007558:	e7f7      	b.n	800754a <__swsetup_r+0xba>
 800755a:	bf00      	nop
 800755c:	2000000c 	.word	0x2000000c
 8007560:	080079cc 	.word	0x080079cc
 8007564:	080079ec 	.word	0x080079ec
 8007568:	080079ac 	.word	0x080079ac

0800756c <_close_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d06      	ldr	r5, [pc, #24]	; (8007588 <_close_r+0x1c>)
 8007570:	2300      	movs	r3, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	f7f9 fca5 	bl	8000ec6 <_close>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_close_r+0x1a>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_close_r+0x1a>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	2000022c 	.word	0x2000022c

0800758c <__sflush_r>:
 800758c:	898a      	ldrh	r2, [r1, #12]
 800758e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007592:	4605      	mov	r5, r0
 8007594:	0710      	lsls	r0, r2, #28
 8007596:	460c      	mov	r4, r1
 8007598:	d458      	bmi.n	800764c <__sflush_r+0xc0>
 800759a:	684b      	ldr	r3, [r1, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	dc05      	bgt.n	80075ac <__sflush_r+0x20>
 80075a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dc02      	bgt.n	80075ac <__sflush_r+0x20>
 80075a6:	2000      	movs	r0, #0
 80075a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ae:	2e00      	cmp	r6, #0
 80075b0:	d0f9      	beq.n	80075a6 <__sflush_r+0x1a>
 80075b2:	2300      	movs	r3, #0
 80075b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075b8:	682f      	ldr	r7, [r5, #0]
 80075ba:	602b      	str	r3, [r5, #0]
 80075bc:	d032      	beq.n	8007624 <__sflush_r+0x98>
 80075be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	075a      	lsls	r2, r3, #29
 80075c4:	d505      	bpl.n	80075d2 <__sflush_r+0x46>
 80075c6:	6863      	ldr	r3, [r4, #4]
 80075c8:	1ac0      	subs	r0, r0, r3
 80075ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075cc:	b10b      	cbz	r3, 80075d2 <__sflush_r+0x46>
 80075ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075d0:	1ac0      	subs	r0, r0, r3
 80075d2:	2300      	movs	r3, #0
 80075d4:	4602      	mov	r2, r0
 80075d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075d8:	6a21      	ldr	r1, [r4, #32]
 80075da:	4628      	mov	r0, r5
 80075dc:	47b0      	blx	r6
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	d106      	bne.n	80075f2 <__sflush_r+0x66>
 80075e4:	6829      	ldr	r1, [r5, #0]
 80075e6:	291d      	cmp	r1, #29
 80075e8:	d82c      	bhi.n	8007644 <__sflush_r+0xb8>
 80075ea:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <__sflush_r+0x108>)
 80075ec:	40ca      	lsrs	r2, r1
 80075ee:	07d6      	lsls	r6, r2, #31
 80075f0:	d528      	bpl.n	8007644 <__sflush_r+0xb8>
 80075f2:	2200      	movs	r2, #0
 80075f4:	6062      	str	r2, [r4, #4]
 80075f6:	04d9      	lsls	r1, r3, #19
 80075f8:	6922      	ldr	r2, [r4, #16]
 80075fa:	6022      	str	r2, [r4, #0]
 80075fc:	d504      	bpl.n	8007608 <__sflush_r+0x7c>
 80075fe:	1c42      	adds	r2, r0, #1
 8007600:	d101      	bne.n	8007606 <__sflush_r+0x7a>
 8007602:	682b      	ldr	r3, [r5, #0]
 8007604:	b903      	cbnz	r3, 8007608 <__sflush_r+0x7c>
 8007606:	6560      	str	r0, [r4, #84]	; 0x54
 8007608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800760a:	602f      	str	r7, [r5, #0]
 800760c:	2900      	cmp	r1, #0
 800760e:	d0ca      	beq.n	80075a6 <__sflush_r+0x1a>
 8007610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007614:	4299      	cmp	r1, r3
 8007616:	d002      	beq.n	800761e <__sflush_r+0x92>
 8007618:	4628      	mov	r0, r5
 800761a:	f000 f8fb 	bl	8007814 <_free_r>
 800761e:	2000      	movs	r0, #0
 8007620:	6360      	str	r0, [r4, #52]	; 0x34
 8007622:	e7c1      	b.n	80075a8 <__sflush_r+0x1c>
 8007624:	6a21      	ldr	r1, [r4, #32]
 8007626:	2301      	movs	r3, #1
 8007628:	4628      	mov	r0, r5
 800762a:	47b0      	blx	r6
 800762c:	1c41      	adds	r1, r0, #1
 800762e:	d1c7      	bne.n	80075c0 <__sflush_r+0x34>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0c4      	beq.n	80075c0 <__sflush_r+0x34>
 8007636:	2b1d      	cmp	r3, #29
 8007638:	d001      	beq.n	800763e <__sflush_r+0xb2>
 800763a:	2b16      	cmp	r3, #22
 800763c:	d101      	bne.n	8007642 <__sflush_r+0xb6>
 800763e:	602f      	str	r7, [r5, #0]
 8007640:	e7b1      	b.n	80075a6 <__sflush_r+0x1a>
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	e7ad      	b.n	80075a8 <__sflush_r+0x1c>
 800764c:	690f      	ldr	r7, [r1, #16]
 800764e:	2f00      	cmp	r7, #0
 8007650:	d0a9      	beq.n	80075a6 <__sflush_r+0x1a>
 8007652:	0793      	lsls	r3, r2, #30
 8007654:	680e      	ldr	r6, [r1, #0]
 8007656:	bf08      	it	eq
 8007658:	694b      	ldreq	r3, [r1, #20]
 800765a:	600f      	str	r7, [r1, #0]
 800765c:	bf18      	it	ne
 800765e:	2300      	movne	r3, #0
 8007660:	eba6 0807 	sub.w	r8, r6, r7
 8007664:	608b      	str	r3, [r1, #8]
 8007666:	f1b8 0f00 	cmp.w	r8, #0
 800766a:	dd9c      	ble.n	80075a6 <__sflush_r+0x1a>
 800766c:	6a21      	ldr	r1, [r4, #32]
 800766e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007670:	4643      	mov	r3, r8
 8007672:	463a      	mov	r2, r7
 8007674:	4628      	mov	r0, r5
 8007676:	47b0      	blx	r6
 8007678:	2800      	cmp	r0, #0
 800767a:	dc06      	bgt.n	800768a <__sflush_r+0xfe>
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007682:	81a3      	strh	r3, [r4, #12]
 8007684:	f04f 30ff 	mov.w	r0, #4294967295
 8007688:	e78e      	b.n	80075a8 <__sflush_r+0x1c>
 800768a:	4407      	add	r7, r0
 800768c:	eba8 0800 	sub.w	r8, r8, r0
 8007690:	e7e9      	b.n	8007666 <__sflush_r+0xda>
 8007692:	bf00      	nop
 8007694:	20400001 	.word	0x20400001

08007698 <_fflush_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	690b      	ldr	r3, [r1, #16]
 800769c:	4605      	mov	r5, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	b913      	cbnz	r3, 80076a8 <_fflush_r+0x10>
 80076a2:	2500      	movs	r5, #0
 80076a4:	4628      	mov	r0, r5
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	b118      	cbz	r0, 80076b2 <_fflush_r+0x1a>
 80076aa:	6983      	ldr	r3, [r0, #24]
 80076ac:	b90b      	cbnz	r3, 80076b2 <_fflush_r+0x1a>
 80076ae:	f7ff fa4f 	bl	8006b50 <__sinit>
 80076b2:	4b14      	ldr	r3, [pc, #80]	; (8007704 <_fflush_r+0x6c>)
 80076b4:	429c      	cmp	r4, r3
 80076b6:	d11b      	bne.n	80076f0 <_fflush_r+0x58>
 80076b8:	686c      	ldr	r4, [r5, #4]
 80076ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0ef      	beq.n	80076a2 <_fflush_r+0xa>
 80076c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076c4:	07d0      	lsls	r0, r2, #31
 80076c6:	d404      	bmi.n	80076d2 <_fflush_r+0x3a>
 80076c8:	0599      	lsls	r1, r3, #22
 80076ca:	d402      	bmi.n	80076d2 <_fflush_r+0x3a>
 80076cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ce:	f7ff fadd 	bl	8006c8c <__retarget_lock_acquire_recursive>
 80076d2:	4628      	mov	r0, r5
 80076d4:	4621      	mov	r1, r4
 80076d6:	f7ff ff59 	bl	800758c <__sflush_r>
 80076da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076dc:	07da      	lsls	r2, r3, #31
 80076de:	4605      	mov	r5, r0
 80076e0:	d4e0      	bmi.n	80076a4 <_fflush_r+0xc>
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	059b      	lsls	r3, r3, #22
 80076e6:	d4dd      	bmi.n	80076a4 <_fflush_r+0xc>
 80076e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ea:	f7ff fad0 	bl	8006c8e <__retarget_lock_release_recursive>
 80076ee:	e7d9      	b.n	80076a4 <_fflush_r+0xc>
 80076f0:	4b05      	ldr	r3, [pc, #20]	; (8007708 <_fflush_r+0x70>)
 80076f2:	429c      	cmp	r4, r3
 80076f4:	d101      	bne.n	80076fa <_fflush_r+0x62>
 80076f6:	68ac      	ldr	r4, [r5, #8]
 80076f8:	e7df      	b.n	80076ba <_fflush_r+0x22>
 80076fa:	4b04      	ldr	r3, [pc, #16]	; (800770c <_fflush_r+0x74>)
 80076fc:	429c      	cmp	r4, r3
 80076fe:	bf08      	it	eq
 8007700:	68ec      	ldreq	r4, [r5, #12]
 8007702:	e7da      	b.n	80076ba <_fflush_r+0x22>
 8007704:	080079cc 	.word	0x080079cc
 8007708:	080079ec 	.word	0x080079ec
 800770c:	080079ac 	.word	0x080079ac

08007710 <_lseek_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4d07      	ldr	r5, [pc, #28]	; (8007730 <_lseek_r+0x20>)
 8007714:	4604      	mov	r4, r0
 8007716:	4608      	mov	r0, r1
 8007718:	4611      	mov	r1, r2
 800771a:	2200      	movs	r2, #0
 800771c:	602a      	str	r2, [r5, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	f7f9 fbf8 	bl	8000f14 <_lseek>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_lseek_r+0x1e>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	b103      	cbz	r3, 800772e <_lseek_r+0x1e>
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	2000022c 	.word	0x2000022c

08007734 <__swhatbuf_r>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	460e      	mov	r6, r1
 8007738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800773c:	2900      	cmp	r1, #0
 800773e:	b096      	sub	sp, #88	; 0x58
 8007740:	4614      	mov	r4, r2
 8007742:	461d      	mov	r5, r3
 8007744:	da07      	bge.n	8007756 <__swhatbuf_r+0x22>
 8007746:	2300      	movs	r3, #0
 8007748:	602b      	str	r3, [r5, #0]
 800774a:	89b3      	ldrh	r3, [r6, #12]
 800774c:	061a      	lsls	r2, r3, #24
 800774e:	d410      	bmi.n	8007772 <__swhatbuf_r+0x3e>
 8007750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007754:	e00e      	b.n	8007774 <__swhatbuf_r+0x40>
 8007756:	466a      	mov	r2, sp
 8007758:	f000 f8be 	bl	80078d8 <_fstat_r>
 800775c:	2800      	cmp	r0, #0
 800775e:	dbf2      	blt.n	8007746 <__swhatbuf_r+0x12>
 8007760:	9a01      	ldr	r2, [sp, #4]
 8007762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800776a:	425a      	negs	r2, r3
 800776c:	415a      	adcs	r2, r3
 800776e:	602a      	str	r2, [r5, #0]
 8007770:	e7ee      	b.n	8007750 <__swhatbuf_r+0x1c>
 8007772:	2340      	movs	r3, #64	; 0x40
 8007774:	2000      	movs	r0, #0
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	b016      	add	sp, #88	; 0x58
 800777a:	bd70      	pop	{r4, r5, r6, pc}

0800777c <__smakebuf_r>:
 800777c:	898b      	ldrh	r3, [r1, #12]
 800777e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007780:	079d      	lsls	r5, r3, #30
 8007782:	4606      	mov	r6, r0
 8007784:	460c      	mov	r4, r1
 8007786:	d507      	bpl.n	8007798 <__smakebuf_r+0x1c>
 8007788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	6123      	str	r3, [r4, #16]
 8007790:	2301      	movs	r3, #1
 8007792:	6163      	str	r3, [r4, #20]
 8007794:	b002      	add	sp, #8
 8007796:	bd70      	pop	{r4, r5, r6, pc}
 8007798:	ab01      	add	r3, sp, #4
 800779a:	466a      	mov	r2, sp
 800779c:	f7ff ffca 	bl	8007734 <__swhatbuf_r>
 80077a0:	9900      	ldr	r1, [sp, #0]
 80077a2:	4605      	mov	r5, r0
 80077a4:	4630      	mov	r0, r6
 80077a6:	f7ff fa73 	bl	8006c90 <_malloc_r>
 80077aa:	b948      	cbnz	r0, 80077c0 <__smakebuf_r+0x44>
 80077ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077b0:	059a      	lsls	r2, r3, #22
 80077b2:	d4ef      	bmi.n	8007794 <__smakebuf_r+0x18>
 80077b4:	f023 0303 	bic.w	r3, r3, #3
 80077b8:	f043 0302 	orr.w	r3, r3, #2
 80077bc:	81a3      	strh	r3, [r4, #12]
 80077be:	e7e3      	b.n	8007788 <__smakebuf_r+0xc>
 80077c0:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <__smakebuf_r+0x7c>)
 80077c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80077c4:	89a3      	ldrh	r3, [r4, #12]
 80077c6:	6020      	str	r0, [r4, #0]
 80077c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077cc:	81a3      	strh	r3, [r4, #12]
 80077ce:	9b00      	ldr	r3, [sp, #0]
 80077d0:	6163      	str	r3, [r4, #20]
 80077d2:	9b01      	ldr	r3, [sp, #4]
 80077d4:	6120      	str	r0, [r4, #16]
 80077d6:	b15b      	cbz	r3, 80077f0 <__smakebuf_r+0x74>
 80077d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077dc:	4630      	mov	r0, r6
 80077de:	f000 f88d 	bl	80078fc <_isatty_r>
 80077e2:	b128      	cbz	r0, 80077f0 <__smakebuf_r+0x74>
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	f023 0303 	bic.w	r3, r3, #3
 80077ea:	f043 0301 	orr.w	r3, r3, #1
 80077ee:	81a3      	strh	r3, [r4, #12]
 80077f0:	89a0      	ldrh	r0, [r4, #12]
 80077f2:	4305      	orrs	r5, r0
 80077f4:	81a5      	strh	r5, [r4, #12]
 80077f6:	e7cd      	b.n	8007794 <__smakebuf_r+0x18>
 80077f8:	08006ae9 	.word	0x08006ae9

080077fc <__malloc_lock>:
 80077fc:	4801      	ldr	r0, [pc, #4]	; (8007804 <__malloc_lock+0x8>)
 80077fe:	f7ff ba45 	b.w	8006c8c <__retarget_lock_acquire_recursive>
 8007802:	bf00      	nop
 8007804:	20000224 	.word	0x20000224

08007808 <__malloc_unlock>:
 8007808:	4801      	ldr	r0, [pc, #4]	; (8007810 <__malloc_unlock+0x8>)
 800780a:	f7ff ba40 	b.w	8006c8e <__retarget_lock_release_recursive>
 800780e:	bf00      	nop
 8007810:	20000224 	.word	0x20000224

08007814 <_free_r>:
 8007814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007816:	2900      	cmp	r1, #0
 8007818:	d048      	beq.n	80078ac <_free_r+0x98>
 800781a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800781e:	9001      	str	r0, [sp, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f1a1 0404 	sub.w	r4, r1, #4
 8007826:	bfb8      	it	lt
 8007828:	18e4      	addlt	r4, r4, r3
 800782a:	f7ff ffe7 	bl	80077fc <__malloc_lock>
 800782e:	4a20      	ldr	r2, [pc, #128]	; (80078b0 <_free_r+0x9c>)
 8007830:	9801      	ldr	r0, [sp, #4]
 8007832:	6813      	ldr	r3, [r2, #0]
 8007834:	4615      	mov	r5, r2
 8007836:	b933      	cbnz	r3, 8007846 <_free_r+0x32>
 8007838:	6063      	str	r3, [r4, #4]
 800783a:	6014      	str	r4, [r2, #0]
 800783c:	b003      	add	sp, #12
 800783e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007842:	f7ff bfe1 	b.w	8007808 <__malloc_unlock>
 8007846:	42a3      	cmp	r3, r4
 8007848:	d90b      	bls.n	8007862 <_free_r+0x4e>
 800784a:	6821      	ldr	r1, [r4, #0]
 800784c:	1862      	adds	r2, r4, r1
 800784e:	4293      	cmp	r3, r2
 8007850:	bf04      	itt	eq
 8007852:	681a      	ldreq	r2, [r3, #0]
 8007854:	685b      	ldreq	r3, [r3, #4]
 8007856:	6063      	str	r3, [r4, #4]
 8007858:	bf04      	itt	eq
 800785a:	1852      	addeq	r2, r2, r1
 800785c:	6022      	streq	r2, [r4, #0]
 800785e:	602c      	str	r4, [r5, #0]
 8007860:	e7ec      	b.n	800783c <_free_r+0x28>
 8007862:	461a      	mov	r2, r3
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	b10b      	cbz	r3, 800786c <_free_r+0x58>
 8007868:	42a3      	cmp	r3, r4
 800786a:	d9fa      	bls.n	8007862 <_free_r+0x4e>
 800786c:	6811      	ldr	r1, [r2, #0]
 800786e:	1855      	adds	r5, r2, r1
 8007870:	42a5      	cmp	r5, r4
 8007872:	d10b      	bne.n	800788c <_free_r+0x78>
 8007874:	6824      	ldr	r4, [r4, #0]
 8007876:	4421      	add	r1, r4
 8007878:	1854      	adds	r4, r2, r1
 800787a:	42a3      	cmp	r3, r4
 800787c:	6011      	str	r1, [r2, #0]
 800787e:	d1dd      	bne.n	800783c <_free_r+0x28>
 8007880:	681c      	ldr	r4, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	6053      	str	r3, [r2, #4]
 8007886:	4421      	add	r1, r4
 8007888:	6011      	str	r1, [r2, #0]
 800788a:	e7d7      	b.n	800783c <_free_r+0x28>
 800788c:	d902      	bls.n	8007894 <_free_r+0x80>
 800788e:	230c      	movs	r3, #12
 8007890:	6003      	str	r3, [r0, #0]
 8007892:	e7d3      	b.n	800783c <_free_r+0x28>
 8007894:	6825      	ldr	r5, [r4, #0]
 8007896:	1961      	adds	r1, r4, r5
 8007898:	428b      	cmp	r3, r1
 800789a:	bf04      	itt	eq
 800789c:	6819      	ldreq	r1, [r3, #0]
 800789e:	685b      	ldreq	r3, [r3, #4]
 80078a0:	6063      	str	r3, [r4, #4]
 80078a2:	bf04      	itt	eq
 80078a4:	1949      	addeq	r1, r1, r5
 80078a6:	6021      	streq	r1, [r4, #0]
 80078a8:	6054      	str	r4, [r2, #4]
 80078aa:	e7c7      	b.n	800783c <_free_r+0x28>
 80078ac:	b003      	add	sp, #12
 80078ae:	bd30      	pop	{r4, r5, pc}
 80078b0:	20000090 	.word	0x20000090

080078b4 <_read_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d07      	ldr	r5, [pc, #28]	; (80078d4 <_read_r+0x20>)
 80078b8:	4604      	mov	r4, r0
 80078ba:	4608      	mov	r0, r1
 80078bc:	4611      	mov	r1, r2
 80078be:	2200      	movs	r2, #0
 80078c0:	602a      	str	r2, [r5, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	f7f9 fac6 	bl	8000e54 <_read>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_read_r+0x1e>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_read_r+0x1e>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	2000022c 	.word	0x2000022c

080078d8 <_fstat_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4d07      	ldr	r5, [pc, #28]	; (80078f8 <_fstat_r+0x20>)
 80078dc:	2300      	movs	r3, #0
 80078de:	4604      	mov	r4, r0
 80078e0:	4608      	mov	r0, r1
 80078e2:	4611      	mov	r1, r2
 80078e4:	602b      	str	r3, [r5, #0]
 80078e6:	f7f9 fafa 	bl	8000ede <_fstat>
 80078ea:	1c43      	adds	r3, r0, #1
 80078ec:	d102      	bne.n	80078f4 <_fstat_r+0x1c>
 80078ee:	682b      	ldr	r3, [r5, #0]
 80078f0:	b103      	cbz	r3, 80078f4 <_fstat_r+0x1c>
 80078f2:	6023      	str	r3, [r4, #0]
 80078f4:	bd38      	pop	{r3, r4, r5, pc}
 80078f6:	bf00      	nop
 80078f8:	2000022c 	.word	0x2000022c

080078fc <_isatty_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4d06      	ldr	r5, [pc, #24]	; (8007918 <_isatty_r+0x1c>)
 8007900:	2300      	movs	r3, #0
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	f7f9 faf9 	bl	8000efe <_isatty>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_isatty_r+0x1a>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_isatty_r+0x1a>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	2000022c 	.word	0x2000022c

0800791c <_init>:
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	bf00      	nop
 8007920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007922:	bc08      	pop	{r3}
 8007924:	469e      	mov	lr, r3
 8007926:	4770      	bx	lr

08007928 <_fini>:
 8007928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792a:	bf00      	nop
 800792c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792e:	bc08      	pop	{r3}
 8007930:	469e      	mov	lr, r3
 8007932:	4770      	bx	lr
