
sundetector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008470  08008470  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008470  08008470  00018470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008478  08008478  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800847c  0800847c  0001847c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000070  080084f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  080084f0  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017309  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af5  00000000  00000000  000373a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00039ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f4a  00000000  00000000  0003c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ca9  00000000  00000000  00066462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108b7a  00000000  00000000  0007b10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183c85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb4  00000000  00000000  00183cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008130 	.word	0x08008130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008130 	.word	0x08008130

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <cuappDequeue>:
    p->handle = 0;
    memset(p->data,'\0',len+1);
    memcpy(p->data, pbuf, len);
}

struct sQueueData *cuappDequeue(void){
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
    struct sQueueData *p;
    p = cumsgBufHead;
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <cuappDequeue+0x2c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	607b      	str	r3, [r7, #4]
    if(cumsgBufHead != NULL){
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <cuappDequeue+0x2c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d003      	beq.n	80005b4 <cuappDequeue+0x1c>
        cumsgBufHead = p->next;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <cuappDequeue+0x2c>)
 80005b2:	6013      	str	r3, [r2, #0]
    }
    return p;
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	2000008c 	.word	0x2000008c

080005c8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART2 and Loop until the end of transmission */
  if (ch == '\n')
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b0a      	cmp	r3, #10
 80005d4:	d106      	bne.n	80005e4 <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 80005d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005da:	2201      	movs	r2, #1
 80005dc:	4907      	ldr	r1, [pc, #28]	; (80005fc <__io_putchar+0x34>)
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <__io_putchar+0x38>)
 80005e0:	f005 ffc2 	bl	8006568 <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ea:	2201      	movs	r2, #1
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <__io_putchar+0x38>)
 80005ee:	f005 ffbb 	bl	8006568 <HAL_UART_Transmit>

  return ch;
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	08008148 	.word	0x08008148
 8000600:	20000238 	.word	0x20000238

08000604 <splitString>:
char *splitdata[5];

void splitString(void){
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]
	static struct sQueueData *p = NULL;
	p = cuappDequeue();
 800060e:	f7ff ffc3 	bl	8000598 <cuappDequeue>
 8000612:	4603      	mov	r3, r0
 8000614:	4a16      	ldr	r2, [pc, #88]	; (8000670 <splitString+0x6c>)
 8000616:	6013      	str	r3, [r2, #0]
	if(p != NULL){
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <splitString+0x6c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d01e      	beq.n	800065e <splitString+0x5a>
		splitdata[count] = strtok((char*)p->data, "|");
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <splitString+0x6c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3306      	adds	r3, #6
 8000626:	79fc      	ldrb	r4, [r7, #7]
 8000628:	4912      	ldr	r1, [pc, #72]	; (8000674 <splitString+0x70>)
 800062a:	4618      	mov	r0, r3
 800062c:	f007 f8fa 	bl	8007824 <strtok>
 8000630:	4603      	mov	r3, r0
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <splitString+0x74>)
 8000634:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		while(splitdata[count])
 8000638:	e00b      	b.n	8000652 <splitString+0x4e>
		{
			splitdata[++count] = strtok(NULL, "|");
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	3301      	adds	r3, #1
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	79fc      	ldrb	r4, [r7, #7]
 8000642:	490c      	ldr	r1, [pc, #48]	; (8000674 <splitString+0x70>)
 8000644:	2000      	movs	r0, #0
 8000646:	f007 f8ed 	bl	8007824 <strtok>
 800064a:	4603      	mov	r3, r0
 800064c:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <splitString+0x74>)
 800064e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		while(splitdata[count])
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a08      	ldr	r2, [pc, #32]	; (8000678 <splitString+0x74>)
 8000656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1ed      	bne.n	800063a <splitString+0x36>
		}
	}
	free(p);
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <splitString+0x6c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f006 fc72 	bl	8006f4c <free>
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000090 	.word	0x20000090
 8000674:	0800814c 	.word	0x0800814c
 8000678:	200000a0 	.word	0x200000a0

0800067c <mqtt>:
void mqtt(const char* url, const char *port, const char *iotid, const char *iotpwd , const char *topic)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0a0      	sub	sp, #128	; 0x80
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	603b      	str	r3, [r7, #0]

	uint8_t state = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t i,j,k;

	char _mqtt[50];
	char _topic[50];
	strcat(_mqtt,"|4|1|1|");
 8000690:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fda5 	bl	80001e4 <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006a2:	4413      	add	r3, r2
 80006a4:	49b9      	ldr	r1, [pc, #740]	; (800098c <mqtt+0x310>)
 80006a6:	461a      	mov	r2, r3
 80006a8:	460b      	mov	r3, r1
 80006aa:	cb03      	ldmia	r3!, {r0, r1}
 80006ac:	6010      	str	r0, [r2, #0]
 80006ae:	6051      	str	r1, [r2, #4]
	strcat(_mqtt,url);
 80006b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006b4:	68f9      	ldr	r1, [r7, #12]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f007 f8a4 	bl	8007804 <strcat>
	strcat(_mqtt,"|");
 80006bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fd8f 	bl	80001e4 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ce:	4413      	add	r3, r2
 80006d0:	49af      	ldr	r1, [pc, #700]	; (8000990 <mqtt+0x314>)
 80006d2:	461a      	mov	r2, r3
 80006d4:	460b      	mov	r3, r1
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	8013      	strh	r3, [r2, #0]
	strcat(_mqtt,port);
 80006da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f007 f88f 	bl	8007804 <strcat>
	strcat(_mqtt,"|");
 80006e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd7a 	bl	80001e4 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006f8:	4413      	add	r3, r2
 80006fa:	49a5      	ldr	r1, [pc, #660]	; (8000990 <mqtt+0x314>)
 80006fc:	461a      	mov	r2, r3
 80006fe:	460b      	mov	r3, r1
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	8013      	strh	r3, [r2, #0]
	strcat(_mqtt,iotid);
 8000704:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000708:	6879      	ldr	r1, [r7, #4]
 800070a:	4618      	mov	r0, r3
 800070c:	f007 f87a 	bl	8007804 <strcat>
	strcat(_mqtt,"|");
 8000710:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd65 	bl	80001e4 <strlen>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000722:	4413      	add	r3, r2
 8000724:	499a      	ldr	r1, [pc, #616]	; (8000990 <mqtt+0x314>)
 8000726:	461a      	mov	r2, r3
 8000728:	460b      	mov	r3, r1
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	8013      	strh	r3, [r2, #0]
	strcat(_mqtt,iotpwd);
 800072e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000732:	6839      	ldr	r1, [r7, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f007 f865 	bl	8007804 <strcat>
	strcat(_mqtt,"|\\r");
 800073a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fd50 	bl	80001e4 <strlen>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800074c:	4413      	add	r3, r2
 800074e:	4a91      	ldr	r2, [pc, #580]	; (8000994 <mqtt+0x318>)
 8000750:	6810      	ldr	r0, [r2, #0]
 8000752:	6018      	str	r0, [r3, #0]
	printf("%s\n",_mqtt);
 8000754:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000758:	4618      	mov	r0, r3
 800075a:	f007 f83b 	bl	80077d4 <puts>
	for(k=0;k<50;k++)
 800075e:	2300      	movs	r3, #0
 8000760:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8000764:	e00f      	b.n	8000786 <mqtt+0x10a>
			HAL_UART_Transmit (&huart3, (uint8_t*) _mqtt+k, 1, 0xFFFF);
 8000766:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800076a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800076e:	18d1      	adds	r1, r2, r3
 8000770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000774:	2201      	movs	r2, #1
 8000776:	4888      	ldr	r0, [pc, #544]	; (8000998 <mqtt+0x31c>)
 8000778:	f005 fef6 	bl	8006568 <HAL_UART_Transmit>
	for(k=0;k<50;k++)
 800077c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000780:	3301      	adds	r3, #1
 8000782:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8000786:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800078a:	2b31      	cmp	r3, #49	; 0x31
 800078c:	d9eb      	bls.n	8000766 <mqtt+0xea>
	//Usart_SendStriong(USART3, _mqtt);
	memset(_mqtt,'\0',50);
 800078e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000792:	2232      	movs	r2, #50	; 0x32
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f006 fbe0 	bl	8006f5c <memset>
	while(state == 1){
 800079c:	e03d      	b.n	800081a <mqtt+0x19e>
		splitString();
 800079e:	f7ff ff31 	bl	8000604 <splitString>
		if(strcmp("4",splitdata[0]) == 0){
 80007a2:	4b7e      	ldr	r3, [pc, #504]	; (800099c <mqtt+0x320>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	487d      	ldr	r0, [pc, #500]	; (80009a0 <mqtt+0x324>)
 80007aa:	f7ff fd11 	bl	80001d0 <strcmp>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d119      	bne.n	80007e8 <mqtt+0x16c>
			if(strcmp("1",splitdata[2]) == 0){
 80007b4:	4b79      	ldr	r3, [pc, #484]	; (800099c <mqtt+0x320>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	4619      	mov	r1, r3
 80007ba:	487a      	ldr	r0, [pc, #488]	; (80009a4 <mqtt+0x328>)
 80007bc:	f7ff fd08 	bl	80001d0 <strcmp>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d113      	bne.n	80007ee <mqtt+0x172>
				if(strcmp("1",splitdata[3]) == 0){
 80007c6:	4b75      	ldr	r3, [pc, #468]	; (800099c <mqtt+0x320>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4875      	ldr	r0, [pc, #468]	; (80009a4 <mqtt+0x328>)
 80007ce:	f7ff fcff 	bl	80001d0 <strcmp>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d103      	bne.n	80007e0 <mqtt+0x164>
					state=0;
 80007d8:	2300      	movs	r3, #0
 80007da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80007de:	e006      	b.n	80007ee <mqtt+0x172>
				}else{
					printf(".");
 80007e0:	202e      	movs	r0, #46	; 0x2e
 80007e2:	f006 ff73 	bl	80076cc <putchar>
 80007e6:	e002      	b.n	80007ee <mqtt+0x172>
				}
			}
		}else{
			printf(".");
 80007e8:	202e      	movs	r0, #46	; 0x2e
 80007ea:	f006 ff6f 	bl	80076cc <putchar>
		}
		for(i=0; i<5; i++){
 80007ee:	2300      	movs	r3, #0
 80007f0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80007f4:	e00a      	b.n	800080c <mqtt+0x190>
			splitdata[i] = "\0";
 80007f6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80007fa:	4a68      	ldr	r2, [pc, #416]	; (800099c <mqtt+0x320>)
 80007fc:	496a      	ldr	r1, [pc, #424]	; (80009a8 <mqtt+0x32c>)
 80007fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i=0; i<5; i++){
 8000802:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000806:	3301      	adds	r3, #1
 8000808:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800080c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000810:	2b04      	cmp	r3, #4
 8000812:	d9f0      	bls.n	80007f6 <mqtt+0x17a>
		}
		HAL_Delay(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f001 f9d5 	bl	8001bc4 <HAL_Delay>
	while(state == 1){
 800081a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800081e:	2b01      	cmp	r3, #1
 8000820:	d0bd      	beq.n	800079e <mqtt+0x122>
	}
	printf("MQTT Connect SUCCESS\n");
 8000822:	4862      	ldr	r0, [pc, #392]	; (80009ac <mqtt+0x330>)
 8000824:	f006 ffd6 	bl	80077d4 <puts>
	state=1;
 8000828:	2301      	movs	r3, #1
 800082a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	strcat(_topic,"|4|1|2|");
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fcd6 	bl	80001e4 <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4413      	add	r3, r2
 8000842:	495b      	ldr	r1, [pc, #364]	; (80009b0 <mqtt+0x334>)
 8000844:	461a      	mov	r2, r3
 8000846:	460b      	mov	r3, r1
 8000848:	cb03      	ldmia	r3!, {r0, r1}
 800084a:	6010      	str	r0, [r2, #0]
 800084c:	6051      	str	r1, [r2, #4]
	strcat(_topic,topic);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000856:	4618      	mov	r0, r3
 8000858:	f006 ffd4 	bl	8007804 <strcat>
	strcat(_topic,"|\r");
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fcbf 	bl	80001e4 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4413      	add	r3, r2
 8000870:	4a50      	ldr	r2, [pc, #320]	; (80009b4 <mqtt+0x338>)
 8000872:	8811      	ldrh	r1, [r2, #0]
 8000874:	7892      	ldrb	r2, [r2, #2]
 8000876:	8019      	strh	r1, [r3, #0]
 8000878:	709a      	strb	r2, [r3, #2]
	printf("%s\n",_topic);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4618      	mov	r0, r3
 8000880:	f006 ffa8 	bl	80077d4 <puts>
	//HAL_UART_Transmit(&huart3, _topic, sizeof(_topic), 10);
	//Usart_SendStriong(USART3, _topic);
	for(j=0;j<50;j++)
 8000884:	2300      	movs	r3, #0
 8000886:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 800088a:	e00f      	b.n	80008ac <mqtt+0x230>
			HAL_UART_Transmit (&huart3, (uint8_t*) _topic+j, 1, 0xFFFF);
 800088c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000890:	f107 0214 	add.w	r2, r7, #20
 8000894:	18d1      	adds	r1, r2, r3
 8000896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800089a:	2201      	movs	r2, #1
 800089c:	483e      	ldr	r0, [pc, #248]	; (8000998 <mqtt+0x31c>)
 800089e:	f005 fe63 	bl	8006568 <HAL_UART_Transmit>
	for(j=0;j<50;j++)
 80008a2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80008a6:	3301      	adds	r3, #1
 80008a8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80008ac:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80008b0:	2b31      	cmp	r3, #49	; 0x31
 80008b2:	d9eb      	bls.n	800088c <mqtt+0x210>
	memset(_topic,'\0',50);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2232      	movs	r2, #50	; 0x32
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f006 fb4d 	bl	8006f5c <memset>
	while(state == 1){
 80008c2:	e057      	b.n	8000974 <mqtt+0x2f8>
		splitString();
 80008c4:	f7ff fe9e 	bl	8000604 <splitString>
		if(strcmp("4",splitdata[0]) == 0){
 80008c8:	4b34      	ldr	r3, [pc, #208]	; (800099c <mqtt+0x320>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	4834      	ldr	r0, [pc, #208]	; (80009a0 <mqtt+0x324>)
 80008d0:	f7ff fc7e 	bl	80001d0 <strcmp>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d136      	bne.n	8000948 <mqtt+0x2cc>
			if(strcmp("2",splitdata[2]) == 0){
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <mqtt+0x320>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	4619      	mov	r1, r3
 80008e0:	4835      	ldr	r0, [pc, #212]	; (80009b8 <mqtt+0x33c>)
 80008e2:	f7ff fc75 	bl	80001d0 <strcmp>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d12a      	bne.n	8000942 <mqtt+0x2c6>
				if(strcmp("1",splitdata[3]) == 0){
 80008ec:	4b2b      	ldr	r3, [pc, #172]	; (800099c <mqtt+0x320>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	4619      	mov	r1, r3
 80008f2:	482c      	ldr	r0, [pc, #176]	; (80009a4 <mqtt+0x328>)
 80008f4:	f7ff fc6c 	bl	80001d0 <strcmp>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d103      	bne.n	8000906 <mqtt+0x28a>
					state=0;
 80008fe:	2300      	movs	r3, #0
 8000900:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000904:	e020      	b.n	8000948 <mqtt+0x2cc>
				}else if(strcmp("1",splitdata[4]) == 0){
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <mqtt+0x320>)
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	4619      	mov	r1, r3
 800090c:	4825      	ldr	r0, [pc, #148]	; (80009a4 <mqtt+0x328>)
 800090e:	f7ff fc5f 	bl	80001d0 <strcmp>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <mqtt+0x2a4>
					printf("Subscription limit reached");
 8000918:	4828      	ldr	r0, [pc, #160]	; (80009bc <mqtt+0x340>)
 800091a:	f006 febf 	bl	800769c <iprintf>
 800091e:	e013      	b.n	8000948 <mqtt+0x2cc>
				}else if(strcmp("2",splitdata[4]) != 0){
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <mqtt+0x320>)
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	4619      	mov	r1, r3
 8000926:	4824      	ldr	r0, [pc, #144]	; (80009b8 <mqtt+0x33c>)
 8000928:	f7ff fc52 	bl	80001d0 <strcmp>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d003      	beq.n	800093a <mqtt+0x2be>
					printf("Subscription failed");
 8000932:	4823      	ldr	r0, [pc, #140]	; (80009c0 <mqtt+0x344>)
 8000934:	f006 feb2 	bl	800769c <iprintf>
 8000938:	e006      	b.n	8000948 <mqtt+0x2cc>
				}else{
					printf(".");
 800093a:	202e      	movs	r0, #46	; 0x2e
 800093c:	f006 fec6 	bl	80076cc <putchar>
 8000940:	e002      	b.n	8000948 <mqtt+0x2cc>
				}
		}else{
			printf(".");
 8000942:	202e      	movs	r0, #46	; 0x2e
 8000944:	f006 fec2 	bl	80076cc <putchar>
			}
		}
		for(i=0; i<5; i++){
 8000948:	2300      	movs	r3, #0
 800094a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800094e:	e00a      	b.n	8000966 <mqtt+0x2ea>
			splitdata[i] = "\0";
 8000950:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000954:	4a11      	ldr	r2, [pc, #68]	; (800099c <mqtt+0x320>)
 8000956:	4914      	ldr	r1, [pc, #80]	; (80009a8 <mqtt+0x32c>)
 8000958:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i=0; i<5; i++){
 800095c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000960:	3301      	adds	r3, #1
 8000962:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000966:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800096a:	2b04      	cmp	r3, #4
 800096c:	d9f0      	bls.n	8000950 <mqtt+0x2d4>
		}
		HAL_Delay(100);
 800096e:	2064      	movs	r0, #100	; 0x64
 8000970:	f001 f928 	bl	8001bc4 <HAL_Delay>
	while(state == 1){
 8000974:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000978:	2b01      	cmp	r3, #1
 800097a:	d0a3      	beq.n	80008c4 <mqtt+0x248>
	}
	printf("Subscribe Topic SUCCESS\n");
 800097c:	4811      	ldr	r0, [pc, #68]	; (80009c4 <mqtt+0x348>)
 800097e:	f006 ff29 	bl	80077d4 <puts>
}
 8000982:	bf00      	nop
 8000984:	3780      	adds	r7, #128	; 0x80
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	08008150 	.word	0x08008150
 8000990:	0800814c 	.word	0x0800814c
 8000994:	08008158 	.word	0x08008158
 8000998:	20000108 	.word	0x20000108
 800099c:	200000a0 	.word	0x200000a0
 80009a0:	0800815c 	.word	0x0800815c
 80009a4:	08008160 	.word	0x08008160
 80009a8:	08008164 	.word	0x08008164
 80009ac:	08008168 	.word	0x08008168
 80009b0:	08008180 	.word	0x08008180
 80009b4:	08008188 	.word	0x08008188
 80009b8:	0800818c 	.word	0x0800818c
 80009bc:	08008190 	.word	0x08008190
 80009c0:	080081ac 	.word	0x080081ac
 80009c4:	080081c0 	.word	0x080081c0

080009c8 <publish>:
void publish(const char *topic,const char *masag)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b090      	sub	sp, #64	; 0x40
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]

	uint8_t state = 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t i,j,k=0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	char _data[50];
	strcat(_data,"|4|1|3|");
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fbfe 	bl	80001e4 <strlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	4413      	add	r3, r2
 80009f2:	4955      	ldr	r1, [pc, #340]	; (8000b48 <publish+0x180>)
 80009f4:	461a      	mov	r2, r3
 80009f6:	460b      	mov	r3, r1
 80009f8:	cb03      	ldmia	r3!, {r0, r1}
 80009fa:	6010      	str	r0, [r2, #0]
 80009fc:	6051      	str	r1, [r2, #4]
	strcat(_data,topic);
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f006 fefd 	bl	8007804 <strcat>
	strcat(_data,"|");
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fbe8 	bl	80001e4 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	4413      	add	r3, r2
 8000a1e:	494b      	ldr	r1, [pc, #300]	; (8000b4c <publish+0x184>)
 8000a20:	461a      	mov	r2, r3
 8000a22:	460b      	mov	r3, r1
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	8013      	strh	r3, [r2, #0]
	strcat(_data,masag);
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	6839      	ldr	r1, [r7, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f006 fee8 	bl	8007804 <strcat>
	strcat(_data,"|\r");
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fbd3 	bl	80001e4 <strlen>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	4413      	add	r3, r2
 8000a48:	4a41      	ldr	r2, [pc, #260]	; (8000b50 <publish+0x188>)
 8000a4a:	8811      	ldrh	r1, [r2, #0]
 8000a4c:	7892      	ldrb	r2, [r2, #2]
 8000a4e:	8019      	strh	r1, [r3, #0]
 8000a50:	709a      	strb	r2, [r3, #2]
	printf("%s\n",_data);
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4618      	mov	r0, r3
 8000a58:	f006 febc 	bl	80077d4 <puts>
	//HAL_UART_Transmit(&huart3, _data, sizeof(_data), 10);
	for(k=0;k<50;k++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000a62:	e00f      	b.n	8000a84 <publish+0xbc>
			HAL_UART_Transmit (&huart3, (uint8_t*) _data+k, 1, 0xFFFF);
 8000a64:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000a68:	f107 0208 	add.w	r2, r7, #8
 8000a6c:	18d1      	adds	r1, r2, r3
 8000a6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a72:	2201      	movs	r2, #1
 8000a74:	4837      	ldr	r0, [pc, #220]	; (8000b54 <publish+0x18c>)
 8000a76:	f005 fd77 	bl	8006568 <HAL_UART_Transmit>
	for(k=0;k<50;k++)
 8000a7a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000a7e:	3301      	adds	r3, #1
 8000a80:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000a84:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000a88:	2b31      	cmp	r3, #49	; 0x31
 8000a8a:	d9eb      	bls.n	8000a64 <publish+0x9c>

	while(state == 1){
 8000a8c:	e04c      	b.n	8000b28 <publish+0x160>
		splitString();
 8000a8e:	f7ff fdb9 	bl	8000604 <splitString>
		if(strcmp("4",splitdata[0]) == 0){
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <publish+0x190>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	4830      	ldr	r0, [pc, #192]	; (8000b5c <publish+0x194>)
 8000a9a:	f7ff fb99 	bl	80001d0 <strcmp>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d11c      	bne.n	8000ade <publish+0x116>
			if(strcmp("3",splitdata[2]) == 0){
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <publish+0x190>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	482d      	ldr	r0, [pc, #180]	; (8000b60 <publish+0x198>)
 8000aac:	f7ff fb90 	bl	80001d0 <strcmp>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d11d      	bne.n	8000af2 <publish+0x12a>
				if(strcmp("1",splitdata[3]) == 0){
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <publish+0x190>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	4619      	mov	r1, r3
 8000abc:	4829      	ldr	r0, [pc, #164]	; (8000b64 <publish+0x19c>)
 8000abe:	f7ff fb87 	bl	80001d0 <strcmp>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d106      	bne.n	8000ad6 <publish+0x10e>
					state=0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					printf("Successfully sent\n");
 8000ace:	4826      	ldr	r0, [pc, #152]	; (8000b68 <publish+0x1a0>)
 8000ad0:	f006 fe80 	bl	80077d4 <puts>
 8000ad4:	e00d      	b.n	8000af2 <publish+0x12a>
				}else{
					printf("Failed to send message\n");
 8000ad6:	4825      	ldr	r0, [pc, #148]	; (8000b6c <publish+0x1a4>)
 8000ad8:	f006 fe7c 	bl	80077d4 <puts>
 8000adc:	e009      	b.n	8000af2 <publish+0x12a>
				}
			}
		}else if(j == (uint8_t)100){
 8000ade:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000ae2:	2b64      	cmp	r3, #100	; 0x64
 8000ae4:	d105      	bne.n	8000af2 <publish+0x12a>
			printf("time out");
 8000ae6:	4822      	ldr	r0, [pc, #136]	; (8000b70 <publish+0x1a8>)
 8000ae8:	f006 fdd8 	bl	800769c <iprintf>
			state = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
		for(i=0; i<5; i++){
 8000af2:	2300      	movs	r3, #0
 8000af4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000af8:	e00a      	b.n	8000b10 <publish+0x148>
			splitdata[i] = "\0";
 8000afa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <publish+0x190>)
 8000b00:	491c      	ldr	r1, [pc, #112]	; (8000b74 <publish+0x1ac>)
 8000b02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i=0; i<5; i++){
 8000b06:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000b10:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d9f0      	bls.n	8000afa <publish+0x132>
		}
		j++;
 8000b18:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		HAL_Delay(100);
 8000b22:	2064      	movs	r0, #100	; 0x64
 8000b24:	f001 f84e 	bl	8001bc4 <HAL_Delay>
	while(state == 1){
 8000b28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d0ae      	beq.n	8000a8e <publish+0xc6>
	}
	memset(_data,'\0',50);
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	2232      	movs	r2, #50	; 0x32
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 fa0f 	bl	8006f5c <memset>
}
 8000b3e:	bf00      	nop
 8000b40:	3740      	adds	r7, #64	; 0x40
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	080081d8 	.word	0x080081d8
 8000b4c:	0800814c 	.word	0x0800814c
 8000b50:	08008188 	.word	0x08008188
 8000b54:	20000108 	.word	0x20000108
 8000b58:	200000a0 	.word	0x200000a0
 8000b5c:	0800815c 	.word	0x0800815c
 8000b60:	080081e0 	.word	0x080081e0
 8000b64:	08008160 	.word	0x08008160
 8000b68:	080081e4 	.word	0x080081e4
 8000b6c:	080081f8 	.word	0x080081f8
 8000b70:	08008210 	.word	0x08008210
 8000b74:	08008164 	.word	0x08008164

08000b78 <loop>:
void loop(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

	uint8_t state = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	71fb      	strb	r3, [r7, #7]
	uint8_t i,j=0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	717b      	strb	r3, [r7, #5]

	while(state == 1){
 8000b86:	e076      	b.n	8000c76 <loop+0xfe>
		splitString();
 8000b88:	f7ff fd3c 	bl	8000604 <splitString>
		if(strcmp("4",splitdata[0]) == 0){
 8000b8c:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <loop+0x110>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	483e      	ldr	r0, [pc, #248]	; (8000c8c <loop+0x114>)
 8000b94:	f7ff fb1c 	bl	80001d0 <strcmp>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d117      	bne.n	8000bce <loop+0x56>
			if(strcmp("5",splitdata[2]) == 0){
 8000b9e:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <loop+0x110>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	483a      	ldr	r0, [pc, #232]	; (8000c90 <loop+0x118>)
 8000ba6:	f7ff fb13 	bl	80001d0 <strcmp>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d14e      	bne.n	8000c4e <loop+0xd6>
				state=0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	71fb      	strb	r3, [r7, #7]
				printf("topic:%s\n",splitdata[3]);
 8000bb4:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <loop+0x110>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4836      	ldr	r0, [pc, #216]	; (8000c94 <loop+0x11c>)
 8000bbc:	f006 fd6e 	bl	800769c <iprintf>
				printf("massage:%s\n",splitdata[4]);
 8000bc0:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <loop+0x110>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4834      	ldr	r0, [pc, #208]	; (8000c98 <loop+0x120>)
 8000bc8:	f006 fd68 	bl	800769c <iprintf>
 8000bcc:	e03f      	b.n	8000c4e <loop+0xd6>
			}
		}else if(strcmp("3",splitdata[0]) == 0){
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <loop+0x110>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4831      	ldr	r0, [pc, #196]	; (8000c9c <loop+0x124>)
 8000bd6:	f7ff fafb 	bl	80001d0 <strcmp>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d12e      	bne.n	8000c3e <loop+0xc6>
			if(strcmp("200",splitdata[1]) == 0){
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <loop+0x110>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4619      	mov	r1, r3
 8000be6:	482e      	ldr	r0, [pc, #184]	; (8000ca0 <loop+0x128>)
 8000be8:	f7ff faf2 	bl	80001d0 <strcmp>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10b      	bne.n	8000c0a <loop+0x92>
				state=0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	71fb      	strb	r3, [r7, #7]
				printf("Sent successfully\n");
 8000bf6:	482b      	ldr	r0, [pc, #172]	; (8000ca4 <loop+0x12c>)
 8000bf8:	f006 fdec 	bl	80077d4 <puts>
				printf("massage:%s\n",splitdata[2]);
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <loop+0x110>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	4619      	mov	r1, r3
 8000c02:	4825      	ldr	r0, [pc, #148]	; (8000c98 <loop+0x120>)
 8000c04:	f006 fd4a 	bl	800769c <iprintf>
 8000c08:	e021      	b.n	8000c4e <loop+0xd6>
			}else if(strcmp("-1",splitdata[1]) == 0){
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <loop+0x110>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4825      	ldr	r0, [pc, #148]	; (8000ca8 <loop+0x130>)
 8000c12:	f7ff fadd 	bl	80001d0 <strcmp>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d103      	bne.n	8000c24 <loop+0xac>
				printf("-1");
 8000c1c:	4822      	ldr	r0, [pc, #136]	; (8000ca8 <loop+0x130>)
 8000c1e:	f006 fd3d 	bl	800769c <iprintf>
 8000c22:	e014      	b.n	8000c4e <loop+0xd6>
			}else if(strcmp("1",splitdata[1]) == 0){
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <loop+0x110>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4820      	ldr	r0, [pc, #128]	; (8000cac <loop+0x134>)
 8000c2c:	f7ff fad0 	bl	80001d0 <strcmp>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10b      	bne.n	8000c4e <loop+0xd6>
				printf("1");
 8000c36:	2031      	movs	r0, #49	; 0x31
 8000c38:	f006 fd48 	bl	80076cc <putchar>
 8000c3c:	e007      	b.n	8000c4e <loop+0xd6>
			}
		}else if(j == (uint8_t)100){
 8000c3e:	797b      	ldrb	r3, [r7, #5]
 8000c40:	2b64      	cmp	r3, #100	; 0x64
 8000c42:	d104      	bne.n	8000c4e <loop+0xd6>
			printf("time out");
 8000c44:	481a      	ldr	r0, [pc, #104]	; (8000cb0 <loop+0x138>)
 8000c46:	f006 fd29 	bl	800769c <iprintf>
			state = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71fb      	strb	r3, [r7, #7]
		}
		for(i=0; i<5; i++){
 8000c4e:	2300      	movs	r3, #0
 8000c50:	71bb      	strb	r3, [r7, #6]
 8000c52:	e007      	b.n	8000c64 <loop+0xec>
			splitdata[i] = "\0";
 8000c54:	79bb      	ldrb	r3, [r7, #6]
 8000c56:	4a0c      	ldr	r2, [pc, #48]	; (8000c88 <loop+0x110>)
 8000c58:	4916      	ldr	r1, [pc, #88]	; (8000cb4 <loop+0x13c>)
 8000c5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i=0; i<5; i++){
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	3301      	adds	r3, #1
 8000c62:	71bb      	strb	r3, [r7, #6]
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d9f4      	bls.n	8000c54 <loop+0xdc>
		}
		j++;
 8000c6a:	797b      	ldrb	r3, [r7, #5]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	717b      	strb	r3, [r7, #5]
		HAL_Delay(100);
 8000c70:	2064      	movs	r0, #100	; 0x64
 8000c72:	f000 ffa7 	bl	8001bc4 <HAL_Delay>
	while(state == 1){
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d085      	beq.n	8000b88 <loop+0x10>
	}
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000a0 	.word	0x200000a0
 8000c8c:	0800815c 	.word	0x0800815c
 8000c90:	0800821c 	.word	0x0800821c
 8000c94:	08008220 	.word	0x08008220
 8000c98:	0800822c 	.word	0x0800822c
 8000c9c:	080081e0 	.word	0x080081e0
 8000ca0:	08008238 	.word	0x08008238
 8000ca4:	0800823c 	.word	0x0800823c
 8000ca8:	08008250 	.word	0x08008250
 8000cac:	08008160 	.word	0x08008160
 8000cb0:	08008210 	.word	0x08008210
 8000cb4:	08008164 	.word	0x08008164

08000cb8 <connectWifi>:

void connectWifi(const char *ssid , const char *pwd)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b09e      	sub	sp, #120	; 0x78
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]

	char _wifi[100] = "";
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	2260      	movs	r2, #96	; 0x60
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f006 f944 	bl	8006f5c <memset>
	for(uint8_t m=0; m<5; m++){
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000cda:	e00a      	b.n	8000cf2 <connectWifi+0x3a>
		splitdata[m] = "\0";
 8000cdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000ce0:	4a60      	ldr	r2, [pc, #384]	; (8000e64 <connectWifi+0x1ac>)
 8000ce2:	4961      	ldr	r1, [pc, #388]	; (8000e68 <connectWifi+0x1b0>)
 8000ce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t m=0; m<5; m++){
 8000ce8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000cec:	3301      	adds	r3, #1
 8000cee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000cf2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d9f0      	bls.n	8000cdc <connectWifi+0x24>
	}
	uint8_t state = 1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t i;
	uint8_t j;
	uint8_t k;

	strcat(_wifi,"|2|1|");
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fa6d 	bl	80001e4 <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4413      	add	r3, r2
 8000d14:	4a55      	ldr	r2, [pc, #340]	; (8000e6c <connectWifi+0x1b4>)
 8000d16:	6810      	ldr	r0, [r2, #0]
 8000d18:	6018      	str	r0, [r3, #0]
 8000d1a:	8892      	ldrh	r2, [r2, #4]
 8000d1c:	809a      	strh	r2, [r3, #4]
	strcat(_wifi,ssid);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f006 fd6d 	bl	8007804 <strcat>
	strcat(_wifi,",");
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fa58 	bl	80001e4 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4413      	add	r3, r2
 8000d3e:	494c      	ldr	r1, [pc, #304]	; (8000e70 <connectWifi+0x1b8>)
 8000d40:	461a      	mov	r2, r3
 8000d42:	460b      	mov	r3, r1
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	8013      	strh	r3, [r2, #0]
	strcat(_wifi,pwd);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	6839      	ldr	r1, [r7, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f006 fd58 	bl	8007804 <strcat>
	strcat(_wifi,"|\r");
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fa43 	bl	80001e4 <strlen>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4413      	add	r3, r2
 8000d68:	4a42      	ldr	r2, [pc, #264]	; (8000e74 <connectWifi+0x1bc>)
 8000d6a:	8811      	ldrh	r1, [r2, #0]
 8000d6c:	7892      	ldrb	r2, [r2, #2]
 8000d6e:	8019      	strh	r1, [r3, #0]
 8000d70:	709a      	strb	r2, [r3, #2]
	printf("%s\n",_wifi);
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4618      	mov	r0, r3
 8000d78:	f006 fd2c 	bl	80077d4 <puts>
	//HAL_UART_Transmit(&huart3,_wifi,sizeof(_wifi),10);
	//USART2TransferCompleted = 0;
	//HAL_UART_Transmit(&huart2,_wifi,100,10);

	for(j=0;j<50;j++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8000d82:	e00f      	b.n	8000da4 <connectWifi+0xec>
		HAL_UART_Transmit (&huart3, (uint8_t*) _wifi+j, 1, 0xFFFF);
 8000d84:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000d88:	f107 020c 	add.w	r2, r7, #12
 8000d8c:	18d1      	adds	r1, r2, r3
 8000d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d92:	2201      	movs	r2, #1
 8000d94:	4838      	ldr	r0, [pc, #224]	; (8000e78 <connectWifi+0x1c0>)
 8000d96:	f005 fbe7 	bl	8006568 <HAL_UART_Transmit>
	for(j=0;j<50;j++)
 8000d9a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000d9e:	3301      	adds	r3, #1
 8000da0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8000da4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000da8:	2b31      	cmp	r3, #49	; 0x31
 8000daa:	d9eb      	bls.n	8000d84 <connectWifi+0xcc>

	//while(!USART2TransferCompleted);
	//Usart_SendString(USART3, _wifi);
	memset(_wifi,'\0',50);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2232      	movs	r2, #50	; 0x32
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 f8d1 	bl	8006f5c <memset>


	while(state == 1){
 8000dba:	e034      	b.n	8000e26 <connectWifi+0x16e>
		splitString();
 8000dbc:	f7ff fc22 	bl	8000604 <splitString>
		if(strcmp("2",splitdata[0]) == 0){
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <connectWifi+0x1ac>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	482d      	ldr	r0, [pc, #180]	; (8000e7c <connectWifi+0x1c4>)
 8000dc8:	f7ff fa02 	bl	80001d0 <strcmp>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d110      	bne.n	8000df4 <connectWifi+0x13c>
			if(strcmp("3",splitdata[1]) == 0){
 8000dd2:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <connectWifi+0x1ac>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4829      	ldr	r0, [pc, #164]	; (8000e80 <connectWifi+0x1c8>)
 8000dda:	f7ff f9f9 	bl	80001d0 <strcmp>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d103      	bne.n	8000dec <connectWifi+0x134>
				state=0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000dea:	e006      	b.n	8000dfa <connectWifi+0x142>
			}else{
				printf(".");
 8000dec:	202e      	movs	r0, #46	; 0x2e
 8000dee:	f006 fc6d 	bl	80076cc <putchar>
 8000df2:	e002      	b.n	8000dfa <connectWifi+0x142>
			}
		}else{
		printf(".");
 8000df4:	202e      	movs	r0, #46	; 0x2e
 8000df6:	f006 fc69 	bl	80076cc <putchar>
		}
		for(i=0; i<5; i++){
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000e00:	e00a      	b.n	8000e18 <connectWifi+0x160>
			splitdata[i] = "\0";
 8000e02:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000e06:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <connectWifi+0x1ac>)
 8000e08:	4917      	ldr	r1, [pc, #92]	; (8000e68 <connectWifi+0x1b0>)
 8000e0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i=0; i<5; i++){
 8000e0e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000e12:	3301      	adds	r3, #1
 8000e14:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000e18:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d9f0      	bls.n	8000e02 <connectWifi+0x14a>
		}
		HAL_Delay(100);
 8000e20:	2064      	movs	r0, #100	; 0x64
 8000e22:	f000 fecf 	bl	8001bc4 <HAL_Delay>
	while(state == 1){
 8000e26:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d0c6      	beq.n	8000dbc <connectWifi+0x104>
	}

	for(k=0;k<5;k++){
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8000e34:	e00b      	b.n	8000e4e <connectWifi+0x196>
		printf(".");
 8000e36:	202e      	movs	r0, #46	; 0x2e
 8000e38:	f006 fc48 	bl	80076cc <putchar>
		HAL_Delay(1000);
 8000e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e40:	f000 fec0 	bl	8001bc4 <HAL_Delay>
	for(k=0;k<5;k++){
 8000e44:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000e48:	3301      	adds	r3, #1
 8000e4a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8000e4e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	d9ef      	bls.n	8000e36 <connectWifi+0x17e>
	}

	printf("Wifi Connect SUCCESS\n");
 8000e56:	480b      	ldr	r0, [pc, #44]	; (8000e84 <connectWifi+0x1cc>)
 8000e58:	f006 fcbc 	bl	80077d4 <puts>
}
 8000e5c:	bf00      	nop
 8000e5e:	3778      	adds	r7, #120	; 0x78
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200000a0 	.word	0x200000a0
 8000e68:	08008164 	.word	0x08008164
 8000e6c:	08008254 	.word	0x08008254
 8000e70:	0800825c 	.word	0x0800825c
 8000e74:	08008188 	.word	0x08008188
 8000e78:	20000108 	.word	0x20000108
 8000e7c:	0800818c 	.word	0x0800818c
 8000e80:	080081e0 	.word	0x080081e0
 8000e84:	08008260 	.word	0x08008260

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f000 fe1d 	bl	8001acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f863 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 fa5d 	bl	8001354 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e9a:	f000 f9dd 	bl	8001258 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000e9e:	f000 f955 	bl	800114c <MX_TIM4_Init>
  MX_DMA_Init();
 8000ea2:	f000 fa39 	bl	8001318 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ea6:	f000 f8ab 	bl	8001000 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000eaa:	f000 fa05 	bl	80012b8 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	481d      	ldr	r0, [pc, #116]	; (8000f28 <main+0xa0>)
 8000eb2:	f004 fa07 	bl	80052c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	481b      	ldr	r0, [pc, #108]	; (8000f28 <main+0xa0>)
 8000eba:	f004 fa03 	bl	80052c4 <HAL_TIM_PWM_Start>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <main+0xa4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <main+0xa4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f042 0220 	orr.w	r2, r2, #32
 8000ecc:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  if (HAL_ADCEx_Calibration_Start (&hadc1,10) != HAL_OK)
 8000ece:	210a      	movs	r1, #10
 8000ed0:	4817      	ldr	r0, [pc, #92]	; (8000f30 <main+0xa8>)
 8000ed2:	f002 f857 	bl	8002f84 <HAL_ADCEx_Calibration_Start>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <main+0x58>
    {
      Error_Handler ();
 8000edc:	f000 faa2 	bl	8001424 <Error_Handler>
    }

  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&uwADCxConvertedValue, 4)!=HAL_OK)
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	4914      	ldr	r1, [pc, #80]	; (8000f34 <main+0xac>)
 8000ee4:	4812      	ldr	r0, [pc, #72]	; (8000f30 <main+0xa8>)
 8000ee6:	f001 f9e3 	bl	80022b0 <HAL_ADC_Start_DMA>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <main+0x6c>
	   	{
	  	  Error_Handler ();
 8000ef0:	f000 fa98 	bl	8001424 <Error_Handler>
	   	}
  //uint8_t ch;

  connectWifi(WIFISSID,WIFIPWS);
 8000ef4:	4910      	ldr	r1, [pc, #64]	; (8000f38 <main+0xb0>)
 8000ef6:	4811      	ldr	r0, [pc, #68]	; (8000f3c <main+0xb4>)
 8000ef8:	f7ff fede 	bl	8000cb8 <connectWifi>
  mqtt(SERVER,PORT,DEVICENAME,DEVICESECRET,TOPIC);
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <main+0xb8>)
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <main+0xbc>)
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <main+0xc0>)
 8000f04:	4911      	ldr	r1, [pc, #68]	; (8000f4c <main+0xc4>)
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <main+0xc8>)
 8000f08:	f7ff fbb8 	bl	800067c <mqtt>
  while (1)
  {
	  publish(TOPIC,"HI TANG");
 8000f0c:	4911      	ldr	r1, [pc, #68]	; (8000f54 <main+0xcc>)
 8000f0e:	480c      	ldr	r0, [pc, #48]	; (8000f40 <main+0xb8>)
 8000f10:	f7ff fd5a 	bl	80009c8 <publish>
	  loop();
 8000f14:	f7ff fe30 	bl	8000b78 <loop>
	  {
		  ch = RB_read (&gtUart2Fifo);
	      HAL_UART_Transmit (&huart2, &ch, 1, 0xFF);
	  }
	  */
	  printf("hello world\n");
 8000f18:	480f      	ldr	r0, [pc, #60]	; (8000f58 <main+0xd0>)
 8000f1a:	f006 fc5b 	bl	80077d4 <puts>
	  //HAL_UART_Transmit(&huart3, "hello world\n", sizeof("hello world\n"), 10);
	  HAL_Delay(1000);
 8000f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f22:	f000 fe4f 	bl	8001bc4 <HAL_Delay>
	  publish(TOPIC,"HI TANG");
 8000f26:	e7f1      	b.n	8000f0c <main+0x84>
 8000f28:	200000bc 	.word	0x200000bc
 8000f2c:	20000238 	.word	0x20000238
 8000f30:	2000018c 	.word	0x2000018c
 8000f34:	200000b4 	.word	0x200000b4
 8000f38:	08008278 	.word	0x08008278
 8000f3c:	08008284 	.word	0x08008284
 8000f40:	080082bc 	.word	0x080082bc
 8000f44:	08008288 	.word	0x08008288
 8000f48:	08008294 	.word	0x08008294
 8000f4c:	080082a0 	.word	0x080082a0
 8000f50:	080082a8 	.word	0x080082a8
 8000f54:	080082c8 	.word	0x080082c8
 8000f58:	080082d0 	.word	0x080082d0

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b096      	sub	sp, #88	; 0x58
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	2244      	movs	r2, #68	; 0x44
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f005 fff6 	bl	8006f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	463b      	mov	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f82:	f002 fde9 	bl	8003b58 <HAL_PWREx_ControlVoltageScaling>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f8c:	f000 fa4a 	bl	8001424 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f90:	2302      	movs	r3, #2
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000faa:	2308      	movs	r3, #8
 8000fac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fe20 	bl	8003c04 <HAL_RCC_OscConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fca:	f000 fa2b 	bl	8001424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	230f      	movs	r3, #15
 8000fd0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 f9f2 	bl	80043d0 <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ff2:	f000 fa17 	bl	8001424 <Error_Handler>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3758      	adds	r7, #88	; 0x58
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001022:	4b44      	ldr	r3, [pc, #272]	; (8001134 <MX_ADC1_Init+0x134>)
 8001024:	4a44      	ldr	r2, [pc, #272]	; (8001138 <MX_ADC1_Init+0x138>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001028:	4b42      	ldr	r3, [pc, #264]	; (8001134 <MX_ADC1_Init+0x134>)
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <MX_ADC1_Init+0x134>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001034:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <MX_ADC1_Init+0x134>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800103a:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <MX_ADC1_Init+0x134>)
 800103c:	2201      	movs	r2, #1
 800103e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001040:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <MX_ADC1_Init+0x134>)
 8001042:	2204      	movs	r2, #4
 8001044:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <MX_ADC1_Init+0x134>)
 8001048:	2200      	movs	r2, #0
 800104a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800104c:	4b39      	ldr	r3, [pc, #228]	; (8001134 <MX_ADC1_Init+0x134>)
 800104e:	2201      	movs	r2, #1
 8001050:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001052:	4b38      	ldr	r3, [pc, #224]	; (8001134 <MX_ADC1_Init+0x134>)
 8001054:	2204      	movs	r2, #4
 8001056:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001058:	4b36      	ldr	r3, [pc, #216]	; (8001134 <MX_ADC1_Init+0x134>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	4b34      	ldr	r3, [pc, #208]	; (8001134 <MX_ADC1_Init+0x134>)
 8001062:	2200      	movs	r2, #0
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001066:	4b33      	ldr	r3, [pc, #204]	; (8001134 <MX_ADC1_Init+0x134>)
 8001068:	2200      	movs	r2, #0
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800106c:	4b31      	ldr	r3, [pc, #196]	; (8001134 <MX_ADC1_Init+0x134>)
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001074:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <MX_ADC1_Init+0x134>)
 8001076:	2200      	movs	r2, #0
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <MX_ADC1_Init+0x134>)
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001082:	482c      	ldr	r0, [pc, #176]	; (8001134 <MX_ADC1_Init+0x134>)
 8001084:	f000 ffbe 	bl	8002004 <HAL_ADC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800108e:	f000 f9c9 	bl	8001424 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4825      	ldr	r0, [pc, #148]	; (8001134 <MX_ADC1_Init+0x134>)
 800109e:	f001 ffd1 	bl	8003044 <HAL_ADCEx_MultiModeConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010a8:	f000 f9bc 	bl	8001424 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ac:	4b23      	ldr	r3, [pc, #140]	; (800113c <MX_ADC1_Init+0x13c>)
 80010ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b0:	2306      	movs	r3, #6
 80010b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010b4:	2305      	movs	r3, #5
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b8:	237f      	movs	r3, #127	; 0x7f
 80010ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010bc:	2304      	movs	r3, #4
 80010be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	481a      	ldr	r0, [pc, #104]	; (8001134 <MX_ADC1_Init+0x134>)
 80010ca:	f001 f9c3 	bl	8002454 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010d4:	f000 f9a6 	bl	8001424 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_ADC1_Init+0x140>)
 80010da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010dc:	230c      	movs	r3, #12
 80010de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4619      	mov	r1, r3
 80010e4:	4813      	ldr	r0, [pc, #76]	; (8001134 <MX_ADC1_Init+0x134>)
 80010e6:	f001 f9b5 	bl	8002454 <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80010f0:	f000 f998 	bl	8001424 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_ADC1_Init+0x144>)
 80010f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010f8:	2312      	movs	r3, #18
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <MX_ADC1_Init+0x134>)
 8001102:	f001 f9a7 	bl	8002454 <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 800110c:	f000 f98a 	bl	8001424 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_ADC1_Init+0x148>)
 8001112:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001114:	2318      	movs	r3, #24
 8001116:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_ADC1_Init+0x134>)
 800111e:	f001 f999 	bl	8002454 <HAL_ADC_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8001128:	f000 f97c 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000018c 	.word	0x2000018c
 8001138:	50040000 	.word	0x50040000
 800113c:	04300002 	.word	0x04300002
 8001140:	08600004 	.word	0x08600004
 8001144:	0c900008 	.word	0x0c900008
 8001148:	10c00010 	.word	0x10c00010

0800114c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	; 0x38
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
 800117a:	615a      	str	r2, [r3, #20]
 800117c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800117e:	4b34      	ldr	r3, [pc, #208]	; (8001250 <MX_TIM4_Init+0x104>)
 8001180:	4a34      	ldr	r2, [pc, #208]	; (8001254 <MX_TIM4_Init+0x108>)
 8001182:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <MX_TIM4_Init+0x104>)
 8001186:	221f      	movs	r2, #31
 8001188:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <MX_TIM4_Init+0x104>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <MX_TIM4_Init+0x104>)
 8001192:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001196:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <MX_TIM4_Init+0x104>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <MX_TIM4_Init+0x104>)
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011a4:	482a      	ldr	r0, [pc, #168]	; (8001250 <MX_TIM4_Init+0x104>)
 80011a6:	f003 ffd5 	bl	8005154 <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80011b0:	f000 f938 	bl	8001424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011be:	4619      	mov	r1, r3
 80011c0:	4823      	ldr	r0, [pc, #140]	; (8001250 <MX_TIM4_Init+0x104>)
 80011c2:	f004 fbb5 	bl	8005930 <HAL_TIM_ConfigClockSource>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80011cc:	f000 f92a 	bl	8001424 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011d0:	481f      	ldr	r0, [pc, #124]	; (8001250 <MX_TIM4_Init+0x104>)
 80011d2:	f004 f816 	bl	8005202 <HAL_TIM_PWM_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80011dc:	f000 f922 	bl	8001424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4818      	ldr	r0, [pc, #96]	; (8001250 <MX_TIM4_Init+0x104>)
 80011f0:	f005 f8c6 	bl	8006380 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80011fa:	f000 f913 	bl	8001424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fe:	2360      	movs	r3, #96	; 0x60
 8001200:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1750;
 8001202:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8001206:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	480e      	ldr	r0, [pc, #56]	; (8001250 <MX_TIM4_Init+0x104>)
 8001218:	f004 fa7a 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001222:	f000 f8ff 	bl	8001424 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8001226:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800122a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	2204      	movs	r2, #4
 8001230:	4619      	mov	r1, r3
 8001232:	4807      	ldr	r0, [pc, #28]	; (8001250 <MX_TIM4_Init+0x104>)
 8001234:	f004 fa6c 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800123e:	f000 f8f1 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <MX_TIM4_Init+0x104>)
 8001244:	f000 f9d6 	bl	80015f4 <HAL_TIM_MspPostInit>

}
 8001248:	bf00      	nop
 800124a:	3738      	adds	r7, #56	; 0x38
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000bc 	.word	0x200000bc
 8001254:	40000800 	.word	0x40000800

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800125e:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_USART2_UART_Init+0x5c>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001264:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800129c:	f005 f916 	bl	80064cc <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012a6:	f000 f8bd 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000238 	.word	0x20000238
 80012b4:	40004400 	.word	0x40004400

080012b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012be:	4a15      	ldr	r2, [pc, #84]	; (8001314 <MX_USART3_UART_Init+0x5c>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012fc:	f005 f8e6 	bl	80064cc <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001306:	f000 f88d 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000108 	.word	0x20000108
 8001314:	40004800 	.word	0x40004800

08001318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_DMA_Init+0x38>)
 8001320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <MX_DMA_Init+0x38>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6493      	str	r3, [r2, #72]	; 0x48
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_DMA_Init+0x38>)
 800132c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	200b      	movs	r0, #11
 800133c:	f002 f80d 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001340:	200b      	movs	r0, #11
 8001342:	f002 f826 	bl	8003392 <HAL_NVIC_EnableIRQ>

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <MX_GPIO_Init+0xc4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a2a      	ldr	r2, [pc, #168]	; (8001418 <MX_GPIO_Init+0xc4>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <MX_GPIO_Init+0xc4>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <MX_GPIO_Init+0xc4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a24      	ldr	r2, [pc, #144]	; (8001418 <MX_GPIO_Init+0xc4>)
 8001388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_GPIO_Init+0xc4>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_GPIO_Init+0xc4>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <MX_GPIO_Init+0xc4>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_GPIO_Init+0xc4>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_GPIO_Init+0xc4>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a18      	ldr	r2, [pc, #96]	; (8001418 <MX_GPIO_Init+0xc4>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_GPIO_Init+0xc4>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2120      	movs	r1, #32
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d2:	f002 fb9b 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_GPIO_Init+0xc8>)
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_GPIO_Init+0xcc>)
 80013ec:	f002 f9e4 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013f0:	2320      	movs	r3, #32
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f002 f9d5 	bl	80037b8 <HAL_GPIO_Init>

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	10210000 	.word	0x10210000
 8001420:	48000800 	.word	0x48000800

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	e7fe      	b.n	800142c <Error_Handler+0x8>
	...

08001430 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_MspInit+0x44>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_MspInit+0x44>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6613      	str	r3, [r2, #96]	; 0x60
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_MspInit+0x44>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x44>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x44>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6593      	str	r3, [r2, #88]	; 0x58
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x44>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0ac      	sub	sp, #176	; 0xb0
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2288      	movs	r2, #136	; 0x88
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f005 fd5f 	bl	8006f5c <memset>
  if(hadc->Instance==ADC1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a3c      	ldr	r2, [pc, #240]	; (8001594 <HAL_ADC_MspInit+0x11c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d171      	bne.n	800158c <HAL_ADC_MspInit+0x114>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80014be:	2308      	movs	r3, #8
 80014c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014c2:	2307      	movs	r3, #7
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80014ca:	2308      	movs	r3, #8
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80014ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 f97f 	bl	80047dc <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80014e4:	f7ff ff9e 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014e8:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <HAL_ADC_MspInit+0x120>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	4a2a      	ldr	r2, [pc, #168]	; (8001598 <HAL_ADC_MspInit+0x120>)
 80014ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_ADC_MspInit+0x120>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <HAL_ADC_MspInit+0x120>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a24      	ldr	r2, [pc, #144]	; (8001598 <HAL_ADC_MspInit+0x120>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_ADC_MspInit+0x120>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CDS1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001518:	230f      	movs	r3, #15
 800151a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800151e:	230b      	movs	r3, #11
 8001520:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800152e:	4619      	mov	r1, r3
 8001530:	481a      	ldr	r0, [pc, #104]	; (800159c <HAL_ADC_MspInit+0x124>)
 8001532:	f002 f941 	bl	80037b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 8001538:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <HAL_ADC_MspInit+0x12c>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 8001556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 800155e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001562:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 8001566:	2220      	movs	r2, #32
 8001568:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001570:	480b      	ldr	r0, [pc, #44]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 8001572:	f001 ff29 	bl	80033c8 <HAL_DMA_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 800157c:	f7ff ff52 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 8001584:	64da      	str	r2, [r3, #76]	; 0x4c
 8001586:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_ADC_MspInit+0x128>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	37b0      	adds	r7, #176	; 0xb0
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	50040000 	.word	0x50040000
 8001598:	40021000 	.word	0x40021000
 800159c:	48000800 	.word	0x48000800
 80015a0:	200001f0 	.word	0x200001f0
 80015a4:	40020008 	.word	0x40020008

080015a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <HAL_TIM_Base_MspInit+0x44>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d113      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_TIM_Base_MspInit+0x48>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_TIM_Base_MspInit+0x48>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6593      	str	r3, [r2, #88]	; 0x58
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_TIM_Base_MspInit+0x48>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	201e      	movs	r0, #30
 80015d8:	f001 febf 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015dc:	201e      	movs	r0, #30
 80015de:	f001 fed8 	bl	8003392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40000800 	.word	0x40000800
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a11      	ldr	r2, [pc, #68]	; (8001658 <HAL_TIM_MspPostInit+0x64>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d11b      	bne.n	800164e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_TIM_MspPostInit+0x68>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <HAL_TIM_MspPostInit+0x68>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_TIM_MspPostInit+0x68>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800162e:	23c0      	movs	r3, #192	; 0xc0
 8001630:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800163e:	2302      	movs	r3, #2
 8001640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <HAL_TIM_MspPostInit+0x6c>)
 800164a:	f002 f8b5 	bl	80037b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40000800 	.word	0x40000800
 800165c:	40021000 	.word	0x40021000
 8001660:	48000400 	.word	0x48000400

08001664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0ae      	sub	sp, #184	; 0xb8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	2288      	movs	r2, #136	; 0x88
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f005 fc69 	bl	8006f5c <memset>
  if(huart->Instance==USART2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4a      	ldr	r2, [pc, #296]	; (80017b8 <HAL_UART_MspInit+0x154>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d144      	bne.n	800171e <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001694:	2302      	movs	r3, #2
 8001696:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001698:	2300      	movs	r3, #0
 800169a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 f89b 	bl	80047dc <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016ac:	f7ff feba 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <HAL_UART_MspInit+0x158>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	4a41      	ldr	r2, [pc, #260]	; (80017bc <HAL_UART_MspInit+0x158>)
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ba:	6593      	str	r3, [r2, #88]	; 0x58
 80016bc:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <HAL_UART_MspInit+0x158>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <HAL_UART_MspInit+0x158>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	4a3b      	ldr	r2, [pc, #236]	; (80017bc <HAL_UART_MspInit+0x158>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d4:	4b39      	ldr	r3, [pc, #228]	; (80017bc <HAL_UART_MspInit+0x158>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016e0:	230c      	movs	r3, #12
 80016e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f8:	2307      	movs	r3, #7
 80016fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001702:	4619      	mov	r1, r3
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f002 f856 	bl	80037b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2026      	movs	r0, #38	; 0x26
 8001712:	f001 fe22 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001716:	2026      	movs	r0, #38	; 0x26
 8001718:	f001 fe3b 	bl	8003392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800171c:	e047      	b.n	80017ae <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <HAL_UART_MspInit+0x15c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d142      	bne.n	80017ae <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001728:	2304      	movs	r3, #4
 800172a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800172c:	2300      	movs	r3, #0
 800172e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4618      	mov	r0, r3
 8001736:	f003 f851 	bl	80047dc <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001740:	f7ff fe70 	bl	8001424 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_UART_MspInit+0x158>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	4a1c      	ldr	r2, [pc, #112]	; (80017bc <HAL_UART_MspInit+0x158>)
 800174a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174e:	6593      	str	r3, [r2, #88]	; 0x58
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_UART_MspInit+0x158>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_UART_MspInit+0x158>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	4a16      	ldr	r2, [pc, #88]	; (80017bc <HAL_UART_MspInit+0x158>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_UART_MspInit+0x158>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001774:	2330      	movs	r3, #48	; 0x30
 8001776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800178c:	2307      	movs	r3, #7
 800178e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001796:	4619      	mov	r1, r3
 8001798:	480a      	ldr	r0, [pc, #40]	; (80017c4 <HAL_UART_MspInit+0x160>)
 800179a:	f002 f80d 	bl	80037b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2027      	movs	r0, #39	; 0x27
 80017a4:	f001 fdd9 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017a8:	2027      	movs	r0, #39	; 0x27
 80017aa:	f001 fdf2 	bl	8003392 <HAL_NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	37b8      	adds	r7, #184	; 0xb8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40004400 	.word	0x40004400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40004800 	.word	0x40004800
 80017c4:	48000800 	.word	0x48000800

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001814:	f000 f9b6 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <DMA1_Channel1_IRQHandler+0x10>)
 8001822:	f001 fee9 	bl	80035f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200001f0 	.word	0x200001f0

08001830 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <TIM4_IRQHandler+0x10>)
 8001836:	f003 fe4b 	bl	80054d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200000bc 	.word	0x200000bc

08001844 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if ((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE) != RESET))
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <USART2_IRQHandler+0x34>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	2b20      	cmp	r3, #32
 8001854:	d10d      	bne.n	8001872 <USART2_IRQHandler+0x2e>
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <USART2_IRQHandler+0x34>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <USART2_IRQHandler+0x2e>
	{
		HAL_UART_RxCpltCallback (&huart2);
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <USART2_IRQHandler+0x34>)
 8001866:	f004 ff13 	bl	8006690 <HAL_UART_RxCpltCallback>
	    __HAL_UART_CLEAR_PEFLAG(&huart2);
 800186a:	4b03      	ldr	r3, [pc, #12]	; (8001878 <USART2_IRQHandler+0x34>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2201      	movs	r2, #1
 8001870:	621a      	str	r2, [r3, #32]
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000238 	.word	0x20000238

0800187c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
	return 1;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_kill>:

int _kill(int pid, int sig)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018a4:	f005 fb0e 	bl	8006ec4 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2216      	movs	r2, #22
 80018ac:	601a      	str	r2, [r3, #0]
	return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_exit>:

void _exit (int status)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018c2:	f04f 31ff 	mov.w	r1, #4294967295
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffe7 	bl	800189a <_kill>
	while (1) {}		/* Make sure we hang here */
 80018cc:	e7fe      	b.n	80018cc <_exit+0x12>

080018ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e00a      	b.n	80018f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018e0:	f3af 8000 	nop.w
 80018e4:	4601      	mov	r1, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	60ba      	str	r2, [r7, #8]
 80018ec:	b2ca      	uxtb	r2, r1
 80018ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dbf0      	blt.n	80018e0 <_read+0x12>
	}

return len;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e009      	b.n	800192e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	60ba      	str	r2, [r7, #8]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe50 	bl	80005c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	429a      	cmp	r2, r3
 8001934:	dbf1      	blt.n	800191a <_write+0x12>
	}
	return len;
 8001936:	687b      	ldr	r3, [r7, #4]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_close>:

int _close(int file)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	return -1;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001968:	605a      	str	r2, [r3, #4]
	return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_isatty>:

int _isatty(int file)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	return 1;
 8001980:	2301      	movs	r3, #1
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
	return 0;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f005 fa74 	bl	8006ec4 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20018000 	.word	0x20018000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	20000094 	.word	0x20000094
 8001a10:	200002d0 	.word	0x200002d0

08001a14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <SystemInit+0x5c>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <SystemInit+0x5c>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <SystemInit+0x60>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <SystemInit+0x60>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <SystemInit+0x60>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <SystemInit+0x60>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <SystemInit+0x60>)
 8001a40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <SystemInit+0x60>)
 8001a4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <SystemInit+0x60>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <SystemInit+0x60>)
 8001a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SystemInit+0x60>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00
 8001a74:	40021000 	.word	0x40021000

08001a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a7c:	f7ff ffca 	bl	8001a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a82:	e003      	b.n	8001a8c <LoopCopyDataInit>

08001a84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a8a:	3104      	adds	r1, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a8c:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a94:	d3f6      	bcc.n	8001a84 <CopyDataInit>
	ldr	r2, =_sbss
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a98:	e002      	b.n	8001aa0 <LoopFillZerobss>

08001a9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a9c:	f842 3b04 	str.w	r3, [r2], #4

08001aa0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <LoopForever+0x16>)
	cmp	r2, r3
 8001aa2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001aa4:	d3f9      	bcc.n	8001a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f005 fa25 	bl	8006ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aaa:	f7ff f9ed 	bl	8000e88 <main>

08001aae <LoopForever>:

LoopForever:
    b LoopForever
 8001aae:	e7fe      	b.n	8001aae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ab4:	08008480 	.word	0x08008480
	ldr	r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001abc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001ac0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001ac4:	200002d0 	.word	0x200002d0

08001ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC1_2_IRQHandler>
	...

08001acc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <HAL_Init+0x3c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <HAL_Init+0x3c>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	f001 fc2e 	bl	8003344 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 f80f 	bl	8001b0c <HAL_InitTick>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	71fb      	strb	r3, [r7, #7]
 8001af8:	e001      	b.n	8001afe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001afa:	f7ff fc99 	bl	8001430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001afe:	79fb      	ldrb	r3, [r7, #7]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40022000 	.word	0x40022000

08001b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_InitTick+0x6c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d023      	beq.n	8001b68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_InitTick+0x70>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_InitTick+0x6c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 fc39 	bl	80033ae <HAL_SYSTICK_Config>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d809      	bhi.n	8001b5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f001 fc03 	bl	800335a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_InitTick+0x74>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e007      	b.n	8001b6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e004      	b.n	8001b6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	e001      	b.n	8001b6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	200002bc 	.word	0x200002bc

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	200002bc 	.word	0x200002bc

08001bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff ffee 	bl	8001bac <HAL_GetTick>
 8001bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_Delay+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bea:	bf00      	nop
 8001bec:	f7ff ffde 	bl	8001bac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008

08001c0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	431a      	orrs	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	609a      	str	r2, [r3, #8]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3360      	adds	r3, #96	; 0x60
 8001c86:	461a      	mov	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <LL_ADC_SetOffset+0x44>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cac:	bf00      	nop
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	03fff000 	.word	0x03fff000

08001cbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3360      	adds	r3, #96	; 0x60
 8001cca:	461a      	mov	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3360      	adds	r3, #96	; 0x60
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3330      	adds	r3, #48	; 0x30
 8001d54:	461a      	mov	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	4413      	add	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	211f      	movs	r1, #31
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	0e9b      	lsrs	r3, r3, #26
 8001d7c:	f003 011f 	and.w	r1, r3, #31
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3314      	adds	r3, #20
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0e5b      	lsrs	r3, r3, #25
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	4413      	add	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	0d1b      	lsrs	r3, r3, #20
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	2107      	movs	r1, #7
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	0d1b      	lsrs	r3, r3, #20
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	431a      	orrs	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001de6:	bf00      	nop
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0318 	and.w	r3, r3, #24
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e18:	40d9      	lsrs	r1, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	400b      	ands	r3, r1
 8001e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e22:	431a      	orrs	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	0007ffff 	.word	0x0007ffff

08001e3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 031f 	and.w	r3, r3, #31
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6093      	str	r3, [r2, #8]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e90:	d101      	bne.n	8001e96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001eb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ee0:	d101      	bne.n	8001ee6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f30:	f043 0202 	orr.w	r2, r3, #2
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <LL_ADC_IsEnabled+0x18>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <LL_ADC_IsEnabled+0x1a>
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d101      	bne.n	8001f82 <LL_ADC_IsDisableOngoing+0x18>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <LL_ADC_IsDisableOngoing+0x1a>
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa4:	f043 0204 	orr.w	r2, r3, #4
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d101      	bne.n	8001fd0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e136      	b.n	800228c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fa23 	bl	8001478 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff19 	bl	8001e7c <LL_ADC_IsDeepPowerDownEnabled>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff feff 	bl	8001e58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff34 	bl	8001ecc <LL_ADC_IsInternalRegulatorEnabled>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d115      	bne.n	8002096 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff18 	bl	8001ea4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002074:	4b87      	ldr	r3, [pc, #540]	; (8002294 <HAL_ADC_Init+0x290>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	4a87      	ldr	r2, [pc, #540]	; (8002298 <HAL_ADC_Init+0x294>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	3301      	adds	r3, #1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002088:	e002      	b.n	8002090 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	3b01      	subs	r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f9      	bne.n	800208a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff16 	bl	8001ecc <LL_ADC_IsInternalRegulatorEnabled>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10d      	bne.n	80020c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff76 	bl	8001fb8 <LL_ADC_REG_IsConversionOngoing>
 80020cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 80cf 	bne.w	800227a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 80cb 	bne.w	800227a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020ec:	f043 0202 	orr.w	r2, r3, #2
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff23 	bl	8001f44 <LL_ADC_IsEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d115      	bne.n	8002130 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002104:	4865      	ldr	r0, [pc, #404]	; (800229c <HAL_ADC_Init+0x298>)
 8002106:	f7ff ff1d 	bl	8001f44 <LL_ADC_IsEnabled>
 800210a:	4604      	mov	r4, r0
 800210c:	4864      	ldr	r0, [pc, #400]	; (80022a0 <HAL_ADC_Init+0x29c>)
 800210e:	f7ff ff19 	bl	8001f44 <LL_ADC_IsEnabled>
 8002112:	4603      	mov	r3, r0
 8002114:	431c      	orrs	r4, r3
 8002116:	4863      	ldr	r0, [pc, #396]	; (80022a4 <HAL_ADC_Init+0x2a0>)
 8002118:	f7ff ff14 	bl	8001f44 <LL_ADC_IsEnabled>
 800211c:	4603      	mov	r3, r0
 800211e:	4323      	orrs	r3, r4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4619      	mov	r1, r3
 800212a:	485f      	ldr	r0, [pc, #380]	; (80022a8 <HAL_ADC_Init+0x2a4>)
 800212c:	f7ff fd6e 	bl	8001c0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7e5b      	ldrb	r3, [r3, #25]
 8002134:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800213a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002140:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002146:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800214e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d106      	bne.n	800216c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	3b01      	subs	r3, #1
 8002164:	045b      	lsls	r3, r3, #17
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	d009      	beq.n	8002188 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_ADC_Init+0x2a8>)
 8002190:	4013      	ands	r3, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	69b9      	ldr	r1, [r7, #24]
 8002198:	430b      	orrs	r3, r1
 800219a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff09 	bl	8001fb8 <LL_ADC_REG_IsConversionOngoing>
 80021a6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff16 	bl	8001fde <LL_ADC_INJ_IsConversionOngoing>
 80021b2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d13d      	bne.n	8002236 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d13a      	bne.n	8002236 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021c4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021cc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021dc:	f023 0302 	bic.w	r3, r3, #2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	69b9      	ldr	r1, [r7, #24]
 80021e6:	430b      	orrs	r3, r1
 80021e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d118      	bne.n	8002226 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021fe:	f023 0304 	bic.w	r3, r3, #4
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800220a:	4311      	orrs	r1, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002210:	4311      	orrs	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002216:	430a      	orrs	r2, r1
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	611a      	str	r2, [r3, #16]
 8002224:	e007      	b.n	8002236 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d10c      	bne.n	8002258 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f023 010f 	bic.w	r1, r3, #15
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	631a      	str	r2, [r3, #48]	; 0x30
 8002256:	e007      	b.n	8002268 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 020f 	bic.w	r2, r2, #15
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226c:	f023 0303 	bic.w	r3, r3, #3
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
 8002278:	e007      	b.n	800228a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800228a:	7ffb      	ldrb	r3, [r7, #31]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3724      	adds	r7, #36	; 0x24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd90      	pop	{r4, r7, pc}
 8002294:	20000000 	.word	0x20000000
 8002298:	053e2d63 	.word	0x053e2d63
 800229c:	50040000 	.word	0x50040000
 80022a0:	50040100 	.word	0x50040100
 80022a4:	50040200 	.word	0x50040200
 80022a8:	50040300 	.word	0x50040300
 80022ac:	fff0c007 	.word	0xfff0c007

080022b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022bc:	4850      	ldr	r0, [pc, #320]	; (8002400 <HAL_ADC_Start_DMA+0x150>)
 80022be:	f7ff fdbd 	bl	8001e3c <LL_ADC_GetMultimode>
 80022c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fe75 	bl	8001fb8 <LL_ADC_REG_IsConversionOngoing>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 808e 	bne.w	80023f2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_ADC_Start_DMA+0x34>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e089      	b.n	80023f8 <HAL_ADC_Start_DMA+0x148>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d002      	beq.n	80022fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	d172      	bne.n	80023e4 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fc98 	bl	8002c34 <ADC_Enable>
 8002304:	4603      	mov	r3, r0
 8002306:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d165      	bne.n	80023da <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a37      	ldr	r2, [pc, #220]	; (8002404 <HAL_ADC_Start_DMA+0x154>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d002      	beq.n	8002332 <HAL_ADC_Start_DMA+0x82>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	e000      	b.n	8002334 <HAL_ADC_Start_DMA+0x84>
 8002332:	4b35      	ldr	r3, [pc, #212]	; (8002408 <HAL_ADC_Start_DMA+0x158>)
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	4293      	cmp	r3, r2
 800233a:	d002      	beq.n	8002342 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d006      	beq.n	8002368 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f023 0206 	bic.w	r2, r3, #6
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58
 8002366:	e002      	b.n	800236e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	4a26      	ldr	r2, [pc, #152]	; (800240c <HAL_ADC_Start_DMA+0x15c>)
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	4a25      	ldr	r2, [pc, #148]	; (8002410 <HAL_ADC_Start_DMA+0x160>)
 800237c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	4a24      	ldr	r2, [pc, #144]	; (8002414 <HAL_ADC_Start_DMA+0x164>)
 8002384:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	221c      	movs	r2, #28
 800238c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0210 	orr.w	r2, r2, #16
 80023a4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0201 	orr.w	r2, r2, #1
 80023b4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3340      	adds	r3, #64	; 0x40
 80023c0:	4619      	mov	r1, r3
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f001 f8b7 	bl	8003538 <HAL_DMA_Start_IT>
 80023ca:	4603      	mov	r3, r0
 80023cc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fddc 	bl	8001f90 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80023d8:	e00d      	b.n	80023f6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80023e2:	e008      	b.n	80023f6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80023f0:	e001      	b.n	80023f6 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
 80023f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	50040300 	.word	0x50040300
 8002404:	50040100 	.word	0x50040100
 8002408:	50040000 	.word	0x50040000
 800240c:	08002db7 	.word	0x08002db7
 8002410:	08002e8f 	.word	0x08002e8f
 8002414:	08002eab 	.word	0x08002eab

08002418 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0b6      	sub	sp, #216	; 0xd8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x22>
 8002472:	2302      	movs	r3, #2
 8002474:	e3c7      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x7b2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fd98 	bl	8001fb8 <LL_ADC_REG_IsConversionOngoing>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 83a8 	bne.w	8002be0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d824      	bhi.n	80024e2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	3b02      	subs	r3, #2
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d81b      	bhi.n	80024da <HAL_ADC_ConfigChannel+0x86>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <HAL_ADC_ConfigChannel+0x54>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024b9 	.word	0x080024b9
 80024ac:	080024c1 	.word	0x080024c1
 80024b0:	080024c9 	.word	0x080024c9
 80024b4:	080024d1 	.word	0x080024d1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	220c      	movs	r2, #12
 80024bc:	605a      	str	r2, [r3, #4]
          break;
 80024be:	e011      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2212      	movs	r2, #18
 80024c4:	605a      	str	r2, [r3, #4]
          break;
 80024c6:	e00d      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2218      	movs	r2, #24
 80024cc:	605a      	str	r2, [r3, #4]
          break;
 80024ce:	e009      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d6:	605a      	str	r2, [r3, #4]
          break;
 80024d8:	e004      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2206      	movs	r2, #6
 80024de:	605a      	str	r2, [r3, #4]
          break;
 80024e0:	e000      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024e2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	f7ff fc27 	bl	8001d44 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fd5c 	bl	8001fb8 <LL_ADC_REG_IsConversionOngoing>
 8002500:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fd68 	bl	8001fde <LL_ADC_INJ_IsConversionOngoing>
 800250e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002512:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 81a6 	bne.w	8002868 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800251c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002520:	2b00      	cmp	r3, #0
 8002522:	f040 81a1 	bne.w	8002868 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	461a      	mov	r2, r3
 8002534:	f7ff fc32 	bl	8001d9c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	08db      	lsrs	r3, r3, #3
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d00a      	beq.n	8002570 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6919      	ldr	r1, [r3, #16]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800256a:	f7ff fb83 	bl	8001c74 <LL_ADC_SetOffset>
 800256e:	e17b      	b.n	8002868 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fba0 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <HAL_ADC_ConfigChannel+0x148>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fb95 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	f003 021f 	and.w	r2, r3, #31
 800259a:	e01e      	b.n	80025da <HAL_ADC_ConfigChannel+0x186>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb8a 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80025ca:	2320      	movs	r3, #32
 80025cc:	e004      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80025ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x19e>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0e9b      	lsrs	r3, r3, #26
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	e018      	b.n	8002624 <HAL_ADC_ConfigChannel+0x1d0>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800260a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800260e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002616:	2320      	movs	r3, #32
 8002618:	e004      	b.n	8002624 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800261a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002624:	429a      	cmp	r2, r3
 8002626:	d106      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fb59 	bl	8001ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fb3d 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x20e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fb32 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	f003 021f 	and.w	r2, r3, #31
 8002660:	e01e      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x24c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fb27 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002680:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e004      	b.n	800269e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x264>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	e018      	b.n	80026ea <HAL_ADC_ConfigChannel+0x296>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80026dc:	2320      	movs	r3, #32
 80026de:	e004      	b.n	80026ea <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80026e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d106      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	2101      	movs	r1, #1
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff faf6 	bl	8001ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2102      	movs	r1, #2
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fada 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10a      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x2d4>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff facf 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	f003 021f 	and.w	r2, r3, #31
 8002726:	e01e      	b.n	8002766 <HAL_ADC_ConfigChannel+0x312>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2102      	movs	r1, #2
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fac4 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800274a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800274e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e004      	b.n	8002764 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800275a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_ADC_ConfigChannel+0x32a>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	e016      	b.n	80027ac <HAL_ADC_ConfigChannel+0x358>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002792:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800279e:	2320      	movs	r3, #32
 80027a0:	e004      	b.n	80027ac <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80027a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d106      	bne.n	80027be <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2102      	movs	r1, #2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fa95 	bl	8001ce8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2103      	movs	r1, #3
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fa79 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x396>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2103      	movs	r1, #3
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fa6e 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 80027e0:	4603      	mov	r3, r0
 80027e2:	0e9b      	lsrs	r3, r3, #26
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	e017      	b.n	800281a <HAL_ADC_ConfigChannel+0x3c6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2103      	movs	r1, #3
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fa63 	bl	8001cbc <LL_ADC_GetOffsetChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002804:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x3de>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0e9b      	lsrs	r3, r3, #26
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	e011      	b.n	8002856 <HAL_ADC_ConfigChannel+0x402>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002842:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800284a:	2320      	movs	r3, #32
 800284c:	e003      	b.n	8002856 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002856:	429a      	cmp	r2, r3
 8002858:	d106      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2200      	movs	r2, #0
 8002860:	2103      	movs	r1, #3
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fa40 	bl	8001ce8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fb69 	bl	8001f44 <LL_ADC_IsEnabled>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 813f 	bne.w	8002af8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	461a      	mov	r2, r3
 8002888:	f7ff fab4 	bl	8001df4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a8e      	ldr	r2, [pc, #568]	; (8002acc <HAL_ADC_ConfigChannel+0x678>)
 8002892:	4293      	cmp	r3, r2
 8002894:	f040 8130 	bne.w	8002af8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10b      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x46c>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2b09      	cmp	r3, #9
 80028b6:	bf94      	ite	ls
 80028b8:	2301      	movls	r3, #1
 80028ba:	2300      	movhi	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e019      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x4a0>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e003      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80028dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	bf94      	ite	ls
 80028ee:	2301      	movls	r3, #1
 80028f0:	2300      	movhi	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d079      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x4c0>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0e9b      	lsrs	r3, r3, #26
 800290a:	3301      	adds	r3, #1
 800290c:	069b      	lsls	r3, r3, #26
 800290e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002912:	e015      	b.n	8002940 <HAL_ADC_ConfigChannel+0x4ec>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002924:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800292c:	2320      	movs	r3, #32
 800292e:	e003      	b.n	8002938 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	3301      	adds	r3, #1
 800293a:	069b      	lsls	r3, r3, #26
 800293c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x50c>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	0e9b      	lsrs	r3, r3, #26
 8002952:	3301      	adds	r3, #1
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	2101      	movs	r1, #1
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	e017      	b.n	8002990 <HAL_ADC_ConfigChannel+0x53c>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800296e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002978:	2320      	movs	r3, #32
 800297a:	e003      	b.n	8002984 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800297c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3301      	adds	r3, #1
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	ea42 0103 	orr.w	r1, r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x562>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0e9b      	lsrs	r3, r3, #26
 80029a6:	3301      	adds	r3, #1
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	051b      	lsls	r3, r3, #20
 80029b4:	e018      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x594>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e003      	b.n	80029da <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80029d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e8:	430b      	orrs	r3, r1
 80029ea:	e080      	b.n	8002aee <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x5b4>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0e9b      	lsrs	r3, r3, #26
 80029fe:	3301      	adds	r3, #1
 8002a00:	069b      	lsls	r3, r3, #26
 8002a02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a06:	e015      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x5e0>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e003      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	069b      	lsls	r3, r3, #26
 8002a30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x600>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	3301      	adds	r3, #1
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	e017      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x630>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	61fb      	str	r3, [r7, #28]
  return result;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	e003      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	ea42 0103 	orr.w	r1, r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10d      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x65c>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3b1e      	subs	r3, #30
 8002aa8:	051b      	lsls	r3, r3, #20
 8002aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aae:	e01d      	b.n	8002aec <HAL_ADC_ConfigChannel+0x698>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	613b      	str	r3, [r7, #16]
  return result;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002ac8:	2320      	movs	r3, #32
 8002aca:	e005      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x684>
 8002acc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 021f 	and.w	r2, r3, #31
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b1e      	subs	r3, #30
 8002ae6:	051b      	lsls	r3, r3, #20
 8002ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aec:	430b      	orrs	r3, r1
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	6892      	ldr	r2, [r2, #8]
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7ff f952 	bl	8001d9c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <HAL_ADC_ConfigChannel+0x7bc>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d07a      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b04:	4843      	ldr	r0, [pc, #268]	; (8002c14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b06:	f7ff f8a7 	bl	8001c58 <LL_ADC_GetCommonPathInternalCh>
 8002b0a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a41      	ldr	r2, [pc, #260]	; (8002c18 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d12c      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d126      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a3c      	ldr	r2, [pc, #240]	; (8002c1c <HAL_ADC_ConfigChannel+0x7c8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_ADC_ConfigChannel+0x6e4>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a3b      	ldr	r2, [pc, #236]	; (8002c20 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d15d      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b40:	4619      	mov	r1, r3
 8002b42:	4834      	ldr	r0, [pc, #208]	; (8002c14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b44:	f7ff f875 	bl	8001c32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	099b      	lsrs	r3, r3, #6
 8002b4e:	4a36      	ldr	r2, [pc, #216]	; (8002c28 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b62:	e002      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f9      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b70:	e040      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a2d      	ldr	r2, [pc, #180]	; (8002c2c <HAL_ADC_ConfigChannel+0x7d8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d118      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x75a>
 8002b7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d112      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_ADC_ConfigChannel+0x7c8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x748>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d12d      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	481b      	ldr	r0, [pc, #108]	; (8002c14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ba8:	f7ff f843 	bl	8001c32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bac:	e024      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d120      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d11a      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_ADC_ConfigChannel+0x7c8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d115      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480e      	ldr	r0, [pc, #56]	; (8002c14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bda:	f7ff f82a 	bl	8001c32 <LL_ADC_SetCommonPathInternalCh>
 8002bde:	e00c      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bf2:	e002      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf4:	bf00      	nop
 8002bf6:	e000      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c02:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	37d8      	adds	r7, #216	; 0xd8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	80080000 	.word	0x80080000
 8002c14:	50040300 	.word	0x50040300
 8002c18:	c7520000 	.word	0xc7520000
 8002c1c:	50040000 	.word	0x50040000
 8002c20:	50040200 	.word	0x50040200
 8002c24:	20000000 	.word	0x20000000
 8002c28:	053e2d63 	.word	0x053e2d63
 8002c2c:	cb840000 	.word	0xcb840000
 8002c30:	80000001 	.word	0x80000001

08002c34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f97f 	bl	8001f44 <LL_ADC_IsEnabled>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d14d      	bne.n	8002ce8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <ADC_Enable+0xc0>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	f043 0210 	orr.w	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	f043 0201 	orr.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e039      	b.n	8002cea <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff f93a 	bl	8001ef4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c80:	f7fe ff94 	bl	8001bac <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c86:	e028      	b.n	8002cda <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff f959 	bl	8001f44 <LL_ADC_IsEnabled>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d104      	bne.n	8002ca2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff f929 	bl	8001ef4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ca2:	f7fe ff83 	bl	8001bac <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d914      	bls.n	8002cda <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d00d      	beq.n	8002cda <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	f043 0210 	orr.w	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e007      	b.n	8002cea <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d1cf      	bne.n	8002c88 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	8000003f 	.word	0x8000003f

08002cf8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff f930 	bl	8001f6a <LL_ADC_IsDisableOngoing>
 8002d0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff f917 	bl	8001f44 <LL_ADC_IsEnabled>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d047      	beq.n	8002dac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d144      	bne.n	8002dac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030d 	and.w	r3, r3, #13
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10c      	bne.n	8002d4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff f8f1 	bl	8001f1c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2203      	movs	r2, #3
 8002d40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d42:	f7fe ff33 	bl	8001bac <HAL_GetTick>
 8002d46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d48:	e029      	b.n	8002d9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f043 0210 	orr.w	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e023      	b.n	8002dae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d66:	f7fe ff21 	bl	8001bac <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d914      	bls.n	8002d9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00d      	beq.n	8002d9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	f043 0210 	orr.w	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	f043 0201 	orr.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e007      	b.n	8002dae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1dc      	bne.n	8002d66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d14b      	bne.n	8002e68 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d021      	beq.n	8002e2e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe ff95 	bl	8001d1e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d032      	beq.n	8002e60 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d12b      	bne.n	8002e60 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d11f      	bne.n	8002e60 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
 8002e2c:	e018      	b.n	8002e60 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d111      	bne.n	8002e60 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e58:	f043 0201 	orr.w	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff fad9 	bl	8002418 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e66:	e00e      	b.n	8002e86 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff fae3 	bl	8002440 <HAL_ADC_ErrorCallback>
}
 8002e7a:	e004      	b.n	8002e86 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f7ff fac5 	bl	800242c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff fab5 	bl	8002440 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <LL_ADC_IsEnabled>:
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <LL_ADC_IsEnabled+0x18>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <LL_ADC_IsEnabled+0x1a>
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_StartCalibration>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	609a      	str	r2, [r3, #8]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_ADC_IsCalibrationOnGoing>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f4a:	d101      	bne.n	8002f50 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d101      	bne.n	8002f76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_ADCEx_Calibration_Start+0x1c>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e04d      	b.n	800303c <HAL_ADCEx_Calibration_Start+0xb8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff fea5 	bl	8002cf8 <ADC_Disable>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d136      	bne.n	8003026 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fc0:	f023 0302 	bic.w	r3, r3, #2
 8002fc4:	f043 0202 	orr.w	r2, r3, #2
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6839      	ldr	r1, [r7, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff ff96 	bl	8002f04 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fd8:	e014      	b.n	8003004 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002fe6:	d30d      	bcc.n	8003004 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f023 0312 	bic.w	r3, r3, #18
 8002ff0:	f043 0210 	orr.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e01b      	b.n	800303c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff94 	bl	8002f36 <LL_ADC_IsCalibrationOnGoing>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e2      	bne.n	8002fda <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f023 0303 	bic.w	r3, r3, #3
 800301c:	f043 0201 	orr.w	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
 8003024:	e005      	b.n	8003032 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	f043 0210 	orr.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b09f      	sub	sp, #124	; 0x7c
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800305e:	2302      	movs	r3, #2
 8003060:	e093      	b.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800306a:	2300      	movs	r3, #0
 800306c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800306e:	2300      	movs	r3, #0
 8003070:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a47      	ldr	r2, [pc, #284]	; (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d102      	bne.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800307c:	4b46      	ldr	r3, [pc, #280]	; (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	e001      	b.n	8003086 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10b      	bne.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e072      	b.n	800318a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff59 	bl	8002f5e <LL_ADC_REG_IsConversionOngoing>
 80030ac:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff53 	bl	8002f5e <LL_ADC_REG_IsConversionOngoing>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d154      	bne.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d151      	bne.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030c4:	4b35      	ldr	r3, [pc, #212]	; (800319c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80030c6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d02c      	beq.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030e2:	035b      	lsls	r3, r3, #13
 80030e4:	430b      	orrs	r3, r1
 80030e6:	431a      	orrs	r2, r3
 80030e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ec:	4829      	ldr	r0, [pc, #164]	; (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030ee:	f7ff fef6 	bl	8002ede <LL_ADC_IsEnabled>
 80030f2:	4604      	mov	r4, r0
 80030f4:	4828      	ldr	r0, [pc, #160]	; (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030f6:	f7ff fef2 	bl	8002ede <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	431c      	orrs	r4, r3
 80030fe:	4828      	ldr	r0, [pc, #160]	; (80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003100:	f7ff feed 	bl	8002ede <LL_ADC_IsEnabled>
 8003104:	4603      	mov	r3, r0
 8003106:	4323      	orrs	r3, r4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d137      	bne.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800310c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003114:	f023 030f 	bic.w	r3, r3, #15
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	6811      	ldr	r1, [r2, #0]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	6892      	ldr	r2, [r2, #8]
 8003120:	430a      	orrs	r2, r1
 8003122:	431a      	orrs	r2, r3
 8003124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003126:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003128:	e028      	b.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800312a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003134:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003136:	4817      	ldr	r0, [pc, #92]	; (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003138:	f7ff fed1 	bl	8002ede <LL_ADC_IsEnabled>
 800313c:	4604      	mov	r4, r0
 800313e:	4816      	ldr	r0, [pc, #88]	; (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003140:	f7ff fecd 	bl	8002ede <LL_ADC_IsEnabled>
 8003144:	4603      	mov	r3, r0
 8003146:	431c      	orrs	r4, r3
 8003148:	4815      	ldr	r0, [pc, #84]	; (80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800314a:	f7ff fec8 	bl	8002ede <LL_ADC_IsEnabled>
 800314e:	4603      	mov	r3, r0
 8003150:	4323      	orrs	r3, r4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d112      	bne.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800315e:	f023 030f 	bic.w	r3, r3, #15
 8003162:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003164:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003166:	e009      	b.n	800317c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800317a:	e000      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800317c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003186:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800318a:	4618      	mov	r0, r3
 800318c:	377c      	adds	r7, #124	; 0x7c
 800318e:	46bd      	mov	sp, r7
 8003190:	bd90      	pop	{r4, r7, pc}
 8003192:	bf00      	nop
 8003194:	50040000 	.word	0x50040000
 8003198:	50040100 	.word	0x50040100
 800319c:	50040300 	.word	0x50040300
 80031a0:	50040200 	.word	0x50040200

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db0b      	blt.n	8003232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4907      	ldr	r1, [pc, #28]	; (8003240 <__NVIC_EnableIRQ+0x38>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2001      	movs	r0, #1
 800322a:	fa00 f202 	lsl.w	r2, r0, r2
 800322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	; (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3b01      	subs	r3, #1
 800330c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003310:	d301      	bcc.n	8003316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003312:	2301      	movs	r3, #1
 8003314:	e00f      	b.n	8003336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <SysTick_Config+0x40>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331e:	210f      	movs	r1, #15
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	f7ff ff8e 	bl	8003244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <SysTick_Config+0x40>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <SysTick_Config+0x40>)
 8003330:	2207      	movs	r2, #7
 8003332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	e000e010 	.word	0xe000e010

08003344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ff29 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800336c:	f7ff ff3e 	bl	80031ec <__NVIC_GetPriorityGrouping>
 8003370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	6978      	ldr	r0, [r7, #20]
 8003378:	f7ff ff8e 	bl	8003298 <NVIC_EncodePriority>
 800337c:	4602      	mov	r2, r0
 800337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff5d 	bl	8003244 <__NVIC_SetPriority>
}
 800338a:	bf00      	nop
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff31 	bl	8003208 <__NVIC_EnableIRQ>
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ffa2 	bl	8003300 <SysTick_Config>
 80033bc:	4603      	mov	r3, r0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e098      	b.n	800350c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	4b4d      	ldr	r3, [pc, #308]	; (8003518 <HAL_DMA_Init+0x150>)
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d80f      	bhi.n	8003406 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b4b      	ldr	r3, [pc, #300]	; (800351c <HAL_DMA_Init+0x154>)
 80033ee:	4413      	add	r3, r2
 80033f0:	4a4b      	ldr	r2, [pc, #300]	; (8003520 <HAL_DMA_Init+0x158>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	009a      	lsls	r2, r3, #2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a48      	ldr	r2, [pc, #288]	; (8003524 <HAL_DMA_Init+0x15c>)
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
 8003404:	e00e      	b.n	8003424 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	4b46      	ldr	r3, [pc, #280]	; (8003528 <HAL_DMA_Init+0x160>)
 800340e:	4413      	add	r3, r2
 8003410:	4a43      	ldr	r2, [pc, #268]	; (8003520 <HAL_DMA_Init+0x158>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	009a      	lsls	r2, r3, #2
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a42      	ldr	r2, [pc, #264]	; (800352c <HAL_DMA_Init+0x164>)
 8003422:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800347e:	d039      	beq.n	80034f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	4a27      	ldr	r2, [pc, #156]	; (8003524 <HAL_DMA_Init+0x15c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d11a      	bne.n	80034c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800348a:	4b29      	ldr	r3, [pc, #164]	; (8003530 <HAL_DMA_Init+0x168>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f003 031c 	and.w	r3, r3, #28
 8003496:	210f      	movs	r1, #15
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	4924      	ldr	r1, [pc, #144]	; (8003530 <HAL_DMA_Init+0x168>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034a4:	4b22      	ldr	r3, [pc, #136]	; (8003530 <HAL_DMA_Init+0x168>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f003 031c 	and.w	r3, r3, #28
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	491d      	ldr	r1, [pc, #116]	; (8003530 <HAL_DMA_Init+0x168>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
 80034be:	e019      	b.n	80034f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034c0:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <HAL_DMA_Init+0x16c>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	f003 031c 	and.w	r3, r3, #28
 80034cc:	210f      	movs	r1, #15
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	4917      	ldr	r1, [pc, #92]	; (8003534 <HAL_DMA_Init+0x16c>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034da:	4b16      	ldr	r3, [pc, #88]	; (8003534 <HAL_DMA_Init+0x16c>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f003 031c 	and.w	r3, r3, #28
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	4911      	ldr	r1, [pc, #68]	; (8003534 <HAL_DMA_Init+0x16c>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40020407 	.word	0x40020407
 800351c:	bffdfff8 	.word	0xbffdfff8
 8003520:	cccccccd 	.word	0xcccccccd
 8003524:	40020000 	.word	0x40020000
 8003528:	bffdfbf8 	.word	0xbffdfbf8
 800352c:	40020400 	.word	0x40020400
 8003530:	400200a8 	.word	0x400200a8
 8003534:	400204a8 	.word	0x400204a8

08003538 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_DMA_Start_IT+0x20>
 8003554:	2302      	movs	r3, #2
 8003556:	e04b      	b.n	80035f0 <HAL_DMA_Start_IT+0xb8>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d13a      	bne.n	80035e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f8e0 	bl	8003756 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 020e 	orr.w	r2, r2, #14
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e00f      	b.n	80035d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0204 	bic.w	r2, r2, #4
 80035be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 020a 	orr.w	r2, r2, #10
 80035ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e005      	b.n	80035ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
 80035ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	f003 031c 	and.w	r3, r3, #28
 8003618:	2204      	movs	r2, #4
 800361a:	409a      	lsls	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d026      	beq.n	8003672 <HAL_DMA_IRQHandler+0x7a>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d021      	beq.n	8003672 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0204 	bic.w	r2, r2, #4
 800364a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	f003 021c 	and.w	r2, r3, #28
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	2104      	movs	r1, #4
 800365a:	fa01 f202 	lsl.w	r2, r1, r2
 800365e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	2b00      	cmp	r3, #0
 8003666:	d071      	beq.n	800374c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003670:	e06c      	b.n	800374c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f003 031c 	and.w	r3, r3, #28
 800367a:	2202      	movs	r2, #2
 800367c:	409a      	lsls	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4013      	ands	r3, r2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d02e      	beq.n	80036e4 <HAL_DMA_IRQHandler+0xec>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d029      	beq.n	80036e4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10b      	bne.n	80036b6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 020a 	bic.w	r2, r2, #10
 80036ac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f003 021c 	and.w	r2, r3, #28
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2102      	movs	r1, #2
 80036c4:	fa01 f202 	lsl.w	r2, r1, r2
 80036c8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d038      	beq.n	800374c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80036e2:	e033      	b.n	800374c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	f003 031c 	and.w	r3, r3, #28
 80036ec:	2208      	movs	r2, #8
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d02a      	beq.n	800374e <HAL_DMA_IRQHandler+0x156>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d025      	beq.n	800374e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 020e 	bic.w	r2, r2, #14
 8003710:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f003 021c 	and.w	r2, r3, #28
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	2101      	movs	r1, #1
 8003720:	fa01 f202 	lsl.w	r2, r1, r2
 8003724:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800374c:	bf00      	nop
 800374e:	bf00      	nop
}
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003768:	f003 021c 	and.w	r2, r3, #28
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	2101      	movs	r1, #1
 8003772:	fa01 f202 	lsl.w	r2, r1, r2
 8003776:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b10      	cmp	r3, #16
 8003786:	d108      	bne.n	800379a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003798:	e007      	b.n	80037aa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	60da      	str	r2, [r3, #12]
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c6:	e17f      	b.n	8003ac8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	2101      	movs	r1, #1
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8171 	beq.w	8003ac2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d00b      	beq.n	8003800 <HAL_GPIO_Init+0x48>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d007      	beq.n	8003800 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037f4:	2b11      	cmp	r3, #17
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b12      	cmp	r3, #18
 80037fe:	d130      	bne.n	8003862 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003836:	2201      	movs	r2, #1
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 0201 	and.w	r2, r3, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b03      	cmp	r3, #3
 800386c:	d118      	bne.n	80038a0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003874:	2201      	movs	r2, #1
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	f003 0201 	and.w	r2, r3, #1
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2203      	movs	r2, #3
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x128>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b12      	cmp	r3, #18
 80038de:	d123      	bne.n	8003928 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	08da      	lsrs	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3208      	adds	r2, #8
 80038e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	220f      	movs	r2, #15
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	08da      	lsrs	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3208      	adds	r2, #8
 8003922:	6939      	ldr	r1, [r7, #16]
 8003924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0203 	and.w	r2, r3, #3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80ac 	beq.w	8003ac2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396a:	4b5f      	ldr	r3, [pc, #380]	; (8003ae8 <HAL_GPIO_Init+0x330>)
 800396c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396e:	4a5e      	ldr	r2, [pc, #376]	; (8003ae8 <HAL_GPIO_Init+0x330>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6613      	str	r3, [r2, #96]	; 0x60
 8003976:	4b5c      	ldr	r3, [pc, #368]	; (8003ae8 <HAL_GPIO_Init+0x330>)
 8003978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003982:	4a5a      	ldr	r2, [pc, #360]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	220f      	movs	r2, #15
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039ac:	d025      	beq.n	80039fa <HAL_GPIO_Init+0x242>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4f      	ldr	r2, [pc, #316]	; (8003af0 <HAL_GPIO_Init+0x338>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01f      	beq.n	80039f6 <HAL_GPIO_Init+0x23e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4e      	ldr	r2, [pc, #312]	; (8003af4 <HAL_GPIO_Init+0x33c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d019      	beq.n	80039f2 <HAL_GPIO_Init+0x23a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4d      	ldr	r2, [pc, #308]	; (8003af8 <HAL_GPIO_Init+0x340>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <HAL_GPIO_Init+0x236>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4c      	ldr	r2, [pc, #304]	; (8003afc <HAL_GPIO_Init+0x344>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00d      	beq.n	80039ea <HAL_GPIO_Init+0x232>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4b      	ldr	r2, [pc, #300]	; (8003b00 <HAL_GPIO_Init+0x348>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <HAL_GPIO_Init+0x22e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4a      	ldr	r2, [pc, #296]	; (8003b04 <HAL_GPIO_Init+0x34c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_GPIO_Init+0x22a>
 80039de:	2306      	movs	r3, #6
 80039e0:	e00c      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039e2:	2307      	movs	r3, #7
 80039e4:	e00a      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039e6:	2305      	movs	r3, #5
 80039e8:	e008      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039ea:	2304      	movs	r3, #4
 80039ec:	e006      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039ee:	2303      	movs	r3, #3
 80039f0:	e004      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e002      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039fa:	2300      	movs	r3, #0
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	f002 0203 	and.w	r2, r2, #3
 8003a02:	0092      	lsls	r2, r2, #2
 8003a04:	4093      	lsls	r3, r2
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a0c:	4937      	ldr	r1, [pc, #220]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	3302      	adds	r3, #2
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a3e:	4a32      	ldr	r2, [pc, #200]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a44:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a68:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a6e:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a92:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003abc:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <HAL_GPIO_Init+0x350>)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f47f ae78 	bne.w	80037c8 <HAL_GPIO_Init+0x10>
  }
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40010000 	.word	0x40010000
 8003af0:	48000400 	.word	0x48000400
 8003af4:	48000800 	.word	0x48000800
 8003af8:	48000c00 	.word	0x48000c00
 8003afc:	48001000 	.word	0x48001000
 8003b00:	48001400 	.word	0x48001400
 8003b04:	48001800 	.word	0x48001800
 8003b08:	40010400 	.word	0x40010400

08003b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b1c:	787b      	ldrb	r3, [r7, #1]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b28:	e002      	b.n	8003b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b2a:	887a      	ldrh	r2, [r7, #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b40:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40007000 	.word	0x40007000

08003b58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b66:	d130      	bne.n	8003bca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b74:	d038      	beq.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b86:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2232      	movs	r2, #50	; 0x32
 8003b8c:	fb02 f303 	mul.w	r3, r2, r3
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	0c9b      	lsrs	r3, r3, #18
 8003b98:	3301      	adds	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b9c:	e002      	b.n	8003ba4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f2      	bne.n	8003b9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc4:	d110      	bne.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e00f      	b.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd6:	d007      	beq.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003be0:	4a05      	ldr	r2, [pc, #20]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003be6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40007000 	.word	0x40007000
 8003bfc:	20000000 	.word	0x20000000
 8003c00:	431bde83 	.word	0x431bde83

08003c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e3d4      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c16:	4ba1      	ldr	r3, [pc, #644]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c20:	4b9e      	ldr	r3, [pc, #632]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80e4 	beq.w	8003e00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <HAL_RCC_OscConfig+0x4a>
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	f040 808b 	bne.w	8003d5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	f040 8087 	bne.w	8003d5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c4e:	4b93      	ldr	r3, [pc, #588]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_RCC_OscConfig+0x62>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e3ac      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	4b8c      	ldr	r3, [pc, #560]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_RCC_OscConfig+0x7c>
 8003c76:	4b89      	ldr	r3, [pc, #548]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c7e:	e005      	b.n	8003c8c <HAL_RCC_OscConfig+0x88>
 8003c80:	4b86      	ldr	r3, [pc, #536]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d223      	bcs.n	8003cd8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fd41 	bl	800471c <RCC_SetFlashLatencyFromMSIRange>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e38d      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ca4:	4b7d      	ldr	r3, [pc, #500]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a7c      	ldr	r2, [pc, #496]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003caa:	f043 0308 	orr.w	r3, r3, #8
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b7a      	ldr	r3, [pc, #488]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4977      	ldr	r1, [pc, #476]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cc2:	4b76      	ldr	r3, [pc, #472]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	4972      	ldr	r1, [pc, #456]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]
 8003cd6:	e025      	b.n	8003d24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd8:	4b70      	ldr	r3, [pc, #448]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6f      	ldr	r2, [pc, #444]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cde:	f043 0308 	orr.w	r3, r3, #8
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b6d      	ldr	r3, [pc, #436]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	496a      	ldr	r1, [pc, #424]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf6:	4b69      	ldr	r3, [pc, #420]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	4965      	ldr	r1, [pc, #404]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fd01 	bl	800471c <RCC_SetFlashLatencyFromMSIRange>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e34d      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d24:	f000 fc36 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b5c      	ldr	r3, [pc, #368]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	495a      	ldr	r1, [pc, #360]	; (8003ea0 <HAL_RCC_OscConfig+0x29c>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d40:	4a58      	ldr	r2, [pc, #352]	; (8003ea4 <HAL_RCC_OscConfig+0x2a0>)
 8003d42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d44:	4b58      	ldr	r3, [pc, #352]	; (8003ea8 <HAL_RCC_OscConfig+0x2a4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fd fedf 	bl	8001b0c <HAL_InitTick>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d052      	beq.n	8003dfe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	e331      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d032      	beq.n	8003dca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d64:	4b4d      	ldr	r3, [pc, #308]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a4c      	ldr	r2, [pc, #304]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d70:	f7fd ff1c 	bl	8001bac <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d78:	f7fd ff18 	bl	8001bac <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e31a      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d8a:	4b44      	ldr	r3, [pc, #272]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d96:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003d9c:	f043 0308 	orr.w	r3, r3, #8
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	493b      	ldr	r1, [pc, #236]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db4:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	4936      	ldr	r1, [pc, #216]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
 8003dc8:	e01a      	b.n	8003e00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dca:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a33      	ldr	r2, [pc, #204]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dd6:	f7fd fee9 	bl	8001bac <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dde:	f7fd fee5 	bl	8001bac <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e2e7      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x1da>
 8003dfc:	e000      	b.n	8003e00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d074      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d005      	beq.n	8003e1e <HAL_RCC_OscConfig+0x21a>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	d10e      	bne.n	8003e36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d10b      	bne.n	8003e36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1e:	4b1f      	ldr	r3, [pc, #124]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d064      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x2f0>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d160      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e2c4      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCC_OscConfig+0x24a>
 8003e40:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	e01d      	b.n	8003e8a <HAL_RCC_OscConfig+0x286>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e56:	d10c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x26e>
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0c      	ldr	r2, [pc, #48]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e00b      	b.n	8003e8a <HAL_RCC_OscConfig+0x286>
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a06      	ldr	r2, [pc, #24]	; (8003e9c <HAL_RCC_OscConfig+0x298>)
 8003e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd fe8b 	bl	8001bac <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e98:	e011      	b.n	8003ebe <HAL_RCC_OscConfig+0x2ba>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	080082dc 	.word	0x080082dc
 8003ea4:	20000000 	.word	0x20000000
 8003ea8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fd fe7e 	bl	8001bac <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e280      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ebe:	4baf      	ldr	r3, [pc, #700]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x2a8>
 8003eca:	e014      	b.n	8003ef6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fd fe6e 	bl	8001bac <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fd fe6a 	bl	8001bac <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	; 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e26c      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee6:	4ba5      	ldr	r3, [pc, #660]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x2d0>
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d060      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_OscConfig+0x310>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b0c      	cmp	r3, #12
 8003f0c:	d119      	bne.n	8003f42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d116      	bne.n	8003f42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f14:	4b99      	ldr	r3, [pc, #612]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_OscConfig+0x328>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e249      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2c:	4b93      	ldr	r3, [pc, #588]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	4990      	ldr	r1, [pc, #576]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f40:	e040      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d023      	beq.n	8003f92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f4a:	4b8c      	ldr	r3, [pc, #560]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a8b      	ldr	r2, [pc, #556]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd fe29 	bl	8001bac <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5e:	f7fd fe25 	bl	8001bac <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e227      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f70:	4b82      	ldr	r3, [pc, #520]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7c:	4b7f      	ldr	r3, [pc, #508]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	061b      	lsls	r3, r3, #24
 8003f8a:	497c      	ldr	r1, [pc, #496]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]
 8003f90:	e018      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f92:	4b7a      	ldr	r3, [pc, #488]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a79      	ldr	r2, [pc, #484]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9e:	f7fd fe05 	bl	8001bac <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa6:	f7fd fe01 	bl	8001bac <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e203      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fb8:	4b70      	ldr	r3, [pc, #448]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03c      	beq.n	800404a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01c      	beq.n	8004012 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd8:	4b68      	ldr	r3, [pc, #416]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fde:	4a67      	ldr	r2, [pc, #412]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7fd fde0 	bl	8001bac <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff0:	f7fd fddc 	bl	8001bac <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1de      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004002:	4b5e      	ldr	r3, [pc, #376]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8004004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0ef      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x3ec>
 8004010:	e01b      	b.n	800404a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004012:	4b5a      	ldr	r3, [pc, #360]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8004014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004018:	4a58      	ldr	r2, [pc, #352]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004022:	f7fd fdc3 	bl	8001bac <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402a:	f7fd fdbf 	bl	8001bac <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e1c1      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800403c:	4b4f      	ldr	r3, [pc, #316]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800403e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1ef      	bne.n	800402a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 80a6 	beq.w	80041a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004058:	2300      	movs	r3, #0
 800405a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800405c:	4b47      	ldr	r3, [pc, #284]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10d      	bne.n	8004084 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b44      	ldr	r3, [pc, #272]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	4a43      	ldr	r2, [pc, #268]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004072:	6593      	str	r3, [r2, #88]	; 0x58
 8004074:	4b41      	ldr	r3, [pc, #260]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004080:	2301      	movs	r3, #1
 8004082:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004084:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <HAL_RCC_OscConfig+0x57c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d118      	bne.n	80040c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004090:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_RCC_OscConfig+0x57c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a3a      	ldr	r2, [pc, #232]	; (8004180 <HAL_RCC_OscConfig+0x57c>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800409c:	f7fd fd86 	bl	8001bac <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a4:	f7fd fd82 	bl	8001bac <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e184      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b6:	4b32      	ldr	r3, [pc, #200]	; (8004180 <HAL_RCC_OscConfig+0x57c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d108      	bne.n	80040dc <HAL_RCC_OscConfig+0x4d8>
 80040ca:	4b2c      	ldr	r3, [pc, #176]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d0:	4a2a      	ldr	r2, [pc, #168]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040da:	e024      	b.n	8004126 <HAL_RCC_OscConfig+0x522>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b05      	cmp	r3, #5
 80040e2:	d110      	bne.n	8004106 <HAL_RCC_OscConfig+0x502>
 80040e4:	4b25      	ldr	r3, [pc, #148]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ea:	4a24      	ldr	r2, [pc, #144]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040ec:	f043 0304 	orr.w	r3, r3, #4
 80040f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f4:	4b21      	ldr	r3, [pc, #132]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	4a20      	ldr	r2, [pc, #128]	; (800417c <HAL_RCC_OscConfig+0x578>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004104:	e00f      	b.n	8004126 <HAL_RCC_OscConfig+0x522>
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	4a1b      	ldr	r2, [pc, #108]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_RCC_OscConfig+0x578>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800411e:	f023 0304 	bic.w	r3, r3, #4
 8004122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d016      	beq.n	800415c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412e:	f7fd fd3d 	bl	8001bac <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd fd39 	bl	8001bac <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e139      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <HAL_RCC_OscConfig+0x578>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0ed      	beq.n	8004136 <HAL_RCC_OscConfig+0x532>
 800415a:	e01a      	b.n	8004192 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fd fd26 	bl	8001bac <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004162:	e00f      	b.n	8004184 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fd fd22 	bl	8001bac <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d906      	bls.n	8004184 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e122      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000
 8004180:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004184:	4b90      	ldr	r3, [pc, #576]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e8      	bne.n	8004164 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004192:	7ffb      	ldrb	r3, [r7, #31]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d105      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004198:	4b8b      	ldr	r3, [pc, #556]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	4a8a      	ldr	r2, [pc, #552]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800419e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8108 	beq.w	80043be <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	f040 80d0 	bne.w	8004358 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041b8:	4b83      	ldr	r3, [pc, #524]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 0203 	and.w	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d130      	bne.n	800422e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	3b01      	subs	r3, #1
 80041d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d127      	bne.n	800422e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d11f      	bne.n	800422e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041f8:	2a07      	cmp	r2, #7
 80041fa:	bf14      	ite	ne
 80041fc:	2201      	movne	r2, #1
 80041fe:	2200      	moveq	r2, #0
 8004200:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004202:	4293      	cmp	r3, r2
 8004204:	d113      	bne.n	800422e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	3b01      	subs	r3, #1
 8004214:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d109      	bne.n	800422e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d06e      	beq.n	800430c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b0c      	cmp	r3, #12
 8004232:	d069      	beq.n	8004308 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004234:	4b64      	ldr	r3, [pc, #400]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004240:	4b61      	ldr	r3, [pc, #388]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b7      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004250:	4b5d      	ldr	r3, [pc, #372]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a5c      	ldr	r2, [pc, #368]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800425a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800425c:	f7fd fca6 	bl	8001bac <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004264:	f7fd fca2 	bl	8001bac <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e0a4      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004276:	4b54      	ldr	r3, [pc, #336]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004282:	4b51      	ldr	r3, [pc, #324]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	4b51      	ldr	r3, [pc, #324]	; (80043cc <HAL_RCC_OscConfig+0x7c8>)
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004292:	3a01      	subs	r2, #1
 8004294:	0112      	lsls	r2, r2, #4
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800429c:	0212      	lsls	r2, r2, #8
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042a4:	0852      	lsrs	r2, r2, #1
 80042a6:	3a01      	subs	r2, #1
 80042a8:	0552      	lsls	r2, r2, #21
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042b0:	0852      	lsrs	r2, r2, #1
 80042b2:	3a01      	subs	r2, #1
 80042b4:	0652      	lsls	r2, r2, #25
 80042b6:	4311      	orrs	r1, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042bc:	0912      	lsrs	r2, r2, #4
 80042be:	0452      	lsls	r2, r2, #17
 80042c0:	430a      	orrs	r2, r1
 80042c2:	4941      	ldr	r1, [pc, #260]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042c8:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a3e      	ldr	r2, [pc, #248]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042d4:	4b3c      	ldr	r3, [pc, #240]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a3b      	ldr	r2, [pc, #236]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e0:	f7fd fc64 	bl	8001bac <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fd fc60 	bl	8001bac <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e062      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fa:	4b33      	ldr	r3, [pc, #204]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004306:	e05a      	b.n	80043be <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e059      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430c:	4b2e      	ldr	r3, [pc, #184]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d152      	bne.n	80043be <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004318:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2a      	ldr	r2, [pc, #168]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800431e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004322:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004324:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a27      	ldr	r2, [pc, #156]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800432a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004330:	f7fd fc3c 	bl	8001bac <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004338:	f7fd fc38 	bl	8001bac <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e03a      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434a:	4b1f      	ldr	r3, [pc, #124]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x734>
 8004356:	e032      	b.n	80043be <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d02d      	beq.n	80043ba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435e:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a19      	ldr	r2, [pc, #100]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004368:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800436a:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d105      	bne.n	8004382 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 800437c:	f023 0303 	bic.w	r3, r3, #3
 8004380:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004382:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4a10      	ldr	r2, [pc, #64]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 8004388:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fd fc0b 	bl	8001bac <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439a:	f7fd fc07 	bl	8001bac <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e009      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_RCC_OscConfig+0x7c4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f0      	bne.n	800439a <HAL_RCC_OscConfig+0x796>
 80043b8:	e001      	b.n	80043be <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000
 80043cc:	f99d808c 	.word	0xf99d808c

080043d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0c8      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b66      	ldr	r3, [pc, #408]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d910      	bls.n	8004414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b63      	ldr	r3, [pc, #396]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 0207 	bic.w	r2, r3, #7
 80043fa:	4961      	ldr	r1, [pc, #388]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b5f      	ldr	r3, [pc, #380]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0b0      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d04c      	beq.n	80044ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d107      	bne.n	8004438 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004428:	4b56      	ldr	r3, [pc, #344]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d121      	bne.n	8004478 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e09e      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d107      	bne.n	8004450 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004440:	4b50      	ldr	r3, [pc, #320]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d115      	bne.n	8004478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e092      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d107      	bne.n	8004468 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004458:	4b4a      	ldr	r3, [pc, #296]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e086      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004468:	4b46      	ldr	r3, [pc, #280]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e07e      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f023 0203 	bic.w	r2, r3, #3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	493f      	ldr	r1, [pc, #252]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004486:	4313      	orrs	r3, r2
 8004488:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448a:	f7fd fb8f 	bl	8001bac <HAL_GetTick>
 800448e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004490:	e00a      	b.n	80044a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004492:	f7fd fb8b 	bl	8001bac <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e066      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a8:	4b36      	ldr	r3, [pc, #216]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 020c 	and.w	r2, r3, #12
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d1eb      	bne.n	8004492 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c6:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	492c      	ldr	r1, [pc, #176]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d8:	4b29      	ldr	r3, [pc, #164]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d210      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b26      	ldr	r3, [pc, #152]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 0207 	bic.w	r2, r3, #7
 80044ee:	4924      	ldr	r1, [pc, #144]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b22      	ldr	r3, [pc, #136]	; (8004580 <HAL_RCC_ClockConfig+0x1b0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e036      	b.n	8004576 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4918      	ldr	r1, [pc, #96]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4910      	ldr	r1, [pc, #64]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004546:	f000 f825 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 800454a:	4602      	mov	r2, r0
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <HAL_RCC_ClockConfig+0x1b4>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	490c      	ldr	r1, [pc, #48]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	5ccb      	ldrb	r3, [r1, r3]
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	4a0a      	ldr	r2, [pc, #40]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fd face 	bl	8001b0c <HAL_InitTick>
 8004570:	4603      	mov	r3, r0
 8004572:	72fb      	strb	r3, [r7, #11]

  return status;
 8004574:	7afb      	ldrb	r3, [r7, #11]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40022000 	.word	0x40022000
 8004584:	40021000 	.word	0x40021000
 8004588:	080082dc 	.word	0x080082dc
 800458c:	20000000 	.word	0x20000000
 8004590:	20000004 	.word	0x20000004

08004594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004594:	b480      	push	{r7}
 8004596:	b089      	sub	sp, #36	; 0x24
 8004598:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045a2:	4b3e      	ldr	r3, [pc, #248]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045ac:	4b3b      	ldr	r3, [pc, #236]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0x34>
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b0c      	cmp	r3, #12
 80045c0:	d121      	bne.n	8004606 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d11e      	bne.n	8004606 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045c8:	4b34      	ldr	r3, [pc, #208]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045d4:	4b31      	ldr	r3, [pc, #196]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 80045d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	e005      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045e4:	4b2d      	ldr	r3, [pc, #180]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045f0:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10d      	bne.n	800461c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004604:	e00a      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b04      	cmp	r3, #4
 800460a:	d102      	bne.n	8004612 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800460c:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	e004      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d101      	bne.n	800461c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004618:	4b23      	ldr	r3, [pc, #140]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800461a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b0c      	cmp	r3, #12
 8004620:	d134      	bne.n	800468c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004622:	4b1e      	ldr	r3, [pc, #120]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d003      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0xa6>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b03      	cmp	r3, #3
 8004636:	d003      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0xac>
 8004638:	e005      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800463a:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800463c:	617b      	str	r3, [r7, #20]
      break;
 800463e:	e005      	b.n	800464c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004642:	617b      	str	r3, [r7, #20]
      break;
 8004644:	e002      	b.n	800464c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	617b      	str	r3, [r7, #20]
      break;
 800464a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800464c:	4b13      	ldr	r3, [pc, #76]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	3301      	adds	r3, #1
 8004658:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	fb02 f203 	mul.w	r2, r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004672:	4b0a      	ldr	r3, [pc, #40]	; (800469c <HAL_RCC_GetSysClockFreq+0x108>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	0e5b      	lsrs	r3, r3, #25
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	3301      	adds	r3, #1
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	fbb2 f3f3 	udiv	r3, r2, r3
 800468a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800468c:	69bb      	ldr	r3, [r7, #24]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3724      	adds	r7, #36	; 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	080082f4 	.word	0x080082f4
 80046a4:	00f42400 	.word	0x00f42400
 80046a8:	007a1200 	.word	0x007a1200

080046ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000000 	.word	0x20000000

080046c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046c8:	f7ff fff0 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4904      	ldr	r1, [pc, #16]	; (80046ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40021000 	.word	0x40021000
 80046ec:	080082ec 	.word	0x080082ec

080046f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046f4:	f7ff ffda 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	0adb      	lsrs	r3, r3, #11
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4904      	ldr	r1, [pc, #16]	; (8004718 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000
 8004718:	080082ec 	.word	0x080082ec

0800471c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004728:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004734:	f7ff fa02 	bl	8003b3c <HAL_PWREx_GetVoltageRange>
 8004738:	6178      	str	r0, [r7, #20]
 800473a:	e014      	b.n	8004766 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800473c:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	4a24      	ldr	r2, [pc, #144]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004746:	6593      	str	r3, [r2, #88]	; 0x58
 8004748:	4b22      	ldr	r3, [pc, #136]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004754:	f7ff f9f2 	bl	8003b3c <HAL_PWREx_GetVoltageRange>
 8004758:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800475a:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004764:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800476c:	d10b      	bne.n	8004786 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d919      	bls.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2ba0      	cmp	r3, #160	; 0xa0
 8004778:	d902      	bls.n	8004780 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800477a:	2302      	movs	r3, #2
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	e013      	b.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004780:	2301      	movs	r3, #1
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	e010      	b.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b80      	cmp	r3, #128	; 0x80
 800478a:	d902      	bls.n	8004792 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800478c:	2303      	movs	r3, #3
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	e00a      	b.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d102      	bne.n	800479e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004798:	2302      	movs	r3, #2
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e004      	b.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b70      	cmp	r3, #112	; 0x70
 80047a2:	d101      	bne.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047a4:	2301      	movs	r3, #1
 80047a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f023 0207 	bic.w	r2, r3, #7
 80047b0:	4909      	ldr	r1, [pc, #36]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047b8:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d001      	beq.n	80047ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40022000 	.word	0x40022000

080047dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047e4:	2300      	movs	r3, #0
 80047e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047e8:	2300      	movs	r3, #0
 80047ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d041      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004800:	d02a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004802:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004806:	d824      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800480c:	d008      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800480e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004812:	d81e      	bhi.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800481c:	d010      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800481e:	e018      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004820:	4b86      	ldr	r3, [pc, #536]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a85      	ldr	r2, [pc, #532]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800482c:	e015      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3304      	adds	r3, #4
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fabb 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800483e:	e00c      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3320      	adds	r3, #32
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fba6 	bl	8004f98 <RCCEx_PLLSAI2_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004850:	e003      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	74fb      	strb	r3, [r7, #19]
      break;
 8004856:	e000      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485a:	7cfb      	ldrb	r3, [r7, #19]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004860:	4b76      	ldr	r3, [pc, #472]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800486e:	4973      	ldr	r1, [pc, #460]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004876:	e001      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d041      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800488c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004890:	d02a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004892:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004896:	d824      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800489c:	d008      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800489e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a2:	d81e      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048ac:	d010      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048ae:	e018      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048b0:	4b62      	ldr	r3, [pc, #392]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a61      	ldr	r2, [pc, #388]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048bc:	e015      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fa73 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048ce:	e00c      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3320      	adds	r3, #32
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fb5e 	bl	8004f98 <RCCEx_PLLSAI2_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048e0:	e003      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	74fb      	strb	r3, [r7, #19]
      break;
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ea:	7cfb      	ldrb	r3, [r7, #19]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10b      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048f0:	4b52      	ldr	r3, [pc, #328]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048fe:	494f      	ldr	r1, [pc, #316]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004906:	e001      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80a0 	beq.w	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004934:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004938:	4a40      	ldr	r2, [pc, #256]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493e:	6593      	str	r3, [r2, #88]	; 0x58
 8004940:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494c:	2301      	movs	r3, #1
 800494e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004950:	4b3b      	ldr	r3, [pc, #236]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3a      	ldr	r2, [pc, #232]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800495c:	f7fd f926 	bl	8001bac <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004962:	e009      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004964:	f7fd f922 	bl	8001bac <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d902      	bls.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	74fb      	strb	r3, [r7, #19]
        break;
 8004976:	e005      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004978:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0ef      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d15c      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800498a:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01f      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d019      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049a8:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049b4:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	4a20      	ldr	r2, [pc, #128]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049c4:	4b1d      	ldr	r3, [pc, #116]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e6:	f7fd f8e1 	bl	8001bac <HAL_GetTick>
 80049ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ec:	e00b      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fd f8dd 	bl	8001bac <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d902      	bls.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	74fb      	strb	r3, [r7, #19]
            break;
 8004a04:	e006      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ec      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a1a:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2a:	4904      	ldr	r1, [pc, #16]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a32:	e009      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	74bb      	strb	r3, [r7, #18]
 8004a38:	e006      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a48:	7c7b      	ldrb	r3, [r7, #17]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d105      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a4e:	4b9e      	ldr	r3, [pc, #632]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a52:	4a9d      	ldr	r2, [pc, #628]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a66:	4b98      	ldr	r3, [pc, #608]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f023 0203 	bic.w	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	4994      	ldr	r1, [pc, #592]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a88:	4b8f      	ldr	r3, [pc, #572]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f023 020c 	bic.w	r2, r3, #12
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	498c      	ldr	r1, [pc, #560]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aaa:	4b87      	ldr	r3, [pc, #540]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	4983      	ldr	r1, [pc, #524]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004acc:	4b7e      	ldr	r3, [pc, #504]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	497b      	ldr	r1, [pc, #492]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aee:	4b76      	ldr	r3, [pc, #472]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afc:	4972      	ldr	r1, [pc, #456]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b10:	4b6d      	ldr	r3, [pc, #436]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1e:	496a      	ldr	r1, [pc, #424]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b32:	4b65      	ldr	r3, [pc, #404]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b40:	4961      	ldr	r1, [pc, #388]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b54:	4b5c      	ldr	r3, [pc, #368]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b62:	4959      	ldr	r1, [pc, #356]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b76:	4b54      	ldr	r3, [pc, #336]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b84:	4950      	ldr	r1, [pc, #320]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b98:	4b4b      	ldr	r3, [pc, #300]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	4948      	ldr	r1, [pc, #288]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bba:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	493f      	ldr	r1, [pc, #252]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d028      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bdc:	4b3a      	ldr	r3, [pc, #232]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bea:	4937      	ldr	r1, [pc, #220]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bfc:	4b32      	ldr	r3, [pc, #200]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a31      	ldr	r2, [pc, #196]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c06:	60d3      	str	r3, [r2, #12]
 8004c08:	e011      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c12:	d10c      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	2101      	movs	r1, #1
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f8c8 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d028      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c3a:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	491f      	ldr	r1, [pc, #124]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c58:	d106      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c64:	60d3      	str	r3, [r2, #12]
 8004c66:	e011      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c70:	d10c      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	2101      	movs	r1, #1
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f899 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c82:	7cfb      	ldrb	r3, [r7, #19]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02b      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca6:	4908      	ldr	r1, [pc, #32]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb6:	d109      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb8:	4b03      	ldr	r3, [pc, #12]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a02      	ldr	r2, [pc, #8]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc2:	60d3      	str	r3, [r2, #12]
 8004cc4:	e014      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	2101      	movs	r1, #1
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 f867 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ce6:	7cfb      	ldrb	r3, [r7, #19]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004cec:	7cfb      	ldrb	r3, [r7, #19]
 8004cee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02f      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0a:	4928      	ldr	r1, [pc, #160]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d1a:	d10d      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	2102      	movs	r1, #2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f844 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d2c:	7cfb      	ldrb	r3, [r7, #19]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d014      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	74bb      	strb	r3, [r7, #18]
 8004d36:	e011      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3320      	adds	r3, #32
 8004d46:	2102      	movs	r1, #2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 f925 	bl	8004f98 <RCCEx_PLLSAI2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d52:	7cfb      	ldrb	r3, [r7, #19]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d68:	4b10      	ldr	r3, [pc, #64]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d76:	490d      	ldr	r1, [pc, #52]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9a:	4904      	ldr	r1, [pc, #16]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004da2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40021000 	.word	0x40021000

08004db0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dbe:	4b75      	ldr	r3, [pc, #468]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d018      	beq.n	8004dfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dca:	4b72      	ldr	r3, [pc, #456]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0203 	and.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d10d      	bne.n	8004df6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004de2:	4b6c      	ldr	r3, [pc, #432]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
       ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d047      	beq.n	8004e86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	e044      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d018      	beq.n	8004e36 <RCCEx_PLLSAI1_Config+0x86>
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d825      	bhi.n	8004e54 <RCCEx_PLLSAI1_Config+0xa4>
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d002      	beq.n	8004e12 <RCCEx_PLLSAI1_Config+0x62>
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d009      	beq.n	8004e24 <RCCEx_PLLSAI1_Config+0x74>
 8004e10:	e020      	b.n	8004e54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e12:	4b60      	ldr	r3, [pc, #384]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d11d      	bne.n	8004e5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e22:	e01a      	b.n	8004e5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e24:	4b5b      	ldr	r3, [pc, #364]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d116      	bne.n	8004e5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e34:	e013      	b.n	8004e5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e36:	4b57      	ldr	r3, [pc, #348]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e42:	4b54      	ldr	r3, [pc, #336]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e52:	e006      	b.n	8004e62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
      break;
 8004e58:	e004      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e002      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e000      	b.n	8004e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10d      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e6a:	4b4a      	ldr	r3, [pc, #296]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6819      	ldr	r1, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	4944      	ldr	r1, [pc, #272]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d17d      	bne.n	8004f88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e8c:	4b41      	ldr	r3, [pc, #260]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a40      	ldr	r2, [pc, #256]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e98:	f7fc fe88 	bl	8001bac <HAL_GetTick>
 8004e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e9e:	e009      	b.n	8004eb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ea0:	f7fc fe84 	bl	8001bac <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d902      	bls.n	8004eb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb2:	e005      	b.n	8004ec0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eb4:	4b37      	ldr	r3, [pc, #220]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1ef      	bne.n	8004ea0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d160      	bne.n	8004f88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d111      	bne.n	8004ef0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ecc:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6892      	ldr	r2, [r2, #8]
 8004edc:	0211      	lsls	r1, r2, #8
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68d2      	ldr	r2, [r2, #12]
 8004ee2:	0912      	lsrs	r2, r2, #4
 8004ee4:	0452      	lsls	r2, r2, #17
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	492a      	ldr	r1, [pc, #168]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	610b      	str	r3, [r1, #16]
 8004eee:	e027      	b.n	8004f40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d112      	bne.n	8004f1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ef6:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004efe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6892      	ldr	r2, [r2, #8]
 8004f06:	0211      	lsls	r1, r2, #8
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6912      	ldr	r2, [r2, #16]
 8004f0c:	0852      	lsrs	r2, r2, #1
 8004f0e:	3a01      	subs	r2, #1
 8004f10:	0552      	lsls	r2, r2, #21
 8004f12:	430a      	orrs	r2, r1
 8004f14:	491f      	ldr	r1, [pc, #124]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	610b      	str	r3, [r1, #16]
 8004f1a:	e011      	b.n	8004f40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f1c:	4b1d      	ldr	r3, [pc, #116]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6892      	ldr	r2, [r2, #8]
 8004f2c:	0211      	lsls	r1, r2, #8
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6952      	ldr	r2, [r2, #20]
 8004f32:	0852      	lsrs	r2, r2, #1
 8004f34:	3a01      	subs	r2, #1
 8004f36:	0652      	lsls	r2, r2, #25
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	4916      	ldr	r1, [pc, #88]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f40:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4c:	f7fc fe2e 	bl	8001bac <HAL_GetTick>
 8004f50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f52:	e009      	b.n	8004f68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f54:	f7fc fe2a 	bl	8001bac <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d902      	bls.n	8004f68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	73fb      	strb	r3, [r7, #15]
          break;
 8004f66:	e005      	b.n	8004f74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f68:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0ef      	beq.n	8004f54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	4904      	ldr	r1, [pc, #16]	; (8004f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000

08004f98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fa6:	4b6a      	ldr	r3, [pc, #424]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d018      	beq.n	8004fe4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fb2:	4b67      	ldr	r3, [pc, #412]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0203 	and.w	r2, r3, #3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d10d      	bne.n	8004fde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
       ||
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fca:	4b61      	ldr	r3, [pc, #388]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
       ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d047      	beq.n	800506e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	73fb      	strb	r3, [r7, #15]
 8004fe2:	e044      	b.n	800506e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d018      	beq.n	800501e <RCCEx_PLLSAI2_Config+0x86>
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d825      	bhi.n	800503c <RCCEx_PLLSAI2_Config+0xa4>
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d002      	beq.n	8004ffa <RCCEx_PLLSAI2_Config+0x62>
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d009      	beq.n	800500c <RCCEx_PLLSAI2_Config+0x74>
 8004ff8:	e020      	b.n	800503c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ffa:	4b55      	ldr	r3, [pc, #340]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11d      	bne.n	8005042 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500a:	e01a      	b.n	8005042 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800500c:	4b50      	ldr	r3, [pc, #320]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	2b00      	cmp	r3, #0
 8005016:	d116      	bne.n	8005046 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800501c:	e013      	b.n	8005046 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800501e:	4b4c      	ldr	r3, [pc, #304]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10f      	bne.n	800504a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800502a:	4b49      	ldr	r3, [pc, #292]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800503a:	e006      	b.n	800504a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
      break;
 8005040:	e004      	b.n	800504c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005042:	bf00      	nop
 8005044:	e002      	b.n	800504c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005046:	bf00      	nop
 8005048:	e000      	b.n	800504c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800504a:	bf00      	nop
    }

    if(status == HAL_OK)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10d      	bne.n	800506e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005052:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	3b01      	subs	r3, #1
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	430b      	orrs	r3, r1
 8005068:	4939      	ldr	r1, [pc, #228]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506a:	4313      	orrs	r3, r2
 800506c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d167      	bne.n	8005144 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005074:	4b36      	ldr	r3, [pc, #216]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a35      	ldr	r2, [pc, #212]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800507a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005080:	f7fc fd94 	bl	8001bac <HAL_GetTick>
 8005084:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005086:	e009      	b.n	800509c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005088:	f7fc fd90 	bl	8001bac <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d902      	bls.n	800509c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	73fb      	strb	r3, [r7, #15]
        break;
 800509a:	e005      	b.n	80050a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800509c:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1ef      	bne.n	8005088 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d14a      	bne.n	8005144 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d111      	bne.n	80050d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050b4:	4b26      	ldr	r3, [pc, #152]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6892      	ldr	r2, [r2, #8]
 80050c4:	0211      	lsls	r1, r2, #8
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68d2      	ldr	r2, [r2, #12]
 80050ca:	0912      	lsrs	r2, r2, #4
 80050cc:	0452      	lsls	r2, r2, #17
 80050ce:	430a      	orrs	r2, r1
 80050d0:	491f      	ldr	r1, [pc, #124]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	614b      	str	r3, [r1, #20]
 80050d6:	e011      	b.n	80050fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050d8:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6892      	ldr	r2, [r2, #8]
 80050e8:	0211      	lsls	r1, r2, #8
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6912      	ldr	r2, [r2, #16]
 80050ee:	0852      	lsrs	r2, r2, #1
 80050f0:	3a01      	subs	r2, #1
 80050f2:	0652      	lsls	r2, r2, #25
 80050f4:	430a      	orrs	r2, r1
 80050f6:	4916      	ldr	r1, [pc, #88]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050fc:	4b14      	ldr	r3, [pc, #80]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a13      	ldr	r2, [pc, #76]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005106:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005108:	f7fc fd50 	bl	8001bac <HAL_GetTick>
 800510c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800510e:	e009      	b.n	8005124 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005110:	f7fc fd4c 	bl	8001bac <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d902      	bls.n	8005124 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	73fb      	strb	r3, [r7, #15]
          break;
 8005122:	e005      	b.n	8005130 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005124:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0ef      	beq.n	8005110 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	4904      	ldr	r1, [pc, #16]	; (8005150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005140:	4313      	orrs	r3, r2
 8005142:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000

08005154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e049      	b.n	80051fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc fa14 	bl	80015a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f000 fcc4 	bl	8005b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e049      	b.n	80052a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f841 	bl	80052b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3304      	adds	r3, #4
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f000 fc6d 	bl	8005b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d109      	bne.n	80052e8 <HAL_TIM_PWM_Start+0x24>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e03c      	b.n	8005362 <HAL_TIM_PWM_Start+0x9e>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d109      	bne.n	8005302 <HAL_TIM_PWM_Start+0x3e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	bf14      	ite	ne
 80052fa:	2301      	movne	r3, #1
 80052fc:	2300      	moveq	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	e02f      	b.n	8005362 <HAL_TIM_PWM_Start+0x9e>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d109      	bne.n	800531c <HAL_TIM_PWM_Start+0x58>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e022      	b.n	8005362 <HAL_TIM_PWM_Start+0x9e>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b0c      	cmp	r3, #12
 8005320:	d109      	bne.n	8005336 <HAL_TIM_PWM_Start+0x72>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	e015      	b.n	8005362 <HAL_TIM_PWM_Start+0x9e>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b10      	cmp	r3, #16
 800533a:	d109      	bne.n	8005350 <HAL_TIM_PWM_Start+0x8c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	e008      	b.n	8005362 <HAL_TIM_PWM_Start+0x9e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b01      	cmp	r3, #1
 800535a:	bf14      	ite	ne
 800535c:	2301      	movne	r3, #1
 800535e:	2300      	moveq	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e09c      	b.n	80054a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d104      	bne.n	800537a <HAL_TIM_PWM_Start+0xb6>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005378:	e023      	b.n	80053c2 <HAL_TIM_PWM_Start+0xfe>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b04      	cmp	r3, #4
 800537e:	d104      	bne.n	800538a <HAL_TIM_PWM_Start+0xc6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005388:	e01b      	b.n	80053c2 <HAL_TIM_PWM_Start+0xfe>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d104      	bne.n	800539a <HAL_TIM_PWM_Start+0xd6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005398:	e013      	b.n	80053c2 <HAL_TIM_PWM_Start+0xfe>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b0c      	cmp	r3, #12
 800539e:	d104      	bne.n	80053aa <HAL_TIM_PWM_Start+0xe6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053a8:	e00b      	b.n	80053c2 <HAL_TIM_PWM_Start+0xfe>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d104      	bne.n	80053ba <HAL_TIM_PWM_Start+0xf6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b8:	e003      	b.n	80053c2 <HAL_TIM_PWM_Start+0xfe>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2202      	movs	r2, #2
 80053be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2201      	movs	r2, #1
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 ffb2 	bl	8006334 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a35      	ldr	r2, [pc, #212]	; (80054ac <HAL_TIM_PWM_Start+0x1e8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <HAL_TIM_PWM_Start+0x13e>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a34      	ldr	r2, [pc, #208]	; (80054b0 <HAL_TIM_PWM_Start+0x1ec>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00e      	beq.n	8005402 <HAL_TIM_PWM_Start+0x13e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a32      	ldr	r2, [pc, #200]	; (80054b4 <HAL_TIM_PWM_Start+0x1f0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_TIM_PWM_Start+0x13e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a31      	ldr	r2, [pc, #196]	; (80054b8 <HAL_TIM_PWM_Start+0x1f4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_TIM_PWM_Start+0x13e>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a2f      	ldr	r2, [pc, #188]	; (80054bc <HAL_TIM_PWM_Start+0x1f8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d101      	bne.n	8005406 <HAL_TIM_PWM_Start+0x142>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <HAL_TIM_PWM_Start+0x144>
 8005406:	2300      	movs	r3, #0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800541a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a22      	ldr	r2, [pc, #136]	; (80054ac <HAL_TIM_PWM_Start+0x1e8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01d      	beq.n	8005462 <HAL_TIM_PWM_Start+0x19e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542e:	d018      	beq.n	8005462 <HAL_TIM_PWM_Start+0x19e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a22      	ldr	r2, [pc, #136]	; (80054c0 <HAL_TIM_PWM_Start+0x1fc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_TIM_PWM_Start+0x19e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a21      	ldr	r2, [pc, #132]	; (80054c4 <HAL_TIM_PWM_Start+0x200>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_TIM_PWM_Start+0x19e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <HAL_TIM_PWM_Start+0x204>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_TIM_PWM_Start+0x19e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a17      	ldr	r2, [pc, #92]	; (80054b0 <HAL_TIM_PWM_Start+0x1ec>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_TIM_PWM_Start+0x19e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <HAL_TIM_PWM_Start+0x1f0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d115      	bne.n	800548e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	4b18      	ldr	r3, [pc, #96]	; (80054cc <HAL_TIM_PWM_Start+0x208>)
 800546a:	4013      	ands	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b06      	cmp	r3, #6
 8005472:	d015      	beq.n	80054a0 <HAL_TIM_PWM_Start+0x1dc>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547a:	d011      	beq.n	80054a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548c:	e008      	b.n	80054a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e000      	b.n	80054a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40013400 	.word	0x40013400
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40014400 	.word	0x40014400
 80054bc:	40014800 	.word	0x40014800
 80054c0:	40000400 	.word	0x40000400
 80054c4:	40000800 	.word	0x40000800
 80054c8:	40000c00 	.word	0x40000c00
 80054cc:	00010007 	.word	0x00010007

080054d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d122      	bne.n	800552c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d11b      	bne.n	800552c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0202 	mvn.w	r2, #2
 80054fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fae6 	bl	8005ae4 <HAL_TIM_IC_CaptureCallback>
 8005518:	e005      	b.n	8005526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fad8 	bl	8005ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fae9 	bl	8005af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b04      	cmp	r3, #4
 8005538:	d122      	bne.n	8005580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b04      	cmp	r3, #4
 8005546:	d11b      	bne.n	8005580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0204 	mvn.w	r2, #4
 8005550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fabc 	bl	8005ae4 <HAL_TIM_IC_CaptureCallback>
 800556c:	e005      	b.n	800557a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 faae 	bl	8005ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fabf 	bl	8005af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b08      	cmp	r3, #8
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b08      	cmp	r3, #8
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0208 	mvn.w	r2, #8
 80055a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2204      	movs	r2, #4
 80055aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fa92 	bl	8005ae4 <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa84 	bl	8005ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fa95 	bl	8005af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b10      	cmp	r3, #16
 80055e0:	d122      	bne.n	8005628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d11b      	bne.n	8005628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0210 	mvn.w	r2, #16
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2208      	movs	r2, #8
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa68 	bl	8005ae4 <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fa5a 	bl	8005ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fa6b 	bl	8005af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b01      	cmp	r3, #1
 8005634:	d10e      	bne.n	8005654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b01      	cmp	r3, #1
 8005642:	d107      	bne.n	8005654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0201 	mvn.w	r2, #1
 800564c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa34 	bl	8005abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565e:	2b80      	cmp	r3, #128	; 0x80
 8005660:	d10e      	bne.n	8005680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566c:	2b80      	cmp	r3, #128	; 0x80
 800566e:	d107      	bne.n	8005680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 ff12 	bl	80064a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568e:	d10e      	bne.n	80056ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d107      	bne.n	80056ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 ff05 	bl	80064b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d10e      	bne.n	80056da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d107      	bne.n	80056da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa19 	bl	8005b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d10e      	bne.n	8005706 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d107      	bne.n	8005706 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f06f 0220 	mvn.w	r2, #32
 80056fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fec5 	bl	8006490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005706:	bf00      	nop
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005726:	2302      	movs	r3, #2
 8005728:	e0fd      	b.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x216>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b14      	cmp	r3, #20
 8005736:	f200 80f0 	bhi.w	800591a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800573a:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005795 	.word	0x08005795
 8005744:	0800591b 	.word	0x0800591b
 8005748:	0800591b 	.word	0x0800591b
 800574c:	0800591b 	.word	0x0800591b
 8005750:	080057d5 	.word	0x080057d5
 8005754:	0800591b 	.word	0x0800591b
 8005758:	0800591b 	.word	0x0800591b
 800575c:	0800591b 	.word	0x0800591b
 8005760:	08005817 	.word	0x08005817
 8005764:	0800591b 	.word	0x0800591b
 8005768:	0800591b 	.word	0x0800591b
 800576c:	0800591b 	.word	0x0800591b
 8005770:	08005857 	.word	0x08005857
 8005774:	0800591b 	.word	0x0800591b
 8005778:	0800591b 	.word	0x0800591b
 800577c:	0800591b 	.word	0x0800591b
 8005780:	08005899 	.word	0x08005899
 8005784:	0800591b 	.word	0x0800591b
 8005788:	0800591b 	.word	0x0800591b
 800578c:	0800591b 	.word	0x0800591b
 8005790:	080058d9 	.word	0x080058d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fa5a 	bl	8005c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0208 	orr.w	r2, r2, #8
 80057ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0204 	bic.w	r2, r2, #4
 80057be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6999      	ldr	r1, [r3, #24]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	691a      	ldr	r2, [r3, #16]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	619a      	str	r2, [r3, #24]
      break;
 80057d2:	e0a3      	b.n	800591c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 faca 	bl	8005d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6999      	ldr	r1, [r3, #24]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	021a      	lsls	r2, r3, #8
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	619a      	str	r2, [r3, #24]
      break;
 8005814:	e082      	b.n	800591c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fb33 	bl	8005e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0208 	orr.w	r2, r2, #8
 8005830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0204 	bic.w	r2, r2, #4
 8005840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69d9      	ldr	r1, [r3, #28]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	61da      	str	r2, [r3, #28]
      break;
 8005854:	e062      	b.n	800591c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fb9b 	bl	8005f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69d9      	ldr	r1, [r3, #28]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	021a      	lsls	r2, r3, #8
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	61da      	str	r2, [r3, #28]
      break;
 8005896:	e041      	b.n	800591c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fbe4 	bl	800606c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0208 	orr.w	r2, r2, #8
 80058b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0204 	bic.w	r2, r2, #4
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058d6:	e021      	b.n	800591c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fc28 	bl	8006134 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	021a      	lsls	r2, r3, #8
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005918:	e000      	b.n	800591c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800591a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop

08005930 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_TIM_ConfigClockSource+0x18>
 8005944:	2302      	movs	r3, #2
 8005946:	e0b5      	b.n	8005ab4 <HAL_TIM_ConfigClockSource+0x184>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005966:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800596a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005972:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005984:	d03e      	beq.n	8005a04 <HAL_TIM_ConfigClockSource+0xd4>
 8005986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598a:	f200 8087 	bhi.w	8005a9c <HAL_TIM_ConfigClockSource+0x16c>
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005992:	f000 8085 	beq.w	8005aa0 <HAL_TIM_ConfigClockSource+0x170>
 8005996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599a:	d87f      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x16c>
 800599c:	2b70      	cmp	r3, #112	; 0x70
 800599e:	d01a      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0xa6>
 80059a0:	2b70      	cmp	r3, #112	; 0x70
 80059a2:	d87b      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x16c>
 80059a4:	2b60      	cmp	r3, #96	; 0x60
 80059a6:	d050      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x11a>
 80059a8:	2b60      	cmp	r3, #96	; 0x60
 80059aa:	d877      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x16c>
 80059ac:	2b50      	cmp	r3, #80	; 0x50
 80059ae:	d03c      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0xfa>
 80059b0:	2b50      	cmp	r3, #80	; 0x50
 80059b2:	d873      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x16c>
 80059b4:	2b40      	cmp	r3, #64	; 0x40
 80059b6:	d058      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x13a>
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d86f      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b30      	cmp	r3, #48	; 0x30
 80059be:	d064      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x15a>
 80059c0:	2b30      	cmp	r3, #48	; 0x30
 80059c2:	d86b      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x16c>
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d060      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x15a>
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d867      	bhi.n	8005a9c <HAL_TIM_ConfigClockSource+0x16c>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d05c      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x15a>
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d05a      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80059d4:	e062      	b.n	8005a9c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6899      	ldr	r1, [r3, #8]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f000 fc85 	bl	80062f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	609a      	str	r2, [r3, #8]
      break;
 8005a02:	e04e      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	6899      	ldr	r1, [r3, #8]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f000 fc6e 	bl	80062f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a26:	609a      	str	r2, [r3, #8]
      break;
 8005a28:	e03b      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6859      	ldr	r1, [r3, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	461a      	mov	r2, r3
 8005a38:	f000 fbe2 	bl	8006200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2150      	movs	r1, #80	; 0x50
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fc3b 	bl	80062be <TIM_ITRx_SetConfig>
      break;
 8005a48:	e02b      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 fc01 	bl	800625e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2160      	movs	r1, #96	; 0x60
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fc2b 	bl	80062be <TIM_ITRx_SetConfig>
      break;
 8005a68:	e01b      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f000 fbc2 	bl	8006200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2140      	movs	r1, #64	; 0x40
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fc1b 	bl	80062be <TIM_ITRx_SetConfig>
      break;
 8005a88:	e00b      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f000 fc12 	bl	80062be <TIM_ITRx_SetConfig>
        break;
 8005a9a:	e002      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005a9c:	bf00      	nop
 8005a9e:	e000      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005aa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a40      	ldr	r2, [pc, #256]	; (8005c34 <TIM_Base_SetConfig+0x114>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d013      	beq.n	8005b60 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3e:	d00f      	beq.n	8005b60 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a3d      	ldr	r2, [pc, #244]	; (8005c38 <TIM_Base_SetConfig+0x118>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00b      	beq.n	8005b60 <TIM_Base_SetConfig+0x40>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a3c      	ldr	r2, [pc, #240]	; (8005c3c <TIM_Base_SetConfig+0x11c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d007      	beq.n	8005b60 <TIM_Base_SetConfig+0x40>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a3b      	ldr	r2, [pc, #236]	; (8005c40 <TIM_Base_SetConfig+0x120>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_Base_SetConfig+0x40>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a3a      	ldr	r2, [pc, #232]	; (8005c44 <TIM_Base_SetConfig+0x124>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d108      	bne.n	8005b72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2f      	ldr	r2, [pc, #188]	; (8005c34 <TIM_Base_SetConfig+0x114>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01f      	beq.n	8005bba <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b80:	d01b      	beq.n	8005bba <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2c      	ldr	r2, [pc, #176]	; (8005c38 <TIM_Base_SetConfig+0x118>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d017      	beq.n	8005bba <TIM_Base_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2b      	ldr	r2, [pc, #172]	; (8005c3c <TIM_Base_SetConfig+0x11c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <TIM_Base_SetConfig+0x9a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2a      	ldr	r2, [pc, #168]	; (8005c40 <TIM_Base_SetConfig+0x120>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00f      	beq.n	8005bba <TIM_Base_SetConfig+0x9a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a29      	ldr	r2, [pc, #164]	; (8005c44 <TIM_Base_SetConfig+0x124>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00b      	beq.n	8005bba <TIM_Base_SetConfig+0x9a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a28      	ldr	r2, [pc, #160]	; (8005c48 <TIM_Base_SetConfig+0x128>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d007      	beq.n	8005bba <TIM_Base_SetConfig+0x9a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a27      	ldr	r2, [pc, #156]	; (8005c4c <TIM_Base_SetConfig+0x12c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_Base_SetConfig+0x9a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a26      	ldr	r2, [pc, #152]	; (8005c50 <TIM_Base_SetConfig+0x130>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d108      	bne.n	8005bcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a10      	ldr	r2, [pc, #64]	; (8005c34 <TIM_Base_SetConfig+0x114>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00f      	beq.n	8005c18 <TIM_Base_SetConfig+0xf8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a12      	ldr	r2, [pc, #72]	; (8005c44 <TIM_Base_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00b      	beq.n	8005c18 <TIM_Base_SetConfig+0xf8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <TIM_Base_SetConfig+0x128>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d007      	beq.n	8005c18 <TIM_Base_SetConfig+0xf8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a10      	ldr	r2, [pc, #64]	; (8005c4c <TIM_Base_SetConfig+0x12c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <TIM_Base_SetConfig+0xf8>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a0f      	ldr	r2, [pc, #60]	; (8005c50 <TIM_Base_SetConfig+0x130>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d103      	bne.n	8005c20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	615a      	str	r2, [r3, #20]
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800
 8005c40:	40000c00 	.word	0x40000c00
 8005c44:	40013400 	.word	0x40013400
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40014400 	.word	0x40014400
 8005c50:	40014800 	.word	0x40014800

08005c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f023 0201 	bic.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f023 0302 	bic.w	r3, r3, #2
 8005ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a2c      	ldr	r2, [pc, #176]	; (8005d60 <TIM_OC1_SetConfig+0x10c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00f      	beq.n	8005cd4 <TIM_OC1_SetConfig+0x80>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a2b      	ldr	r2, [pc, #172]	; (8005d64 <TIM_OC1_SetConfig+0x110>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <TIM_OC1_SetConfig+0x80>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a2a      	ldr	r2, [pc, #168]	; (8005d68 <TIM_OC1_SetConfig+0x114>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <TIM_OC1_SetConfig+0x80>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a29      	ldr	r2, [pc, #164]	; (8005d6c <TIM_OC1_SetConfig+0x118>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_OC1_SetConfig+0x80>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a28      	ldr	r2, [pc, #160]	; (8005d70 <TIM_OC1_SetConfig+0x11c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d10c      	bne.n	8005cee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f023 0308 	bic.w	r3, r3, #8
 8005cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f023 0304 	bic.w	r3, r3, #4
 8005cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1b      	ldr	r2, [pc, #108]	; (8005d60 <TIM_OC1_SetConfig+0x10c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00f      	beq.n	8005d16 <TIM_OC1_SetConfig+0xc2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1a      	ldr	r2, [pc, #104]	; (8005d64 <TIM_OC1_SetConfig+0x110>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00b      	beq.n	8005d16 <TIM_OC1_SetConfig+0xc2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a19      	ldr	r2, [pc, #100]	; (8005d68 <TIM_OC1_SetConfig+0x114>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d007      	beq.n	8005d16 <TIM_OC1_SetConfig+0xc2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a18      	ldr	r2, [pc, #96]	; (8005d6c <TIM_OC1_SetConfig+0x118>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_OC1_SetConfig+0xc2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <TIM_OC1_SetConfig+0x11c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d111      	bne.n	8005d3a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40013400 	.word	0x40013400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800

08005d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f023 0210 	bic.w	r2, r3, #16
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f023 0320 	bic.w	r3, r3, #32
 8005dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a28      	ldr	r2, [pc, #160]	; (8005e74 <TIM_OC2_SetConfig+0x100>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_OC2_SetConfig+0x6c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a27      	ldr	r2, [pc, #156]	; (8005e78 <TIM_OC2_SetConfig+0x104>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10d      	bne.n	8005dfc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a1d      	ldr	r2, [pc, #116]	; (8005e74 <TIM_OC2_SetConfig+0x100>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00f      	beq.n	8005e24 <TIM_OC2_SetConfig+0xb0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <TIM_OC2_SetConfig+0x104>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00b      	beq.n	8005e24 <TIM_OC2_SetConfig+0xb0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <TIM_OC2_SetConfig+0x108>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d007      	beq.n	8005e24 <TIM_OC2_SetConfig+0xb0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a1a      	ldr	r2, [pc, #104]	; (8005e80 <TIM_OC2_SetConfig+0x10c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_OC2_SetConfig+0xb0>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a19      	ldr	r2, [pc, #100]	; (8005e84 <TIM_OC2_SetConfig+0x110>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d113      	bne.n	8005e4c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40013400 	.word	0x40013400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a27      	ldr	r2, [pc, #156]	; (8005f84 <TIM_OC3_SetConfig+0xfc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_OC3_SetConfig+0x6a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a26      	ldr	r2, [pc, #152]	; (8005f88 <TIM_OC3_SetConfig+0x100>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10d      	bne.n	8005f0e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a1c      	ldr	r2, [pc, #112]	; (8005f84 <TIM_OC3_SetConfig+0xfc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00f      	beq.n	8005f36 <TIM_OC3_SetConfig+0xae>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1b      	ldr	r2, [pc, #108]	; (8005f88 <TIM_OC3_SetConfig+0x100>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00b      	beq.n	8005f36 <TIM_OC3_SetConfig+0xae>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1a      	ldr	r2, [pc, #104]	; (8005f8c <TIM_OC3_SetConfig+0x104>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <TIM_OC3_SetConfig+0xae>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a19      	ldr	r2, [pc, #100]	; (8005f90 <TIM_OC3_SetConfig+0x108>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d003      	beq.n	8005f36 <TIM_OC3_SetConfig+0xae>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <TIM_OC3_SetConfig+0x10c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d113      	bne.n	8005f5e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	621a      	str	r2, [r3, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40013400 	.word	0x40013400
 8005f8c:	40014000 	.word	0x40014000
 8005f90:	40014400 	.word	0x40014400
 8005f94:	40014800 	.word	0x40014800

08005f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	021b      	lsls	r3, r3, #8
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	031b      	lsls	r3, r3, #12
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a18      	ldr	r2, [pc, #96]	; (8006058 <TIM_OC4_SetConfig+0xc0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00f      	beq.n	800601c <TIM_OC4_SetConfig+0x84>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a17      	ldr	r2, [pc, #92]	; (800605c <TIM_OC4_SetConfig+0xc4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00b      	beq.n	800601c <TIM_OC4_SetConfig+0x84>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a16      	ldr	r2, [pc, #88]	; (8006060 <TIM_OC4_SetConfig+0xc8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d007      	beq.n	800601c <TIM_OC4_SetConfig+0x84>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a15      	ldr	r2, [pc, #84]	; (8006064 <TIM_OC4_SetConfig+0xcc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_OC4_SetConfig+0x84>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a14      	ldr	r2, [pc, #80]	; (8006068 <TIM_OC4_SetConfig+0xd0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d109      	bne.n	8006030 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	019b      	lsls	r3, r3, #6
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	621a      	str	r2, [r3, #32]
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40012c00 	.word	0x40012c00
 800605c:	40013400 	.word	0x40013400
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400
 8006068:	40014800 	.word	0x40014800

0800606c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800609a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80060b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	041b      	lsls	r3, r3, #16
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a17      	ldr	r2, [pc, #92]	; (8006120 <TIM_OC5_SetConfig+0xb4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00f      	beq.n	80060e6 <TIM_OC5_SetConfig+0x7a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a16      	ldr	r2, [pc, #88]	; (8006124 <TIM_OC5_SetConfig+0xb8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00b      	beq.n	80060e6 <TIM_OC5_SetConfig+0x7a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a15      	ldr	r2, [pc, #84]	; (8006128 <TIM_OC5_SetConfig+0xbc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d007      	beq.n	80060e6 <TIM_OC5_SetConfig+0x7a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a14      	ldr	r2, [pc, #80]	; (800612c <TIM_OC5_SetConfig+0xc0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <TIM_OC5_SetConfig+0x7a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a13      	ldr	r2, [pc, #76]	; (8006130 <TIM_OC5_SetConfig+0xc4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d109      	bne.n	80060fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40012c00 	.word	0x40012c00
 8006124:	40013400 	.word	0x40013400
 8006128:	40014000 	.word	0x40014000
 800612c:	40014400 	.word	0x40014400
 8006130:	40014800 	.word	0x40014800

08006134 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800617a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	051b      	lsls	r3, r3, #20
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a18      	ldr	r2, [pc, #96]	; (80061ec <TIM_OC6_SetConfig+0xb8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00f      	beq.n	80061b0 <TIM_OC6_SetConfig+0x7c>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <TIM_OC6_SetConfig+0xbc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00b      	beq.n	80061b0 <TIM_OC6_SetConfig+0x7c>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <TIM_OC6_SetConfig+0xc0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_OC6_SetConfig+0x7c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <TIM_OC6_SetConfig+0xc4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_OC6_SetConfig+0x7c>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a14      	ldr	r2, [pc, #80]	; (80061fc <TIM_OC6_SetConfig+0xc8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d109      	bne.n	80061c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	029b      	lsls	r3, r3, #10
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40013400 	.word	0x40013400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800

08006200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f023 0201 	bic.w	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800622a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	4313      	orrs	r3, r2
 8006234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f023 030a 	bic.w	r3, r3, #10
 800623c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	621a      	str	r2, [r3, #32]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800625e:	b480      	push	{r7}
 8006260:	b087      	sub	sp, #28
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f023 0210 	bic.w	r2, r3, #16
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	031b      	lsls	r3, r3, #12
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800629a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	f043 0307 	orr.w	r3, r3, #7
 80062e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	609a      	str	r2, [r3, #8]
}
 80062e8:	bf00      	nop
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800630e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	021a      	lsls	r2, r3, #8
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	431a      	orrs	r2, r3
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4313      	orrs	r3, r2
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	609a      	str	r2, [r3, #8]
}
 8006328:	bf00      	nop
 800632a:	371c      	adds	r7, #28
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	f003 031f 	and.w	r3, r3, #31
 8006346:	2201      	movs	r2, #1
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a1a      	ldr	r2, [r3, #32]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	43db      	mvns	r3, r3
 8006356:	401a      	ands	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a1a      	ldr	r2, [r3, #32]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	fa01 f303 	lsl.w	r3, r1, r3
 800636c:	431a      	orrs	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
	...

08006380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006394:	2302      	movs	r3, #2
 8006396:	e068      	b.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a2e      	ldr	r2, [pc, #184]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2d      	ldr	r2, [pc, #180]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d108      	bne.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1e      	ldr	r2, [pc, #120]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01d      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d018      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1a      	ldr	r2, [pc, #104]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00e      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a18      	ldr	r2, [pc, #96]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d009      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a13      	ldr	r2, [pc, #76]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d004      	beq.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a14      	ldr	r2, [pc, #80]	; (800648c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d10c      	bne.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	4313      	orrs	r3, r2
 800644e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40013400 	.word	0x40013400
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800
 8006488:	40000c00 	.word	0x40000c00
 800648c:	40014000 	.word	0x40014000

08006490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e040      	b.n	8006560 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fb f8b8 	bl	8001664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2224      	movs	r2, #36	; 0x24
 80064f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0201 	bic.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f8ca 	bl	80066a4 <UART_SetConfig>
 8006510:	4603      	mov	r3, r0
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e022      	b.n	8006560 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fb48 	bl	8006bb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fbcf 	bl	8006cfc <UART_CheckIdleState>
 800655e:	4603      	mov	r3, r0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	; 0x28
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	4613      	mov	r3, r2
 8006576:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800657c:	2b20      	cmp	r3, #32
 800657e:	f040 8082 	bne.w	8006686 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <HAL_UART_Transmit+0x26>
 8006588:	88fb      	ldrh	r3, [r7, #6]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e07a      	b.n	8006688 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_UART_Transmit+0x38>
 800659c:	2302      	movs	r3, #2
 800659e:	e073      	b.n	8006688 <HAL_UART_Transmit+0x120>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2221      	movs	r2, #33	; 0x21
 80065b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065b6:	f7fb faf9 	bl	8001bac <HAL_GetTick>
 80065ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	88fa      	ldrh	r2, [r7, #6]
 80065c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	88fa      	ldrh	r2, [r7, #6]
 80065c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d4:	d108      	bne.n	80065e8 <HAL_UART_Transmit+0x80>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d104      	bne.n	80065e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	e003      	b.n	80065f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80065f8:	e02d      	b.n	8006656 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2200      	movs	r2, #0
 8006602:	2180      	movs	r1, #128	; 0x80
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fbc2 	bl	8006d8e <UART_WaitOnFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e039      	b.n	8006688 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	881a      	ldrh	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006626:	b292      	uxth	r2, r2
 8006628:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	3302      	adds	r3, #2
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	e008      	b.n	8006644 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	781a      	ldrb	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	b292      	uxth	r2, r2
 800663c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	3301      	adds	r3, #1
 8006642:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1cb      	bne.n	80065fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2200      	movs	r2, #0
 800666a:	2140      	movs	r1, #64	; 0x40
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 fb8e 	bl	8006d8e <UART_WaitOnFlagUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e005      	b.n	8006688 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	e000      	b.n	8006688 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006686:	2302      	movs	r3, #2
  }
}
 8006688:	4618      	mov	r0, r3
 800668a:	3720      	adds	r7, #32
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a4:	b5b0      	push	{r4, r5, r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4bad      	ldr	r3, [pc, #692]	; (8006984 <UART_SetConfig+0x2e0>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	69f9      	ldr	r1, [r7, #28]
 80066d8:	430b      	orrs	r3, r1
 80066da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4aa2      	ldr	r2, [pc, #648]	; (8006988 <UART_SetConfig+0x2e4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	4313      	orrs	r3, r2
 800670a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	430a      	orrs	r2, r1
 800671e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a99      	ldr	r2, [pc, #612]	; (800698c <UART_SetConfig+0x2e8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d121      	bne.n	800676e <UART_SetConfig+0xca>
 800672a:	4b99      	ldr	r3, [pc, #612]	; (8006990 <UART_SetConfig+0x2ec>)
 800672c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006730:	f003 0303 	and.w	r3, r3, #3
 8006734:	2b03      	cmp	r3, #3
 8006736:	d817      	bhi.n	8006768 <UART_SetConfig+0xc4>
 8006738:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <UART_SetConfig+0x9c>)
 800673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673e:	bf00      	nop
 8006740:	08006751 	.word	0x08006751
 8006744:	0800675d 	.word	0x0800675d
 8006748:	08006757 	.word	0x08006757
 800674c:	08006763 	.word	0x08006763
 8006750:	2301      	movs	r3, #1
 8006752:	76fb      	strb	r3, [r7, #27]
 8006754:	e0e7      	b.n	8006926 <UART_SetConfig+0x282>
 8006756:	2302      	movs	r3, #2
 8006758:	76fb      	strb	r3, [r7, #27]
 800675a:	e0e4      	b.n	8006926 <UART_SetConfig+0x282>
 800675c:	2304      	movs	r3, #4
 800675e:	76fb      	strb	r3, [r7, #27]
 8006760:	e0e1      	b.n	8006926 <UART_SetConfig+0x282>
 8006762:	2308      	movs	r3, #8
 8006764:	76fb      	strb	r3, [r7, #27]
 8006766:	e0de      	b.n	8006926 <UART_SetConfig+0x282>
 8006768:	2310      	movs	r3, #16
 800676a:	76fb      	strb	r3, [r7, #27]
 800676c:	e0db      	b.n	8006926 <UART_SetConfig+0x282>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a88      	ldr	r2, [pc, #544]	; (8006994 <UART_SetConfig+0x2f0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d132      	bne.n	80067de <UART_SetConfig+0x13a>
 8006778:	4b85      	ldr	r3, [pc, #532]	; (8006990 <UART_SetConfig+0x2ec>)
 800677a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677e:	f003 030c 	and.w	r3, r3, #12
 8006782:	2b0c      	cmp	r3, #12
 8006784:	d828      	bhi.n	80067d8 <UART_SetConfig+0x134>
 8006786:	a201      	add	r2, pc, #4	; (adr r2, 800678c <UART_SetConfig+0xe8>)
 8006788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678c:	080067c1 	.word	0x080067c1
 8006790:	080067d9 	.word	0x080067d9
 8006794:	080067d9 	.word	0x080067d9
 8006798:	080067d9 	.word	0x080067d9
 800679c:	080067cd 	.word	0x080067cd
 80067a0:	080067d9 	.word	0x080067d9
 80067a4:	080067d9 	.word	0x080067d9
 80067a8:	080067d9 	.word	0x080067d9
 80067ac:	080067c7 	.word	0x080067c7
 80067b0:	080067d9 	.word	0x080067d9
 80067b4:	080067d9 	.word	0x080067d9
 80067b8:	080067d9 	.word	0x080067d9
 80067bc:	080067d3 	.word	0x080067d3
 80067c0:	2300      	movs	r3, #0
 80067c2:	76fb      	strb	r3, [r7, #27]
 80067c4:	e0af      	b.n	8006926 <UART_SetConfig+0x282>
 80067c6:	2302      	movs	r3, #2
 80067c8:	76fb      	strb	r3, [r7, #27]
 80067ca:	e0ac      	b.n	8006926 <UART_SetConfig+0x282>
 80067cc:	2304      	movs	r3, #4
 80067ce:	76fb      	strb	r3, [r7, #27]
 80067d0:	e0a9      	b.n	8006926 <UART_SetConfig+0x282>
 80067d2:	2308      	movs	r3, #8
 80067d4:	76fb      	strb	r3, [r7, #27]
 80067d6:	e0a6      	b.n	8006926 <UART_SetConfig+0x282>
 80067d8:	2310      	movs	r3, #16
 80067da:	76fb      	strb	r3, [r7, #27]
 80067dc:	e0a3      	b.n	8006926 <UART_SetConfig+0x282>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a6d      	ldr	r2, [pc, #436]	; (8006998 <UART_SetConfig+0x2f4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d120      	bne.n	800682a <UART_SetConfig+0x186>
 80067e8:	4b69      	ldr	r3, [pc, #420]	; (8006990 <UART_SetConfig+0x2ec>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067f2:	2b30      	cmp	r3, #48	; 0x30
 80067f4:	d013      	beq.n	800681e <UART_SetConfig+0x17a>
 80067f6:	2b30      	cmp	r3, #48	; 0x30
 80067f8:	d814      	bhi.n	8006824 <UART_SetConfig+0x180>
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	d009      	beq.n	8006812 <UART_SetConfig+0x16e>
 80067fe:	2b20      	cmp	r3, #32
 8006800:	d810      	bhi.n	8006824 <UART_SetConfig+0x180>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <UART_SetConfig+0x168>
 8006806:	2b10      	cmp	r3, #16
 8006808:	d006      	beq.n	8006818 <UART_SetConfig+0x174>
 800680a:	e00b      	b.n	8006824 <UART_SetConfig+0x180>
 800680c:	2300      	movs	r3, #0
 800680e:	76fb      	strb	r3, [r7, #27]
 8006810:	e089      	b.n	8006926 <UART_SetConfig+0x282>
 8006812:	2302      	movs	r3, #2
 8006814:	76fb      	strb	r3, [r7, #27]
 8006816:	e086      	b.n	8006926 <UART_SetConfig+0x282>
 8006818:	2304      	movs	r3, #4
 800681a:	76fb      	strb	r3, [r7, #27]
 800681c:	e083      	b.n	8006926 <UART_SetConfig+0x282>
 800681e:	2308      	movs	r3, #8
 8006820:	76fb      	strb	r3, [r7, #27]
 8006822:	e080      	b.n	8006926 <UART_SetConfig+0x282>
 8006824:	2310      	movs	r3, #16
 8006826:	76fb      	strb	r3, [r7, #27]
 8006828:	e07d      	b.n	8006926 <UART_SetConfig+0x282>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a5b      	ldr	r2, [pc, #364]	; (800699c <UART_SetConfig+0x2f8>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d120      	bne.n	8006876 <UART_SetConfig+0x1d2>
 8006834:	4b56      	ldr	r3, [pc, #344]	; (8006990 <UART_SetConfig+0x2ec>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800683e:	2bc0      	cmp	r3, #192	; 0xc0
 8006840:	d013      	beq.n	800686a <UART_SetConfig+0x1c6>
 8006842:	2bc0      	cmp	r3, #192	; 0xc0
 8006844:	d814      	bhi.n	8006870 <UART_SetConfig+0x1cc>
 8006846:	2b80      	cmp	r3, #128	; 0x80
 8006848:	d009      	beq.n	800685e <UART_SetConfig+0x1ba>
 800684a:	2b80      	cmp	r3, #128	; 0x80
 800684c:	d810      	bhi.n	8006870 <UART_SetConfig+0x1cc>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <UART_SetConfig+0x1b4>
 8006852:	2b40      	cmp	r3, #64	; 0x40
 8006854:	d006      	beq.n	8006864 <UART_SetConfig+0x1c0>
 8006856:	e00b      	b.n	8006870 <UART_SetConfig+0x1cc>
 8006858:	2300      	movs	r3, #0
 800685a:	76fb      	strb	r3, [r7, #27]
 800685c:	e063      	b.n	8006926 <UART_SetConfig+0x282>
 800685e:	2302      	movs	r3, #2
 8006860:	76fb      	strb	r3, [r7, #27]
 8006862:	e060      	b.n	8006926 <UART_SetConfig+0x282>
 8006864:	2304      	movs	r3, #4
 8006866:	76fb      	strb	r3, [r7, #27]
 8006868:	e05d      	b.n	8006926 <UART_SetConfig+0x282>
 800686a:	2308      	movs	r3, #8
 800686c:	76fb      	strb	r3, [r7, #27]
 800686e:	e05a      	b.n	8006926 <UART_SetConfig+0x282>
 8006870:	2310      	movs	r3, #16
 8006872:	76fb      	strb	r3, [r7, #27]
 8006874:	e057      	b.n	8006926 <UART_SetConfig+0x282>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a49      	ldr	r2, [pc, #292]	; (80069a0 <UART_SetConfig+0x2fc>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d125      	bne.n	80068cc <UART_SetConfig+0x228>
 8006880:	4b43      	ldr	r3, [pc, #268]	; (8006990 <UART_SetConfig+0x2ec>)
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800688a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800688e:	d017      	beq.n	80068c0 <UART_SetConfig+0x21c>
 8006890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006894:	d817      	bhi.n	80068c6 <UART_SetConfig+0x222>
 8006896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689a:	d00b      	beq.n	80068b4 <UART_SetConfig+0x210>
 800689c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a0:	d811      	bhi.n	80068c6 <UART_SetConfig+0x222>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <UART_SetConfig+0x20a>
 80068a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068aa:	d006      	beq.n	80068ba <UART_SetConfig+0x216>
 80068ac:	e00b      	b.n	80068c6 <UART_SetConfig+0x222>
 80068ae:	2300      	movs	r3, #0
 80068b0:	76fb      	strb	r3, [r7, #27]
 80068b2:	e038      	b.n	8006926 <UART_SetConfig+0x282>
 80068b4:	2302      	movs	r3, #2
 80068b6:	76fb      	strb	r3, [r7, #27]
 80068b8:	e035      	b.n	8006926 <UART_SetConfig+0x282>
 80068ba:	2304      	movs	r3, #4
 80068bc:	76fb      	strb	r3, [r7, #27]
 80068be:	e032      	b.n	8006926 <UART_SetConfig+0x282>
 80068c0:	2308      	movs	r3, #8
 80068c2:	76fb      	strb	r3, [r7, #27]
 80068c4:	e02f      	b.n	8006926 <UART_SetConfig+0x282>
 80068c6:	2310      	movs	r3, #16
 80068c8:	76fb      	strb	r3, [r7, #27]
 80068ca:	e02c      	b.n	8006926 <UART_SetConfig+0x282>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a2d      	ldr	r2, [pc, #180]	; (8006988 <UART_SetConfig+0x2e4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d125      	bne.n	8006922 <UART_SetConfig+0x27e>
 80068d6:	4b2e      	ldr	r3, [pc, #184]	; (8006990 <UART_SetConfig+0x2ec>)
 80068d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068e4:	d017      	beq.n	8006916 <UART_SetConfig+0x272>
 80068e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ea:	d817      	bhi.n	800691c <UART_SetConfig+0x278>
 80068ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f0:	d00b      	beq.n	800690a <UART_SetConfig+0x266>
 80068f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f6:	d811      	bhi.n	800691c <UART_SetConfig+0x278>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <UART_SetConfig+0x260>
 80068fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006900:	d006      	beq.n	8006910 <UART_SetConfig+0x26c>
 8006902:	e00b      	b.n	800691c <UART_SetConfig+0x278>
 8006904:	2300      	movs	r3, #0
 8006906:	76fb      	strb	r3, [r7, #27]
 8006908:	e00d      	b.n	8006926 <UART_SetConfig+0x282>
 800690a:	2302      	movs	r3, #2
 800690c:	76fb      	strb	r3, [r7, #27]
 800690e:	e00a      	b.n	8006926 <UART_SetConfig+0x282>
 8006910:	2304      	movs	r3, #4
 8006912:	76fb      	strb	r3, [r7, #27]
 8006914:	e007      	b.n	8006926 <UART_SetConfig+0x282>
 8006916:	2308      	movs	r3, #8
 8006918:	76fb      	strb	r3, [r7, #27]
 800691a:	e004      	b.n	8006926 <UART_SetConfig+0x282>
 800691c:	2310      	movs	r3, #16
 800691e:	76fb      	strb	r3, [r7, #27]
 8006920:	e001      	b.n	8006926 <UART_SetConfig+0x282>
 8006922:	2310      	movs	r3, #16
 8006924:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a17      	ldr	r2, [pc, #92]	; (8006988 <UART_SetConfig+0x2e4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	f040 8087 	bne.w	8006a40 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006932:	7efb      	ldrb	r3, [r7, #27]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d837      	bhi.n	80069a8 <UART_SetConfig+0x304>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <UART_SetConfig+0x29c>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006965 	.word	0x08006965
 8006944:	080069a9 	.word	0x080069a9
 8006948:	0800696d 	.word	0x0800696d
 800694c:	080069a9 	.word	0x080069a9
 8006950:	08006973 	.word	0x08006973
 8006954:	080069a9 	.word	0x080069a9
 8006958:	080069a9 	.word	0x080069a9
 800695c:	080069a9 	.word	0x080069a9
 8006960:	0800697b 	.word	0x0800697b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006964:	f7fd feae 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8006968:	6178      	str	r0, [r7, #20]
        break;
 800696a:	e022      	b.n	80069b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800696c:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <UART_SetConfig+0x300>)
 800696e:	617b      	str	r3, [r7, #20]
        break;
 8006970:	e01f      	b.n	80069b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006972:	f7fd fe0f 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8006976:	6178      	str	r0, [r7, #20]
        break;
 8006978:	e01b      	b.n	80069b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800697a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697e:	617b      	str	r3, [r7, #20]
        break;
 8006980:	e017      	b.n	80069b2 <UART_SetConfig+0x30e>
 8006982:	bf00      	nop
 8006984:	efff69f3 	.word	0xefff69f3
 8006988:	40008000 	.word	0x40008000
 800698c:	40013800 	.word	0x40013800
 8006990:	40021000 	.word	0x40021000
 8006994:	40004400 	.word	0x40004400
 8006998:	40004800 	.word	0x40004800
 800699c:	40004c00 	.word	0x40004c00
 80069a0:	40005000 	.word	0x40005000
 80069a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	76bb      	strb	r3, [r7, #26]
        break;
 80069b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 80f1 	beq.w	8006b9c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d305      	bcc.n	80069d6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d902      	bls.n	80069dc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	76bb      	strb	r3, [r7, #26]
 80069da:	e0df      	b.n	8006b9c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	4618      	mov	r0, r3
 80069e0:	f04f 0100 	mov.w	r1, #0
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	020b      	lsls	r3, r1, #8
 80069ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069f2:	0202      	lsls	r2, r0, #8
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	6849      	ldr	r1, [r1, #4]
 80069f8:	0849      	lsrs	r1, r1, #1
 80069fa:	4608      	mov	r0, r1
 80069fc:	f04f 0100 	mov.w	r1, #0
 8006a00:	1814      	adds	r4, r2, r0
 8006a02:	eb43 0501 	adc.w	r5, r3, r1
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	4620      	mov	r0, r4
 8006a12:	4629      	mov	r1, r5
 8006a14:	f7f9 fc44 	bl	80002a0 <__aeabi_uldivmod>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a26:	d308      	bcc.n	8006a3a <UART_SetConfig+0x396>
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a2e:	d204      	bcs.n	8006a3a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	60da      	str	r2, [r3, #12]
 8006a38:	e0b0      	b.n	8006b9c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	76bb      	strb	r3, [r7, #26]
 8006a3e:	e0ad      	b.n	8006b9c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a48:	d15c      	bne.n	8006b04 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006a4a:	7efb      	ldrb	r3, [r7, #27]
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d828      	bhi.n	8006aa2 <UART_SetConfig+0x3fe>
 8006a50:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <UART_SetConfig+0x3b4>)
 8006a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a56:	bf00      	nop
 8006a58:	08006a7d 	.word	0x08006a7d
 8006a5c:	08006a85 	.word	0x08006a85
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	08006aa3 	.word	0x08006aa3
 8006a68:	08006a93 	.word	0x08006a93
 8006a6c:	08006aa3 	.word	0x08006aa3
 8006a70:	08006aa3 	.word	0x08006aa3
 8006a74:	08006aa3 	.word	0x08006aa3
 8006a78:	08006a9b 	.word	0x08006a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a7c:	f7fd fe22 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8006a80:	6178      	str	r0, [r7, #20]
        break;
 8006a82:	e013      	b.n	8006aac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a84:	f7fd fe34 	bl	80046f0 <HAL_RCC_GetPCLK2Freq>
 8006a88:	6178      	str	r0, [r7, #20]
        break;
 8006a8a:	e00f      	b.n	8006aac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a8c:	4b49      	ldr	r3, [pc, #292]	; (8006bb4 <UART_SetConfig+0x510>)
 8006a8e:	617b      	str	r3, [r7, #20]
        break;
 8006a90:	e00c      	b.n	8006aac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a92:	f7fd fd7f 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8006a96:	6178      	str	r0, [r7, #20]
        break;
 8006a98:	e008      	b.n	8006aac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9e:	617b      	str	r3, [r7, #20]
        break;
 8006aa0:	e004      	b.n	8006aac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	76bb      	strb	r3, [r7, #26]
        break;
 8006aaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d074      	beq.n	8006b9c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	005a      	lsls	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	441a      	add	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b0f      	cmp	r3, #15
 8006ace:	d916      	bls.n	8006afe <UART_SetConfig+0x45a>
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad6:	d212      	bcs.n	8006afe <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f023 030f 	bic.w	r3, r3, #15
 8006ae0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	085b      	lsrs	r3, r3, #1
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	89fb      	ldrh	r3, [r7, #14]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	89fa      	ldrh	r2, [r7, #14]
 8006afa:	60da      	str	r2, [r3, #12]
 8006afc:	e04e      	b.n	8006b9c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	76bb      	strb	r3, [r7, #26]
 8006b02:	e04b      	b.n	8006b9c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b04:	7efb      	ldrb	r3, [r7, #27]
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d827      	bhi.n	8006b5a <UART_SetConfig+0x4b6>
 8006b0a:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <UART_SetConfig+0x46c>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006b35 	.word	0x08006b35
 8006b14:	08006b3d 	.word	0x08006b3d
 8006b18:	08006b45 	.word	0x08006b45
 8006b1c:	08006b5b 	.word	0x08006b5b
 8006b20:	08006b4b 	.word	0x08006b4b
 8006b24:	08006b5b 	.word	0x08006b5b
 8006b28:	08006b5b 	.word	0x08006b5b
 8006b2c:	08006b5b 	.word	0x08006b5b
 8006b30:	08006b53 	.word	0x08006b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b34:	f7fd fdc6 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8006b38:	6178      	str	r0, [r7, #20]
        break;
 8006b3a:	e013      	b.n	8006b64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b3c:	f7fd fdd8 	bl	80046f0 <HAL_RCC_GetPCLK2Freq>
 8006b40:	6178      	str	r0, [r7, #20]
        break;
 8006b42:	e00f      	b.n	8006b64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b44:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <UART_SetConfig+0x510>)
 8006b46:	617b      	str	r3, [r7, #20]
        break;
 8006b48:	e00c      	b.n	8006b64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b4a:	f7fd fd23 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8006b4e:	6178      	str	r0, [r7, #20]
        break;
 8006b50:	e008      	b.n	8006b64 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b56:	617b      	str	r3, [r7, #20]
        break;
 8006b58:	e004      	b.n	8006b64 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	76bb      	strb	r3, [r7, #26]
        break;
 8006b62:	bf00      	nop
    }

    if (pclk != 0U)
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d018      	beq.n	8006b9c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	085a      	lsrs	r2, r3, #1
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	441a      	add	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2b0f      	cmp	r3, #15
 8006b84:	d908      	bls.n	8006b98 <UART_SetConfig+0x4f4>
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8c:	d204      	bcs.n	8006b98 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	60da      	str	r2, [r3, #12]
 8006b96:	e001      	b.n	8006b9c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ba8:	7ebb      	ldrb	r3, [r7, #26]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3720      	adds	r7, #32
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	00f42400 	.word	0x00f42400

08006bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01a      	beq.n	8006cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb6:	d10a      	bne.n	8006cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	605a      	str	r2, [r3, #4]
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d0c:	f7fa ff4e 	bl	8001bac <HAL_GetTick>
 8006d10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d10e      	bne.n	8006d3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f82d 	bl	8006d8e <UART_WaitOnFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e023      	b.n	8006d86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d10e      	bne.n	8006d6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f817 	bl	8006d8e <UART_WaitOnFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e00d      	b.n	8006d86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2220      	movs	r2, #32
 8006d74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b084      	sub	sp, #16
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	603b      	str	r3, [r7, #0]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d9e:	e05e      	b.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	d05a      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da8:	f7fa ff00 	bl	8001bac <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d302      	bcc.n	8006dbe <UART_WaitOnFlagUntilTimeout+0x30>
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d11b      	bne.n	8006df6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dcc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0201 	bic.w	r2, r2, #1
 8006ddc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2220      	movs	r2, #32
 8006de2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e043      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d02c      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e12:	d124      	bne.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e1c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e2c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0201 	bic.w	r2, r2, #1
 8006e3c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2220      	movs	r2, #32
 8006e42:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e00f      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4013      	ands	r3, r2
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	bf0c      	ite	eq
 8006e6e:	2301      	moveq	r3, #1
 8006e70:	2300      	movne	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d091      	beq.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <__assert_func>:
 8006e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e8a:	4614      	mov	r4, r2
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <__assert_func+0x2c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4605      	mov	r5, r0
 8006e94:	68d8      	ldr	r0, [r3, #12]
 8006e96:	b14c      	cbz	r4, 8006eac <__assert_func+0x24>
 8006e98:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <__assert_func+0x30>)
 8006e9a:	9100      	str	r1, [sp, #0]
 8006e9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ea0:	4906      	ldr	r1, [pc, #24]	; (8006ebc <__assert_func+0x34>)
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	f000 f814 	bl	8006ed0 <fiprintf>
 8006ea8:	f000 fdd8 	bl	8007a5c <abort>
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <__assert_func+0x38>)
 8006eae:	461c      	mov	r4, r3
 8006eb0:	e7f3      	b.n	8006e9a <__assert_func+0x12>
 8006eb2:	bf00      	nop
 8006eb4:	2000000c 	.word	0x2000000c
 8006eb8:	08008324 	.word	0x08008324
 8006ebc:	08008331 	.word	0x08008331
 8006ec0:	0800835f 	.word	0x0800835f

08006ec4 <__errno>:
 8006ec4:	4b01      	ldr	r3, [pc, #4]	; (8006ecc <__errno+0x8>)
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	2000000c 	.word	0x2000000c

08006ed0 <fiprintf>:
 8006ed0:	b40e      	push	{r1, r2, r3}
 8006ed2:	b503      	push	{r0, r1, lr}
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	ab03      	add	r3, sp, #12
 8006ed8:	4805      	ldr	r0, [pc, #20]	; (8006ef0 <fiprintf+0x20>)
 8006eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ede:	6800      	ldr	r0, [r0, #0]
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	f000 f917 	bl	8007114 <_vfiprintf_r>
 8006ee6:	b002      	add	sp, #8
 8006ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eec:	b003      	add	sp, #12
 8006eee:	4770      	bx	lr
 8006ef0:	2000000c 	.word	0x2000000c

08006ef4 <__libc_init_array>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	4d0d      	ldr	r5, [pc, #52]	; (8006f2c <__libc_init_array+0x38>)
 8006ef8:	4c0d      	ldr	r4, [pc, #52]	; (8006f30 <__libc_init_array+0x3c>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	2600      	movs	r6, #0
 8006f00:	42a6      	cmp	r6, r4
 8006f02:	d109      	bne.n	8006f18 <__libc_init_array+0x24>
 8006f04:	4d0b      	ldr	r5, [pc, #44]	; (8006f34 <__libc_init_array+0x40>)
 8006f06:	4c0c      	ldr	r4, [pc, #48]	; (8006f38 <__libc_init_array+0x44>)
 8006f08:	f001 f912 	bl	8008130 <_init>
 8006f0c:	1b64      	subs	r4, r4, r5
 8006f0e:	10a4      	asrs	r4, r4, #2
 8006f10:	2600      	movs	r6, #0
 8006f12:	42a6      	cmp	r6, r4
 8006f14:	d105      	bne.n	8006f22 <__libc_init_array+0x2e>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1c:	4798      	blx	r3
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7ee      	b.n	8006f00 <__libc_init_array+0xc>
 8006f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f26:	4798      	blx	r3
 8006f28:	3601      	adds	r6, #1
 8006f2a:	e7f2      	b.n	8006f12 <__libc_init_array+0x1e>
 8006f2c:	08008478 	.word	0x08008478
 8006f30:	08008478 	.word	0x08008478
 8006f34:	08008478 	.word	0x08008478
 8006f38:	0800847c 	.word	0x0800847c

08006f3c <malloc>:
 8006f3c:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <malloc+0xc>)
 8006f3e:	4601      	mov	r1, r0
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	f000 b863 	b.w	800700c <_malloc_r>
 8006f46:	bf00      	nop
 8006f48:	2000000c 	.word	0x2000000c

08006f4c <free>:
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <free+0xc>)
 8006f4e:	4601      	mov	r1, r0
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	f000 b80b 	b.w	8006f6c <_free_r>
 8006f56:	bf00      	nop
 8006f58:	2000000c 	.word	0x2000000c

08006f5c <memset>:
 8006f5c:	4402      	add	r2, r0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d100      	bne.n	8006f66 <memset+0xa>
 8006f64:	4770      	bx	lr
 8006f66:	f803 1b01 	strb.w	r1, [r3], #1
 8006f6a:	e7f9      	b.n	8006f60 <memset+0x4>

08006f6c <_free_r>:
 8006f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f6e:	2900      	cmp	r1, #0
 8006f70:	d048      	beq.n	8007004 <_free_r+0x98>
 8006f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f76:	9001      	str	r0, [sp, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f7e:	bfb8      	it	lt
 8006f80:	18e4      	addlt	r4, r4, r3
 8006f82:	f000 ff91 	bl	8007ea8 <__malloc_lock>
 8006f86:	4a20      	ldr	r2, [pc, #128]	; (8007008 <_free_r+0x9c>)
 8006f88:	9801      	ldr	r0, [sp, #4]
 8006f8a:	6813      	ldr	r3, [r2, #0]
 8006f8c:	4615      	mov	r5, r2
 8006f8e:	b933      	cbnz	r3, 8006f9e <_free_r+0x32>
 8006f90:	6063      	str	r3, [r4, #4]
 8006f92:	6014      	str	r4, [r2, #0]
 8006f94:	b003      	add	sp, #12
 8006f96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f9a:	f000 bf8b 	b.w	8007eb4 <__malloc_unlock>
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	d90b      	bls.n	8006fba <_free_r+0x4e>
 8006fa2:	6821      	ldr	r1, [r4, #0]
 8006fa4:	1862      	adds	r2, r4, r1
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	bf04      	itt	eq
 8006faa:	681a      	ldreq	r2, [r3, #0]
 8006fac:	685b      	ldreq	r3, [r3, #4]
 8006fae:	6063      	str	r3, [r4, #4]
 8006fb0:	bf04      	itt	eq
 8006fb2:	1852      	addeq	r2, r2, r1
 8006fb4:	6022      	streq	r2, [r4, #0]
 8006fb6:	602c      	str	r4, [r5, #0]
 8006fb8:	e7ec      	b.n	8006f94 <_free_r+0x28>
 8006fba:	461a      	mov	r2, r3
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	b10b      	cbz	r3, 8006fc4 <_free_r+0x58>
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d9fa      	bls.n	8006fba <_free_r+0x4e>
 8006fc4:	6811      	ldr	r1, [r2, #0]
 8006fc6:	1855      	adds	r5, r2, r1
 8006fc8:	42a5      	cmp	r5, r4
 8006fca:	d10b      	bne.n	8006fe4 <_free_r+0x78>
 8006fcc:	6824      	ldr	r4, [r4, #0]
 8006fce:	4421      	add	r1, r4
 8006fd0:	1854      	adds	r4, r2, r1
 8006fd2:	42a3      	cmp	r3, r4
 8006fd4:	6011      	str	r1, [r2, #0]
 8006fd6:	d1dd      	bne.n	8006f94 <_free_r+0x28>
 8006fd8:	681c      	ldr	r4, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	6053      	str	r3, [r2, #4]
 8006fde:	4421      	add	r1, r4
 8006fe0:	6011      	str	r1, [r2, #0]
 8006fe2:	e7d7      	b.n	8006f94 <_free_r+0x28>
 8006fe4:	d902      	bls.n	8006fec <_free_r+0x80>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	6003      	str	r3, [r0, #0]
 8006fea:	e7d3      	b.n	8006f94 <_free_r+0x28>
 8006fec:	6825      	ldr	r5, [r4, #0]
 8006fee:	1961      	adds	r1, r4, r5
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	bf04      	itt	eq
 8006ff4:	6819      	ldreq	r1, [r3, #0]
 8006ff6:	685b      	ldreq	r3, [r3, #4]
 8006ff8:	6063      	str	r3, [r4, #4]
 8006ffa:	bf04      	itt	eq
 8006ffc:	1949      	addeq	r1, r1, r5
 8006ffe:	6021      	streq	r1, [r4, #0]
 8007000:	6054      	str	r4, [r2, #4]
 8007002:	e7c7      	b.n	8006f94 <_free_r+0x28>
 8007004:	b003      	add	sp, #12
 8007006:	bd30      	pop	{r4, r5, pc}
 8007008:	20000098 	.word	0x20000098

0800700c <_malloc_r>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	1ccd      	adds	r5, r1, #3
 8007010:	f025 0503 	bic.w	r5, r5, #3
 8007014:	3508      	adds	r5, #8
 8007016:	2d0c      	cmp	r5, #12
 8007018:	bf38      	it	cc
 800701a:	250c      	movcc	r5, #12
 800701c:	2d00      	cmp	r5, #0
 800701e:	4606      	mov	r6, r0
 8007020:	db01      	blt.n	8007026 <_malloc_r+0x1a>
 8007022:	42a9      	cmp	r1, r5
 8007024:	d903      	bls.n	800702e <_malloc_r+0x22>
 8007026:	230c      	movs	r3, #12
 8007028:	6033      	str	r3, [r6, #0]
 800702a:	2000      	movs	r0, #0
 800702c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800702e:	f000 ff3b 	bl	8007ea8 <__malloc_lock>
 8007032:	4921      	ldr	r1, [pc, #132]	; (80070b8 <_malloc_r+0xac>)
 8007034:	680a      	ldr	r2, [r1, #0]
 8007036:	4614      	mov	r4, r2
 8007038:	b99c      	cbnz	r4, 8007062 <_malloc_r+0x56>
 800703a:	4f20      	ldr	r7, [pc, #128]	; (80070bc <_malloc_r+0xb0>)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	b923      	cbnz	r3, 800704a <_malloc_r+0x3e>
 8007040:	4621      	mov	r1, r4
 8007042:	4630      	mov	r0, r6
 8007044:	f000 fbce 	bl	80077e4 <_sbrk_r>
 8007048:	6038      	str	r0, [r7, #0]
 800704a:	4629      	mov	r1, r5
 800704c:	4630      	mov	r0, r6
 800704e:	f000 fbc9 	bl	80077e4 <_sbrk_r>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	d123      	bne.n	800709e <_malloc_r+0x92>
 8007056:	230c      	movs	r3, #12
 8007058:	6033      	str	r3, [r6, #0]
 800705a:	4630      	mov	r0, r6
 800705c:	f000 ff2a 	bl	8007eb4 <__malloc_unlock>
 8007060:	e7e3      	b.n	800702a <_malloc_r+0x1e>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	1b5b      	subs	r3, r3, r5
 8007066:	d417      	bmi.n	8007098 <_malloc_r+0x8c>
 8007068:	2b0b      	cmp	r3, #11
 800706a:	d903      	bls.n	8007074 <_malloc_r+0x68>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	441c      	add	r4, r3
 8007070:	6025      	str	r5, [r4, #0]
 8007072:	e004      	b.n	800707e <_malloc_r+0x72>
 8007074:	6863      	ldr	r3, [r4, #4]
 8007076:	42a2      	cmp	r2, r4
 8007078:	bf0c      	ite	eq
 800707a:	600b      	streq	r3, [r1, #0]
 800707c:	6053      	strne	r3, [r2, #4]
 800707e:	4630      	mov	r0, r6
 8007080:	f000 ff18 	bl	8007eb4 <__malloc_unlock>
 8007084:	f104 000b 	add.w	r0, r4, #11
 8007088:	1d23      	adds	r3, r4, #4
 800708a:	f020 0007 	bic.w	r0, r0, #7
 800708e:	1ac2      	subs	r2, r0, r3
 8007090:	d0cc      	beq.n	800702c <_malloc_r+0x20>
 8007092:	1a1b      	subs	r3, r3, r0
 8007094:	50a3      	str	r3, [r4, r2]
 8007096:	e7c9      	b.n	800702c <_malloc_r+0x20>
 8007098:	4622      	mov	r2, r4
 800709a:	6864      	ldr	r4, [r4, #4]
 800709c:	e7cc      	b.n	8007038 <_malloc_r+0x2c>
 800709e:	1cc4      	adds	r4, r0, #3
 80070a0:	f024 0403 	bic.w	r4, r4, #3
 80070a4:	42a0      	cmp	r0, r4
 80070a6:	d0e3      	beq.n	8007070 <_malloc_r+0x64>
 80070a8:	1a21      	subs	r1, r4, r0
 80070aa:	4630      	mov	r0, r6
 80070ac:	f000 fb9a 	bl	80077e4 <_sbrk_r>
 80070b0:	3001      	adds	r0, #1
 80070b2:	d1dd      	bne.n	8007070 <_malloc_r+0x64>
 80070b4:	e7cf      	b.n	8007056 <_malloc_r+0x4a>
 80070b6:	bf00      	nop
 80070b8:	20000098 	.word	0x20000098
 80070bc:	2000009c 	.word	0x2000009c

080070c0 <__sfputc_r>:
 80070c0:	6893      	ldr	r3, [r2, #8]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	b410      	push	{r4}
 80070c8:	6093      	str	r3, [r2, #8]
 80070ca:	da08      	bge.n	80070de <__sfputc_r+0x1e>
 80070cc:	6994      	ldr	r4, [r2, #24]
 80070ce:	42a3      	cmp	r3, r4
 80070d0:	db01      	blt.n	80070d6 <__sfputc_r+0x16>
 80070d2:	290a      	cmp	r1, #10
 80070d4:	d103      	bne.n	80070de <__sfputc_r+0x1e>
 80070d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070da:	f000 bbff 	b.w	80078dc <__swbuf_r>
 80070de:	6813      	ldr	r3, [r2, #0]
 80070e0:	1c58      	adds	r0, r3, #1
 80070e2:	6010      	str	r0, [r2, #0]
 80070e4:	7019      	strb	r1, [r3, #0]
 80070e6:	4608      	mov	r0, r1
 80070e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <__sfputs_r>:
 80070ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f0:	4606      	mov	r6, r0
 80070f2:	460f      	mov	r7, r1
 80070f4:	4614      	mov	r4, r2
 80070f6:	18d5      	adds	r5, r2, r3
 80070f8:	42ac      	cmp	r4, r5
 80070fa:	d101      	bne.n	8007100 <__sfputs_r+0x12>
 80070fc:	2000      	movs	r0, #0
 80070fe:	e007      	b.n	8007110 <__sfputs_r+0x22>
 8007100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007104:	463a      	mov	r2, r7
 8007106:	4630      	mov	r0, r6
 8007108:	f7ff ffda 	bl	80070c0 <__sfputc_r>
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d1f3      	bne.n	80070f8 <__sfputs_r+0xa>
 8007110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007114 <_vfiprintf_r>:
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	460d      	mov	r5, r1
 800711a:	b09d      	sub	sp, #116	; 0x74
 800711c:	4614      	mov	r4, r2
 800711e:	4698      	mov	r8, r3
 8007120:	4606      	mov	r6, r0
 8007122:	b118      	cbz	r0, 800712c <_vfiprintf_r+0x18>
 8007124:	6983      	ldr	r3, [r0, #24]
 8007126:	b90b      	cbnz	r3, 800712c <_vfiprintf_r+0x18>
 8007128:	f000 fdba 	bl	8007ca0 <__sinit>
 800712c:	4b89      	ldr	r3, [pc, #548]	; (8007354 <_vfiprintf_r+0x240>)
 800712e:	429d      	cmp	r5, r3
 8007130:	d11b      	bne.n	800716a <_vfiprintf_r+0x56>
 8007132:	6875      	ldr	r5, [r6, #4]
 8007134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007136:	07d9      	lsls	r1, r3, #31
 8007138:	d405      	bmi.n	8007146 <_vfiprintf_r+0x32>
 800713a:	89ab      	ldrh	r3, [r5, #12]
 800713c:	059a      	lsls	r2, r3, #22
 800713e:	d402      	bmi.n	8007146 <_vfiprintf_r+0x32>
 8007140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007142:	f000 fe4b 	bl	8007ddc <__retarget_lock_acquire_recursive>
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	071b      	lsls	r3, r3, #28
 800714a:	d501      	bpl.n	8007150 <_vfiprintf_r+0x3c>
 800714c:	692b      	ldr	r3, [r5, #16]
 800714e:	b9eb      	cbnz	r3, 800718c <_vfiprintf_r+0x78>
 8007150:	4629      	mov	r1, r5
 8007152:	4630      	mov	r0, r6
 8007154:	f000 fc14 	bl	8007980 <__swsetup_r>
 8007158:	b1c0      	cbz	r0, 800718c <_vfiprintf_r+0x78>
 800715a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800715c:	07dc      	lsls	r4, r3, #31
 800715e:	d50e      	bpl.n	800717e <_vfiprintf_r+0x6a>
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	b01d      	add	sp, #116	; 0x74
 8007166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716a:	4b7b      	ldr	r3, [pc, #492]	; (8007358 <_vfiprintf_r+0x244>)
 800716c:	429d      	cmp	r5, r3
 800716e:	d101      	bne.n	8007174 <_vfiprintf_r+0x60>
 8007170:	68b5      	ldr	r5, [r6, #8]
 8007172:	e7df      	b.n	8007134 <_vfiprintf_r+0x20>
 8007174:	4b79      	ldr	r3, [pc, #484]	; (800735c <_vfiprintf_r+0x248>)
 8007176:	429d      	cmp	r5, r3
 8007178:	bf08      	it	eq
 800717a:	68f5      	ldreq	r5, [r6, #12]
 800717c:	e7da      	b.n	8007134 <_vfiprintf_r+0x20>
 800717e:	89ab      	ldrh	r3, [r5, #12]
 8007180:	0598      	lsls	r0, r3, #22
 8007182:	d4ed      	bmi.n	8007160 <_vfiprintf_r+0x4c>
 8007184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007186:	f000 fe2a 	bl	8007dde <__retarget_lock_release_recursive>
 800718a:	e7e9      	b.n	8007160 <_vfiprintf_r+0x4c>
 800718c:	2300      	movs	r3, #0
 800718e:	9309      	str	r3, [sp, #36]	; 0x24
 8007190:	2320      	movs	r3, #32
 8007192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007196:	f8cd 800c 	str.w	r8, [sp, #12]
 800719a:	2330      	movs	r3, #48	; 0x30
 800719c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007360 <_vfiprintf_r+0x24c>
 80071a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071a4:	f04f 0901 	mov.w	r9, #1
 80071a8:	4623      	mov	r3, r4
 80071aa:	469a      	mov	sl, r3
 80071ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071b0:	b10a      	cbz	r2, 80071b6 <_vfiprintf_r+0xa2>
 80071b2:	2a25      	cmp	r2, #37	; 0x25
 80071b4:	d1f9      	bne.n	80071aa <_vfiprintf_r+0x96>
 80071b6:	ebba 0b04 	subs.w	fp, sl, r4
 80071ba:	d00b      	beq.n	80071d4 <_vfiprintf_r+0xc0>
 80071bc:	465b      	mov	r3, fp
 80071be:	4622      	mov	r2, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7ff ff93 	bl	80070ee <__sfputs_r>
 80071c8:	3001      	adds	r0, #1
 80071ca:	f000 80aa 	beq.w	8007322 <_vfiprintf_r+0x20e>
 80071ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071d0:	445a      	add	r2, fp
 80071d2:	9209      	str	r2, [sp, #36]	; 0x24
 80071d4:	f89a 3000 	ldrb.w	r3, [sl]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80a2 	beq.w	8007322 <_vfiprintf_r+0x20e>
 80071de:	2300      	movs	r3, #0
 80071e0:	f04f 32ff 	mov.w	r2, #4294967295
 80071e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e8:	f10a 0a01 	add.w	sl, sl, #1
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	9307      	str	r3, [sp, #28]
 80071f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071f4:	931a      	str	r3, [sp, #104]	; 0x68
 80071f6:	4654      	mov	r4, sl
 80071f8:	2205      	movs	r2, #5
 80071fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071fe:	4858      	ldr	r0, [pc, #352]	; (8007360 <_vfiprintf_r+0x24c>)
 8007200:	f7f8 fffe 	bl	8000200 <memchr>
 8007204:	9a04      	ldr	r2, [sp, #16]
 8007206:	b9d8      	cbnz	r0, 8007240 <_vfiprintf_r+0x12c>
 8007208:	06d1      	lsls	r1, r2, #27
 800720a:	bf44      	itt	mi
 800720c:	2320      	movmi	r3, #32
 800720e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007212:	0713      	lsls	r3, r2, #28
 8007214:	bf44      	itt	mi
 8007216:	232b      	movmi	r3, #43	; 0x2b
 8007218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800721c:	f89a 3000 	ldrb.w	r3, [sl]
 8007220:	2b2a      	cmp	r3, #42	; 0x2a
 8007222:	d015      	beq.n	8007250 <_vfiprintf_r+0x13c>
 8007224:	9a07      	ldr	r2, [sp, #28]
 8007226:	4654      	mov	r4, sl
 8007228:	2000      	movs	r0, #0
 800722a:	f04f 0c0a 	mov.w	ip, #10
 800722e:	4621      	mov	r1, r4
 8007230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007234:	3b30      	subs	r3, #48	; 0x30
 8007236:	2b09      	cmp	r3, #9
 8007238:	d94e      	bls.n	80072d8 <_vfiprintf_r+0x1c4>
 800723a:	b1b0      	cbz	r0, 800726a <_vfiprintf_r+0x156>
 800723c:	9207      	str	r2, [sp, #28]
 800723e:	e014      	b.n	800726a <_vfiprintf_r+0x156>
 8007240:	eba0 0308 	sub.w	r3, r0, r8
 8007244:	fa09 f303 	lsl.w	r3, r9, r3
 8007248:	4313      	orrs	r3, r2
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	46a2      	mov	sl, r4
 800724e:	e7d2      	b.n	80071f6 <_vfiprintf_r+0xe2>
 8007250:	9b03      	ldr	r3, [sp, #12]
 8007252:	1d19      	adds	r1, r3, #4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	9103      	str	r1, [sp, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	bfbb      	ittet	lt
 800725c:	425b      	neglt	r3, r3
 800725e:	f042 0202 	orrlt.w	r2, r2, #2
 8007262:	9307      	strge	r3, [sp, #28]
 8007264:	9307      	strlt	r3, [sp, #28]
 8007266:	bfb8      	it	lt
 8007268:	9204      	strlt	r2, [sp, #16]
 800726a:	7823      	ldrb	r3, [r4, #0]
 800726c:	2b2e      	cmp	r3, #46	; 0x2e
 800726e:	d10c      	bne.n	800728a <_vfiprintf_r+0x176>
 8007270:	7863      	ldrb	r3, [r4, #1]
 8007272:	2b2a      	cmp	r3, #42	; 0x2a
 8007274:	d135      	bne.n	80072e2 <_vfiprintf_r+0x1ce>
 8007276:	9b03      	ldr	r3, [sp, #12]
 8007278:	1d1a      	adds	r2, r3, #4
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	9203      	str	r2, [sp, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	bfb8      	it	lt
 8007282:	f04f 33ff 	movlt.w	r3, #4294967295
 8007286:	3402      	adds	r4, #2
 8007288:	9305      	str	r3, [sp, #20]
 800728a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007370 <_vfiprintf_r+0x25c>
 800728e:	7821      	ldrb	r1, [r4, #0]
 8007290:	2203      	movs	r2, #3
 8007292:	4650      	mov	r0, sl
 8007294:	f7f8 ffb4 	bl	8000200 <memchr>
 8007298:	b140      	cbz	r0, 80072ac <_vfiprintf_r+0x198>
 800729a:	2340      	movs	r3, #64	; 0x40
 800729c:	eba0 000a 	sub.w	r0, r0, sl
 80072a0:	fa03 f000 	lsl.w	r0, r3, r0
 80072a4:	9b04      	ldr	r3, [sp, #16]
 80072a6:	4303      	orrs	r3, r0
 80072a8:	3401      	adds	r4, #1
 80072aa:	9304      	str	r3, [sp, #16]
 80072ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b0:	482c      	ldr	r0, [pc, #176]	; (8007364 <_vfiprintf_r+0x250>)
 80072b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072b6:	2206      	movs	r2, #6
 80072b8:	f7f8 ffa2 	bl	8000200 <memchr>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d03f      	beq.n	8007340 <_vfiprintf_r+0x22c>
 80072c0:	4b29      	ldr	r3, [pc, #164]	; (8007368 <_vfiprintf_r+0x254>)
 80072c2:	bb1b      	cbnz	r3, 800730c <_vfiprintf_r+0x1f8>
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	3307      	adds	r3, #7
 80072c8:	f023 0307 	bic.w	r3, r3, #7
 80072cc:	3308      	adds	r3, #8
 80072ce:	9303      	str	r3, [sp, #12]
 80072d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d2:	443b      	add	r3, r7
 80072d4:	9309      	str	r3, [sp, #36]	; 0x24
 80072d6:	e767      	b.n	80071a8 <_vfiprintf_r+0x94>
 80072d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80072dc:	460c      	mov	r4, r1
 80072de:	2001      	movs	r0, #1
 80072e0:	e7a5      	b.n	800722e <_vfiprintf_r+0x11a>
 80072e2:	2300      	movs	r3, #0
 80072e4:	3401      	adds	r4, #1
 80072e6:	9305      	str	r3, [sp, #20]
 80072e8:	4619      	mov	r1, r3
 80072ea:	f04f 0c0a 	mov.w	ip, #10
 80072ee:	4620      	mov	r0, r4
 80072f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072f4:	3a30      	subs	r2, #48	; 0x30
 80072f6:	2a09      	cmp	r2, #9
 80072f8:	d903      	bls.n	8007302 <_vfiprintf_r+0x1ee>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0c5      	beq.n	800728a <_vfiprintf_r+0x176>
 80072fe:	9105      	str	r1, [sp, #20]
 8007300:	e7c3      	b.n	800728a <_vfiprintf_r+0x176>
 8007302:	fb0c 2101 	mla	r1, ip, r1, r2
 8007306:	4604      	mov	r4, r0
 8007308:	2301      	movs	r3, #1
 800730a:	e7f0      	b.n	80072ee <_vfiprintf_r+0x1da>
 800730c:	ab03      	add	r3, sp, #12
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	462a      	mov	r2, r5
 8007312:	4b16      	ldr	r3, [pc, #88]	; (800736c <_vfiprintf_r+0x258>)
 8007314:	a904      	add	r1, sp, #16
 8007316:	4630      	mov	r0, r6
 8007318:	f3af 8000 	nop.w
 800731c:	4607      	mov	r7, r0
 800731e:	1c78      	adds	r0, r7, #1
 8007320:	d1d6      	bne.n	80072d0 <_vfiprintf_r+0x1bc>
 8007322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007324:	07d9      	lsls	r1, r3, #31
 8007326:	d405      	bmi.n	8007334 <_vfiprintf_r+0x220>
 8007328:	89ab      	ldrh	r3, [r5, #12]
 800732a:	059a      	lsls	r2, r3, #22
 800732c:	d402      	bmi.n	8007334 <_vfiprintf_r+0x220>
 800732e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007330:	f000 fd55 	bl	8007dde <__retarget_lock_release_recursive>
 8007334:	89ab      	ldrh	r3, [r5, #12]
 8007336:	065b      	lsls	r3, r3, #25
 8007338:	f53f af12 	bmi.w	8007160 <_vfiprintf_r+0x4c>
 800733c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800733e:	e711      	b.n	8007164 <_vfiprintf_r+0x50>
 8007340:	ab03      	add	r3, sp, #12
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	462a      	mov	r2, r5
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <_vfiprintf_r+0x258>)
 8007348:	a904      	add	r1, sp, #16
 800734a:	4630      	mov	r0, r6
 800734c:	f000 f880 	bl	8007450 <_printf_i>
 8007350:	e7e4      	b.n	800731c <_vfiprintf_r+0x208>
 8007352:	bf00      	nop
 8007354:	08008430 	.word	0x08008430
 8007358:	08008450 	.word	0x08008450
 800735c:	08008410 	.word	0x08008410
 8007360:	08008364 	.word	0x08008364
 8007364:	0800836e 	.word	0x0800836e
 8007368:	00000000 	.word	0x00000000
 800736c:	080070ef 	.word	0x080070ef
 8007370:	0800836a 	.word	0x0800836a

08007374 <_printf_common>:
 8007374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007378:	4616      	mov	r6, r2
 800737a:	4699      	mov	r9, r3
 800737c:	688a      	ldr	r2, [r1, #8]
 800737e:	690b      	ldr	r3, [r1, #16]
 8007380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007384:	4293      	cmp	r3, r2
 8007386:	bfb8      	it	lt
 8007388:	4613      	movlt	r3, r2
 800738a:	6033      	str	r3, [r6, #0]
 800738c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007390:	4607      	mov	r7, r0
 8007392:	460c      	mov	r4, r1
 8007394:	b10a      	cbz	r2, 800739a <_printf_common+0x26>
 8007396:	3301      	adds	r3, #1
 8007398:	6033      	str	r3, [r6, #0]
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	0699      	lsls	r1, r3, #26
 800739e:	bf42      	ittt	mi
 80073a0:	6833      	ldrmi	r3, [r6, #0]
 80073a2:	3302      	addmi	r3, #2
 80073a4:	6033      	strmi	r3, [r6, #0]
 80073a6:	6825      	ldr	r5, [r4, #0]
 80073a8:	f015 0506 	ands.w	r5, r5, #6
 80073ac:	d106      	bne.n	80073bc <_printf_common+0x48>
 80073ae:	f104 0a19 	add.w	sl, r4, #25
 80073b2:	68e3      	ldr	r3, [r4, #12]
 80073b4:	6832      	ldr	r2, [r6, #0]
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	42ab      	cmp	r3, r5
 80073ba:	dc26      	bgt.n	800740a <_printf_common+0x96>
 80073bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073c0:	1e13      	subs	r3, r2, #0
 80073c2:	6822      	ldr	r2, [r4, #0]
 80073c4:	bf18      	it	ne
 80073c6:	2301      	movne	r3, #1
 80073c8:	0692      	lsls	r2, r2, #26
 80073ca:	d42b      	bmi.n	8007424 <_printf_common+0xb0>
 80073cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073d0:	4649      	mov	r1, r9
 80073d2:	4638      	mov	r0, r7
 80073d4:	47c0      	blx	r8
 80073d6:	3001      	adds	r0, #1
 80073d8:	d01e      	beq.n	8007418 <_printf_common+0xa4>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	68e5      	ldr	r5, [r4, #12]
 80073de:	6832      	ldr	r2, [r6, #0]
 80073e0:	f003 0306 	and.w	r3, r3, #6
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	bf08      	it	eq
 80073e8:	1aad      	subeq	r5, r5, r2
 80073ea:	68a3      	ldr	r3, [r4, #8]
 80073ec:	6922      	ldr	r2, [r4, #16]
 80073ee:	bf0c      	ite	eq
 80073f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073f4:	2500      	movne	r5, #0
 80073f6:	4293      	cmp	r3, r2
 80073f8:	bfc4      	itt	gt
 80073fa:	1a9b      	subgt	r3, r3, r2
 80073fc:	18ed      	addgt	r5, r5, r3
 80073fe:	2600      	movs	r6, #0
 8007400:	341a      	adds	r4, #26
 8007402:	42b5      	cmp	r5, r6
 8007404:	d11a      	bne.n	800743c <_printf_common+0xc8>
 8007406:	2000      	movs	r0, #0
 8007408:	e008      	b.n	800741c <_printf_common+0xa8>
 800740a:	2301      	movs	r3, #1
 800740c:	4652      	mov	r2, sl
 800740e:	4649      	mov	r1, r9
 8007410:	4638      	mov	r0, r7
 8007412:	47c0      	blx	r8
 8007414:	3001      	adds	r0, #1
 8007416:	d103      	bne.n	8007420 <_printf_common+0xac>
 8007418:	f04f 30ff 	mov.w	r0, #4294967295
 800741c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007420:	3501      	adds	r5, #1
 8007422:	e7c6      	b.n	80073b2 <_printf_common+0x3e>
 8007424:	18e1      	adds	r1, r4, r3
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	2030      	movs	r0, #48	; 0x30
 800742a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800742e:	4422      	add	r2, r4
 8007430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007438:	3302      	adds	r3, #2
 800743a:	e7c7      	b.n	80073cc <_printf_common+0x58>
 800743c:	2301      	movs	r3, #1
 800743e:	4622      	mov	r2, r4
 8007440:	4649      	mov	r1, r9
 8007442:	4638      	mov	r0, r7
 8007444:	47c0      	blx	r8
 8007446:	3001      	adds	r0, #1
 8007448:	d0e6      	beq.n	8007418 <_printf_common+0xa4>
 800744a:	3601      	adds	r6, #1
 800744c:	e7d9      	b.n	8007402 <_printf_common+0x8e>
	...

08007450 <_printf_i>:
 8007450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007454:	460c      	mov	r4, r1
 8007456:	4691      	mov	r9, r2
 8007458:	7e27      	ldrb	r7, [r4, #24]
 800745a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800745c:	2f78      	cmp	r7, #120	; 0x78
 800745e:	4680      	mov	r8, r0
 8007460:	469a      	mov	sl, r3
 8007462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007466:	d807      	bhi.n	8007478 <_printf_i+0x28>
 8007468:	2f62      	cmp	r7, #98	; 0x62
 800746a:	d80a      	bhi.n	8007482 <_printf_i+0x32>
 800746c:	2f00      	cmp	r7, #0
 800746e:	f000 80d8 	beq.w	8007622 <_printf_i+0x1d2>
 8007472:	2f58      	cmp	r7, #88	; 0x58
 8007474:	f000 80a3 	beq.w	80075be <_printf_i+0x16e>
 8007478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800747c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007480:	e03a      	b.n	80074f8 <_printf_i+0xa8>
 8007482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007486:	2b15      	cmp	r3, #21
 8007488:	d8f6      	bhi.n	8007478 <_printf_i+0x28>
 800748a:	a001      	add	r0, pc, #4	; (adr r0, 8007490 <_printf_i+0x40>)
 800748c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007490:	080074e9 	.word	0x080074e9
 8007494:	080074fd 	.word	0x080074fd
 8007498:	08007479 	.word	0x08007479
 800749c:	08007479 	.word	0x08007479
 80074a0:	08007479 	.word	0x08007479
 80074a4:	08007479 	.word	0x08007479
 80074a8:	080074fd 	.word	0x080074fd
 80074ac:	08007479 	.word	0x08007479
 80074b0:	08007479 	.word	0x08007479
 80074b4:	08007479 	.word	0x08007479
 80074b8:	08007479 	.word	0x08007479
 80074bc:	08007609 	.word	0x08007609
 80074c0:	0800752d 	.word	0x0800752d
 80074c4:	080075eb 	.word	0x080075eb
 80074c8:	08007479 	.word	0x08007479
 80074cc:	08007479 	.word	0x08007479
 80074d0:	0800762b 	.word	0x0800762b
 80074d4:	08007479 	.word	0x08007479
 80074d8:	0800752d 	.word	0x0800752d
 80074dc:	08007479 	.word	0x08007479
 80074e0:	08007479 	.word	0x08007479
 80074e4:	080075f3 	.word	0x080075f3
 80074e8:	680b      	ldr	r3, [r1, #0]
 80074ea:	1d1a      	adds	r2, r3, #4
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	600a      	str	r2, [r1, #0]
 80074f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074f8:	2301      	movs	r3, #1
 80074fa:	e0a3      	b.n	8007644 <_printf_i+0x1f4>
 80074fc:	6825      	ldr	r5, [r4, #0]
 80074fe:	6808      	ldr	r0, [r1, #0]
 8007500:	062e      	lsls	r6, r5, #24
 8007502:	f100 0304 	add.w	r3, r0, #4
 8007506:	d50a      	bpl.n	800751e <_printf_i+0xce>
 8007508:	6805      	ldr	r5, [r0, #0]
 800750a:	600b      	str	r3, [r1, #0]
 800750c:	2d00      	cmp	r5, #0
 800750e:	da03      	bge.n	8007518 <_printf_i+0xc8>
 8007510:	232d      	movs	r3, #45	; 0x2d
 8007512:	426d      	negs	r5, r5
 8007514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007518:	485e      	ldr	r0, [pc, #376]	; (8007694 <_printf_i+0x244>)
 800751a:	230a      	movs	r3, #10
 800751c:	e019      	b.n	8007552 <_printf_i+0x102>
 800751e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007522:	6805      	ldr	r5, [r0, #0]
 8007524:	600b      	str	r3, [r1, #0]
 8007526:	bf18      	it	ne
 8007528:	b22d      	sxthne	r5, r5
 800752a:	e7ef      	b.n	800750c <_printf_i+0xbc>
 800752c:	680b      	ldr	r3, [r1, #0]
 800752e:	6825      	ldr	r5, [r4, #0]
 8007530:	1d18      	adds	r0, r3, #4
 8007532:	6008      	str	r0, [r1, #0]
 8007534:	0628      	lsls	r0, r5, #24
 8007536:	d501      	bpl.n	800753c <_printf_i+0xec>
 8007538:	681d      	ldr	r5, [r3, #0]
 800753a:	e002      	b.n	8007542 <_printf_i+0xf2>
 800753c:	0669      	lsls	r1, r5, #25
 800753e:	d5fb      	bpl.n	8007538 <_printf_i+0xe8>
 8007540:	881d      	ldrh	r5, [r3, #0]
 8007542:	4854      	ldr	r0, [pc, #336]	; (8007694 <_printf_i+0x244>)
 8007544:	2f6f      	cmp	r7, #111	; 0x6f
 8007546:	bf0c      	ite	eq
 8007548:	2308      	moveq	r3, #8
 800754a:	230a      	movne	r3, #10
 800754c:	2100      	movs	r1, #0
 800754e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007552:	6866      	ldr	r6, [r4, #4]
 8007554:	60a6      	str	r6, [r4, #8]
 8007556:	2e00      	cmp	r6, #0
 8007558:	bfa2      	ittt	ge
 800755a:	6821      	ldrge	r1, [r4, #0]
 800755c:	f021 0104 	bicge.w	r1, r1, #4
 8007560:	6021      	strge	r1, [r4, #0]
 8007562:	b90d      	cbnz	r5, 8007568 <_printf_i+0x118>
 8007564:	2e00      	cmp	r6, #0
 8007566:	d04d      	beq.n	8007604 <_printf_i+0x1b4>
 8007568:	4616      	mov	r6, r2
 800756a:	fbb5 f1f3 	udiv	r1, r5, r3
 800756e:	fb03 5711 	mls	r7, r3, r1, r5
 8007572:	5dc7      	ldrb	r7, [r0, r7]
 8007574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007578:	462f      	mov	r7, r5
 800757a:	42bb      	cmp	r3, r7
 800757c:	460d      	mov	r5, r1
 800757e:	d9f4      	bls.n	800756a <_printf_i+0x11a>
 8007580:	2b08      	cmp	r3, #8
 8007582:	d10b      	bne.n	800759c <_printf_i+0x14c>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	07df      	lsls	r7, r3, #31
 8007588:	d508      	bpl.n	800759c <_printf_i+0x14c>
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	6861      	ldr	r1, [r4, #4]
 800758e:	4299      	cmp	r1, r3
 8007590:	bfde      	ittt	le
 8007592:	2330      	movle	r3, #48	; 0x30
 8007594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800759c:	1b92      	subs	r2, r2, r6
 800759e:	6122      	str	r2, [r4, #16]
 80075a0:	f8cd a000 	str.w	sl, [sp]
 80075a4:	464b      	mov	r3, r9
 80075a6:	aa03      	add	r2, sp, #12
 80075a8:	4621      	mov	r1, r4
 80075aa:	4640      	mov	r0, r8
 80075ac:	f7ff fee2 	bl	8007374 <_printf_common>
 80075b0:	3001      	adds	r0, #1
 80075b2:	d14c      	bne.n	800764e <_printf_i+0x1fe>
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	b004      	add	sp, #16
 80075ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075be:	4835      	ldr	r0, [pc, #212]	; (8007694 <_printf_i+0x244>)
 80075c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	680e      	ldr	r6, [r1, #0]
 80075c8:	061f      	lsls	r7, r3, #24
 80075ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80075ce:	600e      	str	r6, [r1, #0]
 80075d0:	d514      	bpl.n	80075fc <_printf_i+0x1ac>
 80075d2:	07d9      	lsls	r1, r3, #31
 80075d4:	bf44      	itt	mi
 80075d6:	f043 0320 	orrmi.w	r3, r3, #32
 80075da:	6023      	strmi	r3, [r4, #0]
 80075dc:	b91d      	cbnz	r5, 80075e6 <_printf_i+0x196>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	f023 0320 	bic.w	r3, r3, #32
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	2310      	movs	r3, #16
 80075e8:	e7b0      	b.n	800754c <_printf_i+0xfc>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	f043 0320 	orr.w	r3, r3, #32
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	2378      	movs	r3, #120	; 0x78
 80075f4:	4828      	ldr	r0, [pc, #160]	; (8007698 <_printf_i+0x248>)
 80075f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075fa:	e7e3      	b.n	80075c4 <_printf_i+0x174>
 80075fc:	065e      	lsls	r6, r3, #25
 80075fe:	bf48      	it	mi
 8007600:	b2ad      	uxthmi	r5, r5
 8007602:	e7e6      	b.n	80075d2 <_printf_i+0x182>
 8007604:	4616      	mov	r6, r2
 8007606:	e7bb      	b.n	8007580 <_printf_i+0x130>
 8007608:	680b      	ldr	r3, [r1, #0]
 800760a:	6826      	ldr	r6, [r4, #0]
 800760c:	6960      	ldr	r0, [r4, #20]
 800760e:	1d1d      	adds	r5, r3, #4
 8007610:	600d      	str	r5, [r1, #0]
 8007612:	0635      	lsls	r5, r6, #24
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	d501      	bpl.n	800761c <_printf_i+0x1cc>
 8007618:	6018      	str	r0, [r3, #0]
 800761a:	e002      	b.n	8007622 <_printf_i+0x1d2>
 800761c:	0671      	lsls	r1, r6, #25
 800761e:	d5fb      	bpl.n	8007618 <_printf_i+0x1c8>
 8007620:	8018      	strh	r0, [r3, #0]
 8007622:	2300      	movs	r3, #0
 8007624:	6123      	str	r3, [r4, #16]
 8007626:	4616      	mov	r6, r2
 8007628:	e7ba      	b.n	80075a0 <_printf_i+0x150>
 800762a:	680b      	ldr	r3, [r1, #0]
 800762c:	1d1a      	adds	r2, r3, #4
 800762e:	600a      	str	r2, [r1, #0]
 8007630:	681e      	ldr	r6, [r3, #0]
 8007632:	6862      	ldr	r2, [r4, #4]
 8007634:	2100      	movs	r1, #0
 8007636:	4630      	mov	r0, r6
 8007638:	f7f8 fde2 	bl	8000200 <memchr>
 800763c:	b108      	cbz	r0, 8007642 <_printf_i+0x1f2>
 800763e:	1b80      	subs	r0, r0, r6
 8007640:	6060      	str	r0, [r4, #4]
 8007642:	6863      	ldr	r3, [r4, #4]
 8007644:	6123      	str	r3, [r4, #16]
 8007646:	2300      	movs	r3, #0
 8007648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800764c:	e7a8      	b.n	80075a0 <_printf_i+0x150>
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	4632      	mov	r2, r6
 8007652:	4649      	mov	r1, r9
 8007654:	4640      	mov	r0, r8
 8007656:	47d0      	blx	sl
 8007658:	3001      	adds	r0, #1
 800765a:	d0ab      	beq.n	80075b4 <_printf_i+0x164>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	079b      	lsls	r3, r3, #30
 8007660:	d413      	bmi.n	800768a <_printf_i+0x23a>
 8007662:	68e0      	ldr	r0, [r4, #12]
 8007664:	9b03      	ldr	r3, [sp, #12]
 8007666:	4298      	cmp	r0, r3
 8007668:	bfb8      	it	lt
 800766a:	4618      	movlt	r0, r3
 800766c:	e7a4      	b.n	80075b8 <_printf_i+0x168>
 800766e:	2301      	movs	r3, #1
 8007670:	4632      	mov	r2, r6
 8007672:	4649      	mov	r1, r9
 8007674:	4640      	mov	r0, r8
 8007676:	47d0      	blx	sl
 8007678:	3001      	adds	r0, #1
 800767a:	d09b      	beq.n	80075b4 <_printf_i+0x164>
 800767c:	3501      	adds	r5, #1
 800767e:	68e3      	ldr	r3, [r4, #12]
 8007680:	9903      	ldr	r1, [sp, #12]
 8007682:	1a5b      	subs	r3, r3, r1
 8007684:	42ab      	cmp	r3, r5
 8007686:	dcf2      	bgt.n	800766e <_printf_i+0x21e>
 8007688:	e7eb      	b.n	8007662 <_printf_i+0x212>
 800768a:	2500      	movs	r5, #0
 800768c:	f104 0619 	add.w	r6, r4, #25
 8007690:	e7f5      	b.n	800767e <_printf_i+0x22e>
 8007692:	bf00      	nop
 8007694:	08008375 	.word	0x08008375
 8007698:	08008386 	.word	0x08008386

0800769c <iprintf>:
 800769c:	b40f      	push	{r0, r1, r2, r3}
 800769e:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <iprintf+0x2c>)
 80076a0:	b513      	push	{r0, r1, r4, lr}
 80076a2:	681c      	ldr	r4, [r3, #0]
 80076a4:	b124      	cbz	r4, 80076b0 <iprintf+0x14>
 80076a6:	69a3      	ldr	r3, [r4, #24]
 80076a8:	b913      	cbnz	r3, 80076b0 <iprintf+0x14>
 80076aa:	4620      	mov	r0, r4
 80076ac:	f000 faf8 	bl	8007ca0 <__sinit>
 80076b0:	ab05      	add	r3, sp, #20
 80076b2:	9a04      	ldr	r2, [sp, #16]
 80076b4:	68a1      	ldr	r1, [r4, #8]
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	4620      	mov	r0, r4
 80076ba:	f7ff fd2b 	bl	8007114 <_vfiprintf_r>
 80076be:	b002      	add	sp, #8
 80076c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c4:	b004      	add	sp, #16
 80076c6:	4770      	bx	lr
 80076c8:	2000000c 	.word	0x2000000c

080076cc <putchar>:
 80076cc:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <putchar+0x28>)
 80076ce:	b513      	push	{r0, r1, r4, lr}
 80076d0:	681c      	ldr	r4, [r3, #0]
 80076d2:	4601      	mov	r1, r0
 80076d4:	b134      	cbz	r4, 80076e4 <putchar+0x18>
 80076d6:	69a3      	ldr	r3, [r4, #24]
 80076d8:	b923      	cbnz	r3, 80076e4 <putchar+0x18>
 80076da:	9001      	str	r0, [sp, #4]
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 fadf 	bl	8007ca0 <__sinit>
 80076e2:	9901      	ldr	r1, [sp, #4]
 80076e4:	68a2      	ldr	r2, [r4, #8]
 80076e6:	4620      	mov	r0, r4
 80076e8:	b002      	add	sp, #8
 80076ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ee:	f000 bbe7 	b.w	8007ec0 <_putc_r>
 80076f2:	bf00      	nop
 80076f4:	2000000c 	.word	0x2000000c

080076f8 <_puts_r>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	460e      	mov	r6, r1
 80076fc:	4605      	mov	r5, r0
 80076fe:	b118      	cbz	r0, 8007708 <_puts_r+0x10>
 8007700:	6983      	ldr	r3, [r0, #24]
 8007702:	b90b      	cbnz	r3, 8007708 <_puts_r+0x10>
 8007704:	f000 facc 	bl	8007ca0 <__sinit>
 8007708:	69ab      	ldr	r3, [r5, #24]
 800770a:	68ac      	ldr	r4, [r5, #8]
 800770c:	b913      	cbnz	r3, 8007714 <_puts_r+0x1c>
 800770e:	4628      	mov	r0, r5
 8007710:	f000 fac6 	bl	8007ca0 <__sinit>
 8007714:	4b2c      	ldr	r3, [pc, #176]	; (80077c8 <_puts_r+0xd0>)
 8007716:	429c      	cmp	r4, r3
 8007718:	d120      	bne.n	800775c <_puts_r+0x64>
 800771a:	686c      	ldr	r4, [r5, #4]
 800771c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800771e:	07db      	lsls	r3, r3, #31
 8007720:	d405      	bmi.n	800772e <_puts_r+0x36>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	0598      	lsls	r0, r3, #22
 8007726:	d402      	bmi.n	800772e <_puts_r+0x36>
 8007728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800772a:	f000 fb57 	bl	8007ddc <__retarget_lock_acquire_recursive>
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	0719      	lsls	r1, r3, #28
 8007732:	d51d      	bpl.n	8007770 <_puts_r+0x78>
 8007734:	6923      	ldr	r3, [r4, #16]
 8007736:	b1db      	cbz	r3, 8007770 <_puts_r+0x78>
 8007738:	3e01      	subs	r6, #1
 800773a:	68a3      	ldr	r3, [r4, #8]
 800773c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007740:	3b01      	subs	r3, #1
 8007742:	60a3      	str	r3, [r4, #8]
 8007744:	bb39      	cbnz	r1, 8007796 <_puts_r+0x9e>
 8007746:	2b00      	cmp	r3, #0
 8007748:	da38      	bge.n	80077bc <_puts_r+0xc4>
 800774a:	4622      	mov	r2, r4
 800774c:	210a      	movs	r1, #10
 800774e:	4628      	mov	r0, r5
 8007750:	f000 f8c4 	bl	80078dc <__swbuf_r>
 8007754:	3001      	adds	r0, #1
 8007756:	d011      	beq.n	800777c <_puts_r+0x84>
 8007758:	250a      	movs	r5, #10
 800775a:	e011      	b.n	8007780 <_puts_r+0x88>
 800775c:	4b1b      	ldr	r3, [pc, #108]	; (80077cc <_puts_r+0xd4>)
 800775e:	429c      	cmp	r4, r3
 8007760:	d101      	bne.n	8007766 <_puts_r+0x6e>
 8007762:	68ac      	ldr	r4, [r5, #8]
 8007764:	e7da      	b.n	800771c <_puts_r+0x24>
 8007766:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <_puts_r+0xd8>)
 8007768:	429c      	cmp	r4, r3
 800776a:	bf08      	it	eq
 800776c:	68ec      	ldreq	r4, [r5, #12]
 800776e:	e7d5      	b.n	800771c <_puts_r+0x24>
 8007770:	4621      	mov	r1, r4
 8007772:	4628      	mov	r0, r5
 8007774:	f000 f904 	bl	8007980 <__swsetup_r>
 8007778:	2800      	cmp	r0, #0
 800777a:	d0dd      	beq.n	8007738 <_puts_r+0x40>
 800777c:	f04f 35ff 	mov.w	r5, #4294967295
 8007780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007782:	07da      	lsls	r2, r3, #31
 8007784:	d405      	bmi.n	8007792 <_puts_r+0x9a>
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	059b      	lsls	r3, r3, #22
 800778a:	d402      	bmi.n	8007792 <_puts_r+0x9a>
 800778c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800778e:	f000 fb26 	bl	8007dde <__retarget_lock_release_recursive>
 8007792:	4628      	mov	r0, r5
 8007794:	bd70      	pop	{r4, r5, r6, pc}
 8007796:	2b00      	cmp	r3, #0
 8007798:	da04      	bge.n	80077a4 <_puts_r+0xac>
 800779a:	69a2      	ldr	r2, [r4, #24]
 800779c:	429a      	cmp	r2, r3
 800779e:	dc06      	bgt.n	80077ae <_puts_r+0xb6>
 80077a0:	290a      	cmp	r1, #10
 80077a2:	d004      	beq.n	80077ae <_puts_r+0xb6>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	6022      	str	r2, [r4, #0]
 80077aa:	7019      	strb	r1, [r3, #0]
 80077ac:	e7c5      	b.n	800773a <_puts_r+0x42>
 80077ae:	4622      	mov	r2, r4
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 f893 	bl	80078dc <__swbuf_r>
 80077b6:	3001      	adds	r0, #1
 80077b8:	d1bf      	bne.n	800773a <_puts_r+0x42>
 80077ba:	e7df      	b.n	800777c <_puts_r+0x84>
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	250a      	movs	r5, #10
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	6022      	str	r2, [r4, #0]
 80077c4:	701d      	strb	r5, [r3, #0]
 80077c6:	e7db      	b.n	8007780 <_puts_r+0x88>
 80077c8:	08008430 	.word	0x08008430
 80077cc:	08008450 	.word	0x08008450
 80077d0:	08008410 	.word	0x08008410

080077d4 <puts>:
 80077d4:	4b02      	ldr	r3, [pc, #8]	; (80077e0 <puts+0xc>)
 80077d6:	4601      	mov	r1, r0
 80077d8:	6818      	ldr	r0, [r3, #0]
 80077da:	f7ff bf8d 	b.w	80076f8 <_puts_r>
 80077de:	bf00      	nop
 80077e0:	2000000c 	.word	0x2000000c

080077e4 <_sbrk_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d06      	ldr	r5, [pc, #24]	; (8007800 <_sbrk_r+0x1c>)
 80077e8:	2300      	movs	r3, #0
 80077ea:	4604      	mov	r4, r0
 80077ec:	4608      	mov	r0, r1
 80077ee:	602b      	str	r3, [r5, #0]
 80077f0:	f7fa f8da 	bl	80019a8 <_sbrk>
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	d102      	bne.n	80077fe <_sbrk_r+0x1a>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	b103      	cbz	r3, 80077fe <_sbrk_r+0x1a>
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	200002cc 	.word	0x200002cc

08007804 <strcat>:
 8007804:	b510      	push	{r4, lr}
 8007806:	4602      	mov	r2, r0
 8007808:	7814      	ldrb	r4, [r2, #0]
 800780a:	4613      	mov	r3, r2
 800780c:	3201      	adds	r2, #1
 800780e:	2c00      	cmp	r4, #0
 8007810:	d1fa      	bne.n	8007808 <strcat+0x4>
 8007812:	3b01      	subs	r3, #1
 8007814:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007818:	f803 2f01 	strb.w	r2, [r3, #1]!
 800781c:	2a00      	cmp	r2, #0
 800781e:	d1f9      	bne.n	8007814 <strcat+0x10>
 8007820:	bd10      	pop	{r4, pc}
	...

08007824 <strtok>:
 8007824:	4b16      	ldr	r3, [pc, #88]	; (8007880 <strtok+0x5c>)
 8007826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007828:	681e      	ldr	r6, [r3, #0]
 800782a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800782c:	4605      	mov	r5, r0
 800782e:	b9fc      	cbnz	r4, 8007870 <strtok+0x4c>
 8007830:	2050      	movs	r0, #80	; 0x50
 8007832:	9101      	str	r1, [sp, #4]
 8007834:	f7ff fb82 	bl	8006f3c <malloc>
 8007838:	9901      	ldr	r1, [sp, #4]
 800783a:	65b0      	str	r0, [r6, #88]	; 0x58
 800783c:	4602      	mov	r2, r0
 800783e:	b920      	cbnz	r0, 800784a <strtok+0x26>
 8007840:	4b10      	ldr	r3, [pc, #64]	; (8007884 <strtok+0x60>)
 8007842:	4811      	ldr	r0, [pc, #68]	; (8007888 <strtok+0x64>)
 8007844:	2157      	movs	r1, #87	; 0x57
 8007846:	f7ff fb1f 	bl	8006e88 <__assert_func>
 800784a:	e9c0 4400 	strd	r4, r4, [r0]
 800784e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007852:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007856:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800785a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800785e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007862:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007866:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800786a:	6184      	str	r4, [r0, #24]
 800786c:	7704      	strb	r4, [r0, #28]
 800786e:	6244      	str	r4, [r0, #36]	; 0x24
 8007870:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007872:	2301      	movs	r3, #1
 8007874:	4628      	mov	r0, r5
 8007876:	b002      	add	sp, #8
 8007878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800787c:	f000 b806 	b.w	800788c <__strtok_r>
 8007880:	2000000c 	.word	0x2000000c
 8007884:	08008397 	.word	0x08008397
 8007888:	080083ae 	.word	0x080083ae

0800788c <__strtok_r>:
 800788c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800788e:	b908      	cbnz	r0, 8007894 <__strtok_r+0x8>
 8007890:	6810      	ldr	r0, [r2, #0]
 8007892:	b188      	cbz	r0, 80078b8 <__strtok_r+0x2c>
 8007894:	4604      	mov	r4, r0
 8007896:	4620      	mov	r0, r4
 8007898:	f814 5b01 	ldrb.w	r5, [r4], #1
 800789c:	460f      	mov	r7, r1
 800789e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80078a2:	b91e      	cbnz	r6, 80078ac <__strtok_r+0x20>
 80078a4:	b965      	cbnz	r5, 80078c0 <__strtok_r+0x34>
 80078a6:	6015      	str	r5, [r2, #0]
 80078a8:	4628      	mov	r0, r5
 80078aa:	e005      	b.n	80078b8 <__strtok_r+0x2c>
 80078ac:	42b5      	cmp	r5, r6
 80078ae:	d1f6      	bne.n	800789e <__strtok_r+0x12>
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f0      	bne.n	8007896 <__strtok_r+0xa>
 80078b4:	6014      	str	r4, [r2, #0]
 80078b6:	7003      	strb	r3, [r0, #0]
 80078b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ba:	461c      	mov	r4, r3
 80078bc:	e00c      	b.n	80078d8 <__strtok_r+0x4c>
 80078be:	b915      	cbnz	r5, 80078c6 <__strtok_r+0x3a>
 80078c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078c4:	460e      	mov	r6, r1
 80078c6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80078ca:	42ab      	cmp	r3, r5
 80078cc:	d1f7      	bne.n	80078be <__strtok_r+0x32>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0f3      	beq.n	80078ba <__strtok_r+0x2e>
 80078d2:	2300      	movs	r3, #0
 80078d4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80078d8:	6014      	str	r4, [r2, #0]
 80078da:	e7ed      	b.n	80078b8 <__strtok_r+0x2c>

080078dc <__swbuf_r>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	460e      	mov	r6, r1
 80078e0:	4614      	mov	r4, r2
 80078e2:	4605      	mov	r5, r0
 80078e4:	b118      	cbz	r0, 80078ee <__swbuf_r+0x12>
 80078e6:	6983      	ldr	r3, [r0, #24]
 80078e8:	b90b      	cbnz	r3, 80078ee <__swbuf_r+0x12>
 80078ea:	f000 f9d9 	bl	8007ca0 <__sinit>
 80078ee:	4b21      	ldr	r3, [pc, #132]	; (8007974 <__swbuf_r+0x98>)
 80078f0:	429c      	cmp	r4, r3
 80078f2:	d12b      	bne.n	800794c <__swbuf_r+0x70>
 80078f4:	686c      	ldr	r4, [r5, #4]
 80078f6:	69a3      	ldr	r3, [r4, #24]
 80078f8:	60a3      	str	r3, [r4, #8]
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	071a      	lsls	r2, r3, #28
 80078fe:	d52f      	bpl.n	8007960 <__swbuf_r+0x84>
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	b36b      	cbz	r3, 8007960 <__swbuf_r+0x84>
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	1ac0      	subs	r0, r0, r3
 800790a:	6963      	ldr	r3, [r4, #20]
 800790c:	b2f6      	uxtb	r6, r6
 800790e:	4283      	cmp	r3, r0
 8007910:	4637      	mov	r7, r6
 8007912:	dc04      	bgt.n	800791e <__swbuf_r+0x42>
 8007914:	4621      	mov	r1, r4
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f92e 	bl	8007b78 <_fflush_r>
 800791c:	bb30      	cbnz	r0, 800796c <__swbuf_r+0x90>
 800791e:	68a3      	ldr	r3, [r4, #8]
 8007920:	3b01      	subs	r3, #1
 8007922:	60a3      	str	r3, [r4, #8]
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	6022      	str	r2, [r4, #0]
 800792a:	701e      	strb	r6, [r3, #0]
 800792c:	6963      	ldr	r3, [r4, #20]
 800792e:	3001      	adds	r0, #1
 8007930:	4283      	cmp	r3, r0
 8007932:	d004      	beq.n	800793e <__swbuf_r+0x62>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	07db      	lsls	r3, r3, #31
 8007938:	d506      	bpl.n	8007948 <__swbuf_r+0x6c>
 800793a:	2e0a      	cmp	r6, #10
 800793c:	d104      	bne.n	8007948 <__swbuf_r+0x6c>
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f000 f919 	bl	8007b78 <_fflush_r>
 8007946:	b988      	cbnz	r0, 800796c <__swbuf_r+0x90>
 8007948:	4638      	mov	r0, r7
 800794a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <__swbuf_r+0x9c>)
 800794e:	429c      	cmp	r4, r3
 8007950:	d101      	bne.n	8007956 <__swbuf_r+0x7a>
 8007952:	68ac      	ldr	r4, [r5, #8]
 8007954:	e7cf      	b.n	80078f6 <__swbuf_r+0x1a>
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <__swbuf_r+0xa0>)
 8007958:	429c      	cmp	r4, r3
 800795a:	bf08      	it	eq
 800795c:	68ec      	ldreq	r4, [r5, #12]
 800795e:	e7ca      	b.n	80078f6 <__swbuf_r+0x1a>
 8007960:	4621      	mov	r1, r4
 8007962:	4628      	mov	r0, r5
 8007964:	f000 f80c 	bl	8007980 <__swsetup_r>
 8007968:	2800      	cmp	r0, #0
 800796a:	d0cb      	beq.n	8007904 <__swbuf_r+0x28>
 800796c:	f04f 37ff 	mov.w	r7, #4294967295
 8007970:	e7ea      	b.n	8007948 <__swbuf_r+0x6c>
 8007972:	bf00      	nop
 8007974:	08008430 	.word	0x08008430
 8007978:	08008450 	.word	0x08008450
 800797c:	08008410 	.word	0x08008410

08007980 <__swsetup_r>:
 8007980:	4b32      	ldr	r3, [pc, #200]	; (8007a4c <__swsetup_r+0xcc>)
 8007982:	b570      	push	{r4, r5, r6, lr}
 8007984:	681d      	ldr	r5, [r3, #0]
 8007986:	4606      	mov	r6, r0
 8007988:	460c      	mov	r4, r1
 800798a:	b125      	cbz	r5, 8007996 <__swsetup_r+0x16>
 800798c:	69ab      	ldr	r3, [r5, #24]
 800798e:	b913      	cbnz	r3, 8007996 <__swsetup_r+0x16>
 8007990:	4628      	mov	r0, r5
 8007992:	f000 f985 	bl	8007ca0 <__sinit>
 8007996:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <__swsetup_r+0xd0>)
 8007998:	429c      	cmp	r4, r3
 800799a:	d10f      	bne.n	80079bc <__swsetup_r+0x3c>
 800799c:	686c      	ldr	r4, [r5, #4]
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079a4:	0719      	lsls	r1, r3, #28
 80079a6:	d42c      	bmi.n	8007a02 <__swsetup_r+0x82>
 80079a8:	06dd      	lsls	r5, r3, #27
 80079aa:	d411      	bmi.n	80079d0 <__swsetup_r+0x50>
 80079ac:	2309      	movs	r3, #9
 80079ae:	6033      	str	r3, [r6, #0]
 80079b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ba:	e03e      	b.n	8007a3a <__swsetup_r+0xba>
 80079bc:	4b25      	ldr	r3, [pc, #148]	; (8007a54 <__swsetup_r+0xd4>)
 80079be:	429c      	cmp	r4, r3
 80079c0:	d101      	bne.n	80079c6 <__swsetup_r+0x46>
 80079c2:	68ac      	ldr	r4, [r5, #8]
 80079c4:	e7eb      	b.n	800799e <__swsetup_r+0x1e>
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <__swsetup_r+0xd8>)
 80079c8:	429c      	cmp	r4, r3
 80079ca:	bf08      	it	eq
 80079cc:	68ec      	ldreq	r4, [r5, #12]
 80079ce:	e7e6      	b.n	800799e <__swsetup_r+0x1e>
 80079d0:	0758      	lsls	r0, r3, #29
 80079d2:	d512      	bpl.n	80079fa <__swsetup_r+0x7a>
 80079d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079d6:	b141      	cbz	r1, 80079ea <__swsetup_r+0x6a>
 80079d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079dc:	4299      	cmp	r1, r3
 80079de:	d002      	beq.n	80079e6 <__swsetup_r+0x66>
 80079e0:	4630      	mov	r0, r6
 80079e2:	f7ff fac3 	bl	8006f6c <_free_r>
 80079e6:	2300      	movs	r3, #0
 80079e8:	6363      	str	r3, [r4, #52]	; 0x34
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	2300      	movs	r3, #0
 80079f4:	6063      	str	r3, [r4, #4]
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f043 0308 	orr.w	r3, r3, #8
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	b94b      	cbnz	r3, 8007a1a <__swsetup_r+0x9a>
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a10:	d003      	beq.n	8007a1a <__swsetup_r+0x9a>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4630      	mov	r0, r6
 8007a16:	f000 fa07 	bl	8007e28 <__smakebuf_r>
 8007a1a:	89a0      	ldrh	r0, [r4, #12]
 8007a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a20:	f010 0301 	ands.w	r3, r0, #1
 8007a24:	d00a      	beq.n	8007a3c <__swsetup_r+0xbc>
 8007a26:	2300      	movs	r3, #0
 8007a28:	60a3      	str	r3, [r4, #8]
 8007a2a:	6963      	ldr	r3, [r4, #20]
 8007a2c:	425b      	negs	r3, r3
 8007a2e:	61a3      	str	r3, [r4, #24]
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	b943      	cbnz	r3, 8007a46 <__swsetup_r+0xc6>
 8007a34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a38:	d1ba      	bne.n	80079b0 <__swsetup_r+0x30>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	0781      	lsls	r1, r0, #30
 8007a3e:	bf58      	it	pl
 8007a40:	6963      	ldrpl	r3, [r4, #20]
 8007a42:	60a3      	str	r3, [r4, #8]
 8007a44:	e7f4      	b.n	8007a30 <__swsetup_r+0xb0>
 8007a46:	2000      	movs	r0, #0
 8007a48:	e7f7      	b.n	8007a3a <__swsetup_r+0xba>
 8007a4a:	bf00      	nop
 8007a4c:	2000000c 	.word	0x2000000c
 8007a50:	08008430 	.word	0x08008430
 8007a54:	08008450 	.word	0x08008450
 8007a58:	08008410 	.word	0x08008410

08007a5c <abort>:
 8007a5c:	b508      	push	{r3, lr}
 8007a5e:	2006      	movs	r0, #6
 8007a60:	f000 fa9e 	bl	8007fa0 <raise>
 8007a64:	2001      	movs	r0, #1
 8007a66:	f7f9 ff28 	bl	80018ba <_exit>
	...

08007a6c <__sflush_r>:
 8007a6c:	898a      	ldrh	r2, [r1, #12]
 8007a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a72:	4605      	mov	r5, r0
 8007a74:	0710      	lsls	r0, r2, #28
 8007a76:	460c      	mov	r4, r1
 8007a78:	d458      	bmi.n	8007b2c <__sflush_r+0xc0>
 8007a7a:	684b      	ldr	r3, [r1, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dc05      	bgt.n	8007a8c <__sflush_r+0x20>
 8007a80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	dc02      	bgt.n	8007a8c <__sflush_r+0x20>
 8007a86:	2000      	movs	r0, #0
 8007a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	d0f9      	beq.n	8007a86 <__sflush_r+0x1a>
 8007a92:	2300      	movs	r3, #0
 8007a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a98:	682f      	ldr	r7, [r5, #0]
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	d032      	beq.n	8007b04 <__sflush_r+0x98>
 8007a9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	075a      	lsls	r2, r3, #29
 8007aa4:	d505      	bpl.n	8007ab2 <__sflush_r+0x46>
 8007aa6:	6863      	ldr	r3, [r4, #4]
 8007aa8:	1ac0      	subs	r0, r0, r3
 8007aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007aac:	b10b      	cbz	r3, 8007ab2 <__sflush_r+0x46>
 8007aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ab0:	1ac0      	subs	r0, r0, r3
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ab8:	6a21      	ldr	r1, [r4, #32]
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b0      	blx	r6
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	d106      	bne.n	8007ad2 <__sflush_r+0x66>
 8007ac4:	6829      	ldr	r1, [r5, #0]
 8007ac6:	291d      	cmp	r1, #29
 8007ac8:	d82c      	bhi.n	8007b24 <__sflush_r+0xb8>
 8007aca:	4a2a      	ldr	r2, [pc, #168]	; (8007b74 <__sflush_r+0x108>)
 8007acc:	40ca      	lsrs	r2, r1
 8007ace:	07d6      	lsls	r6, r2, #31
 8007ad0:	d528      	bpl.n	8007b24 <__sflush_r+0xb8>
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	6062      	str	r2, [r4, #4]
 8007ad6:	04d9      	lsls	r1, r3, #19
 8007ad8:	6922      	ldr	r2, [r4, #16]
 8007ada:	6022      	str	r2, [r4, #0]
 8007adc:	d504      	bpl.n	8007ae8 <__sflush_r+0x7c>
 8007ade:	1c42      	adds	r2, r0, #1
 8007ae0:	d101      	bne.n	8007ae6 <__sflush_r+0x7a>
 8007ae2:	682b      	ldr	r3, [r5, #0]
 8007ae4:	b903      	cbnz	r3, 8007ae8 <__sflush_r+0x7c>
 8007ae6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aea:	602f      	str	r7, [r5, #0]
 8007aec:	2900      	cmp	r1, #0
 8007aee:	d0ca      	beq.n	8007a86 <__sflush_r+0x1a>
 8007af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007af4:	4299      	cmp	r1, r3
 8007af6:	d002      	beq.n	8007afe <__sflush_r+0x92>
 8007af8:	4628      	mov	r0, r5
 8007afa:	f7ff fa37 	bl	8006f6c <_free_r>
 8007afe:	2000      	movs	r0, #0
 8007b00:	6360      	str	r0, [r4, #52]	; 0x34
 8007b02:	e7c1      	b.n	8007a88 <__sflush_r+0x1c>
 8007b04:	6a21      	ldr	r1, [r4, #32]
 8007b06:	2301      	movs	r3, #1
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b0      	blx	r6
 8007b0c:	1c41      	adds	r1, r0, #1
 8007b0e:	d1c7      	bne.n	8007aa0 <__sflush_r+0x34>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0c4      	beq.n	8007aa0 <__sflush_r+0x34>
 8007b16:	2b1d      	cmp	r3, #29
 8007b18:	d001      	beq.n	8007b1e <__sflush_r+0xb2>
 8007b1a:	2b16      	cmp	r3, #22
 8007b1c:	d101      	bne.n	8007b22 <__sflush_r+0xb6>
 8007b1e:	602f      	str	r7, [r5, #0]
 8007b20:	e7b1      	b.n	8007a86 <__sflush_r+0x1a>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b28:	81a3      	strh	r3, [r4, #12]
 8007b2a:	e7ad      	b.n	8007a88 <__sflush_r+0x1c>
 8007b2c:	690f      	ldr	r7, [r1, #16]
 8007b2e:	2f00      	cmp	r7, #0
 8007b30:	d0a9      	beq.n	8007a86 <__sflush_r+0x1a>
 8007b32:	0793      	lsls	r3, r2, #30
 8007b34:	680e      	ldr	r6, [r1, #0]
 8007b36:	bf08      	it	eq
 8007b38:	694b      	ldreq	r3, [r1, #20]
 8007b3a:	600f      	str	r7, [r1, #0]
 8007b3c:	bf18      	it	ne
 8007b3e:	2300      	movne	r3, #0
 8007b40:	eba6 0807 	sub.w	r8, r6, r7
 8007b44:	608b      	str	r3, [r1, #8]
 8007b46:	f1b8 0f00 	cmp.w	r8, #0
 8007b4a:	dd9c      	ble.n	8007a86 <__sflush_r+0x1a>
 8007b4c:	6a21      	ldr	r1, [r4, #32]
 8007b4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b50:	4643      	mov	r3, r8
 8007b52:	463a      	mov	r2, r7
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b0      	blx	r6
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	dc06      	bgt.n	8007b6a <__sflush_r+0xfe>
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b62:	81a3      	strh	r3, [r4, #12]
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	e78e      	b.n	8007a88 <__sflush_r+0x1c>
 8007b6a:	4407      	add	r7, r0
 8007b6c:	eba8 0800 	sub.w	r8, r8, r0
 8007b70:	e7e9      	b.n	8007b46 <__sflush_r+0xda>
 8007b72:	bf00      	nop
 8007b74:	20400001 	.word	0x20400001

08007b78 <_fflush_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	690b      	ldr	r3, [r1, #16]
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	b913      	cbnz	r3, 8007b88 <_fflush_r+0x10>
 8007b82:	2500      	movs	r5, #0
 8007b84:	4628      	mov	r0, r5
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	b118      	cbz	r0, 8007b92 <_fflush_r+0x1a>
 8007b8a:	6983      	ldr	r3, [r0, #24]
 8007b8c:	b90b      	cbnz	r3, 8007b92 <_fflush_r+0x1a>
 8007b8e:	f000 f887 	bl	8007ca0 <__sinit>
 8007b92:	4b14      	ldr	r3, [pc, #80]	; (8007be4 <_fflush_r+0x6c>)
 8007b94:	429c      	cmp	r4, r3
 8007b96:	d11b      	bne.n	8007bd0 <_fflush_r+0x58>
 8007b98:	686c      	ldr	r4, [r5, #4]
 8007b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0ef      	beq.n	8007b82 <_fflush_r+0xa>
 8007ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ba4:	07d0      	lsls	r0, r2, #31
 8007ba6:	d404      	bmi.n	8007bb2 <_fflush_r+0x3a>
 8007ba8:	0599      	lsls	r1, r3, #22
 8007baa:	d402      	bmi.n	8007bb2 <_fflush_r+0x3a>
 8007bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bae:	f000 f915 	bl	8007ddc <__retarget_lock_acquire_recursive>
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	f7ff ff59 	bl	8007a6c <__sflush_r>
 8007bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bbc:	07da      	lsls	r2, r3, #31
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	d4e0      	bmi.n	8007b84 <_fflush_r+0xc>
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	059b      	lsls	r3, r3, #22
 8007bc6:	d4dd      	bmi.n	8007b84 <_fflush_r+0xc>
 8007bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bca:	f000 f908 	bl	8007dde <__retarget_lock_release_recursive>
 8007bce:	e7d9      	b.n	8007b84 <_fflush_r+0xc>
 8007bd0:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <_fflush_r+0x70>)
 8007bd2:	429c      	cmp	r4, r3
 8007bd4:	d101      	bne.n	8007bda <_fflush_r+0x62>
 8007bd6:	68ac      	ldr	r4, [r5, #8]
 8007bd8:	e7df      	b.n	8007b9a <_fflush_r+0x22>
 8007bda:	4b04      	ldr	r3, [pc, #16]	; (8007bec <_fflush_r+0x74>)
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	bf08      	it	eq
 8007be0:	68ec      	ldreq	r4, [r5, #12]
 8007be2:	e7da      	b.n	8007b9a <_fflush_r+0x22>
 8007be4:	08008430 	.word	0x08008430
 8007be8:	08008450 	.word	0x08008450
 8007bec:	08008410 	.word	0x08008410

08007bf0 <std>:
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8007bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bfe:	6083      	str	r3, [r0, #8]
 8007c00:	8181      	strh	r1, [r0, #12]
 8007c02:	6643      	str	r3, [r0, #100]	; 0x64
 8007c04:	81c2      	strh	r2, [r0, #14]
 8007c06:	6183      	str	r3, [r0, #24]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	305c      	adds	r0, #92	; 0x5c
 8007c0e:	f7ff f9a5 	bl	8006f5c <memset>
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <std+0x38>)
 8007c14:	6263      	str	r3, [r4, #36]	; 0x24
 8007c16:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <std+0x3c>)
 8007c18:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c1a:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <std+0x40>)
 8007c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <std+0x44>)
 8007c20:	6224      	str	r4, [r4, #32]
 8007c22:	6323      	str	r3, [r4, #48]	; 0x30
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	bf00      	nop
 8007c28:	08007fd9 	.word	0x08007fd9
 8007c2c:	08007ffb 	.word	0x08007ffb
 8007c30:	08008033 	.word	0x08008033
 8007c34:	08008057 	.word	0x08008057

08007c38 <_cleanup_r>:
 8007c38:	4901      	ldr	r1, [pc, #4]	; (8007c40 <_cleanup_r+0x8>)
 8007c3a:	f000 b8af 	b.w	8007d9c <_fwalk_reent>
 8007c3e:	bf00      	nop
 8007c40:	08007b79 	.word	0x08007b79

08007c44 <__sfmoreglue>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	1e4a      	subs	r2, r1, #1
 8007c48:	2568      	movs	r5, #104	; 0x68
 8007c4a:	4355      	muls	r5, r2
 8007c4c:	460e      	mov	r6, r1
 8007c4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c52:	f7ff f9db 	bl	800700c <_malloc_r>
 8007c56:	4604      	mov	r4, r0
 8007c58:	b140      	cbz	r0, 8007c6c <__sfmoreglue+0x28>
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	e9c0 1600 	strd	r1, r6, [r0]
 8007c60:	300c      	adds	r0, #12
 8007c62:	60a0      	str	r0, [r4, #8]
 8007c64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c68:	f7ff f978 	bl	8006f5c <memset>
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}

08007c70 <__sfp_lock_acquire>:
 8007c70:	4801      	ldr	r0, [pc, #4]	; (8007c78 <__sfp_lock_acquire+0x8>)
 8007c72:	f000 b8b3 	b.w	8007ddc <__retarget_lock_acquire_recursive>
 8007c76:	bf00      	nop
 8007c78:	200002c8 	.word	0x200002c8

08007c7c <__sfp_lock_release>:
 8007c7c:	4801      	ldr	r0, [pc, #4]	; (8007c84 <__sfp_lock_release+0x8>)
 8007c7e:	f000 b8ae 	b.w	8007dde <__retarget_lock_release_recursive>
 8007c82:	bf00      	nop
 8007c84:	200002c8 	.word	0x200002c8

08007c88 <__sinit_lock_acquire>:
 8007c88:	4801      	ldr	r0, [pc, #4]	; (8007c90 <__sinit_lock_acquire+0x8>)
 8007c8a:	f000 b8a7 	b.w	8007ddc <__retarget_lock_acquire_recursive>
 8007c8e:	bf00      	nop
 8007c90:	200002c3 	.word	0x200002c3

08007c94 <__sinit_lock_release>:
 8007c94:	4801      	ldr	r0, [pc, #4]	; (8007c9c <__sinit_lock_release+0x8>)
 8007c96:	f000 b8a2 	b.w	8007dde <__retarget_lock_release_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	200002c3 	.word	0x200002c3

08007ca0 <__sinit>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	f7ff fff0 	bl	8007c88 <__sinit_lock_acquire>
 8007ca8:	69a3      	ldr	r3, [r4, #24]
 8007caa:	b11b      	cbz	r3, 8007cb4 <__sinit+0x14>
 8007cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb0:	f7ff bff0 	b.w	8007c94 <__sinit_lock_release>
 8007cb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cb8:	6523      	str	r3, [r4, #80]	; 0x50
 8007cba:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <__sinit+0x68>)
 8007cbc:	4a13      	ldr	r2, [pc, #76]	; (8007d0c <__sinit+0x6c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cc2:	42a3      	cmp	r3, r4
 8007cc4:	bf04      	itt	eq
 8007cc6:	2301      	moveq	r3, #1
 8007cc8:	61a3      	streq	r3, [r4, #24]
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 f820 	bl	8007d10 <__sfp>
 8007cd0:	6060      	str	r0, [r4, #4]
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 f81c 	bl	8007d10 <__sfp>
 8007cd8:	60a0      	str	r0, [r4, #8]
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 f818 	bl	8007d10 <__sfp>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	60e0      	str	r0, [r4, #12]
 8007ce4:	2104      	movs	r1, #4
 8007ce6:	6860      	ldr	r0, [r4, #4]
 8007ce8:	f7ff ff82 	bl	8007bf0 <std>
 8007cec:	68a0      	ldr	r0, [r4, #8]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	2109      	movs	r1, #9
 8007cf2:	f7ff ff7d 	bl	8007bf0 <std>
 8007cf6:	68e0      	ldr	r0, [r4, #12]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	2112      	movs	r1, #18
 8007cfc:	f7ff ff78 	bl	8007bf0 <std>
 8007d00:	2301      	movs	r3, #1
 8007d02:	61a3      	str	r3, [r4, #24]
 8007d04:	e7d2      	b.n	8007cac <__sinit+0xc>
 8007d06:	bf00      	nop
 8007d08:	08008360 	.word	0x08008360
 8007d0c:	08007c39 	.word	0x08007c39

08007d10 <__sfp>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	4607      	mov	r7, r0
 8007d14:	f7ff ffac 	bl	8007c70 <__sfp_lock_acquire>
 8007d18:	4b1e      	ldr	r3, [pc, #120]	; (8007d94 <__sfp+0x84>)
 8007d1a:	681e      	ldr	r6, [r3, #0]
 8007d1c:	69b3      	ldr	r3, [r6, #24]
 8007d1e:	b913      	cbnz	r3, 8007d26 <__sfp+0x16>
 8007d20:	4630      	mov	r0, r6
 8007d22:	f7ff ffbd 	bl	8007ca0 <__sinit>
 8007d26:	3648      	adds	r6, #72	; 0x48
 8007d28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	d503      	bpl.n	8007d38 <__sfp+0x28>
 8007d30:	6833      	ldr	r3, [r6, #0]
 8007d32:	b30b      	cbz	r3, 8007d78 <__sfp+0x68>
 8007d34:	6836      	ldr	r6, [r6, #0]
 8007d36:	e7f7      	b.n	8007d28 <__sfp+0x18>
 8007d38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d3c:	b9d5      	cbnz	r5, 8007d74 <__sfp+0x64>
 8007d3e:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <__sfp+0x88>)
 8007d40:	60e3      	str	r3, [r4, #12]
 8007d42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d46:	6665      	str	r5, [r4, #100]	; 0x64
 8007d48:	f000 f847 	bl	8007dda <__retarget_lock_init_recursive>
 8007d4c:	f7ff ff96 	bl	8007c7c <__sfp_lock_release>
 8007d50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d58:	6025      	str	r5, [r4, #0]
 8007d5a:	61a5      	str	r5, [r4, #24]
 8007d5c:	2208      	movs	r2, #8
 8007d5e:	4629      	mov	r1, r5
 8007d60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d64:	f7ff f8fa 	bl	8006f5c <memset>
 8007d68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d70:	4620      	mov	r0, r4
 8007d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d74:	3468      	adds	r4, #104	; 0x68
 8007d76:	e7d9      	b.n	8007d2c <__sfp+0x1c>
 8007d78:	2104      	movs	r1, #4
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	f7ff ff62 	bl	8007c44 <__sfmoreglue>
 8007d80:	4604      	mov	r4, r0
 8007d82:	6030      	str	r0, [r6, #0]
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d1d5      	bne.n	8007d34 <__sfp+0x24>
 8007d88:	f7ff ff78 	bl	8007c7c <__sfp_lock_release>
 8007d8c:	230c      	movs	r3, #12
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	e7ee      	b.n	8007d70 <__sfp+0x60>
 8007d92:	bf00      	nop
 8007d94:	08008360 	.word	0x08008360
 8007d98:	ffff0001 	.word	0xffff0001

08007d9c <_fwalk_reent>:
 8007d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da0:	4606      	mov	r6, r0
 8007da2:	4688      	mov	r8, r1
 8007da4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007da8:	2700      	movs	r7, #0
 8007daa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dae:	f1b9 0901 	subs.w	r9, r9, #1
 8007db2:	d505      	bpl.n	8007dc0 <_fwalk_reent+0x24>
 8007db4:	6824      	ldr	r4, [r4, #0]
 8007db6:	2c00      	cmp	r4, #0
 8007db8:	d1f7      	bne.n	8007daa <_fwalk_reent+0xe>
 8007dba:	4638      	mov	r0, r7
 8007dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dc0:	89ab      	ldrh	r3, [r5, #12]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d907      	bls.n	8007dd6 <_fwalk_reent+0x3a>
 8007dc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	d003      	beq.n	8007dd6 <_fwalk_reent+0x3a>
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	47c0      	blx	r8
 8007dd4:	4307      	orrs	r7, r0
 8007dd6:	3568      	adds	r5, #104	; 0x68
 8007dd8:	e7e9      	b.n	8007dae <_fwalk_reent+0x12>

08007dda <__retarget_lock_init_recursive>:
 8007dda:	4770      	bx	lr

08007ddc <__retarget_lock_acquire_recursive>:
 8007ddc:	4770      	bx	lr

08007dde <__retarget_lock_release_recursive>:
 8007dde:	4770      	bx	lr

08007de0 <__swhatbuf_r>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	460e      	mov	r6, r1
 8007de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de8:	2900      	cmp	r1, #0
 8007dea:	b096      	sub	sp, #88	; 0x58
 8007dec:	4614      	mov	r4, r2
 8007dee:	461d      	mov	r5, r3
 8007df0:	da07      	bge.n	8007e02 <__swhatbuf_r+0x22>
 8007df2:	2300      	movs	r3, #0
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	89b3      	ldrh	r3, [r6, #12]
 8007df8:	061a      	lsls	r2, r3, #24
 8007dfa:	d410      	bmi.n	8007e1e <__swhatbuf_r+0x3e>
 8007dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e00:	e00e      	b.n	8007e20 <__swhatbuf_r+0x40>
 8007e02:	466a      	mov	r2, sp
 8007e04:	f000 f94e 	bl	80080a4 <_fstat_r>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	dbf2      	blt.n	8007df2 <__swhatbuf_r+0x12>
 8007e0c:	9a01      	ldr	r2, [sp, #4]
 8007e0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e16:	425a      	negs	r2, r3
 8007e18:	415a      	adcs	r2, r3
 8007e1a:	602a      	str	r2, [r5, #0]
 8007e1c:	e7ee      	b.n	8007dfc <__swhatbuf_r+0x1c>
 8007e1e:	2340      	movs	r3, #64	; 0x40
 8007e20:	2000      	movs	r0, #0
 8007e22:	6023      	str	r3, [r4, #0]
 8007e24:	b016      	add	sp, #88	; 0x58
 8007e26:	bd70      	pop	{r4, r5, r6, pc}

08007e28 <__smakebuf_r>:
 8007e28:	898b      	ldrh	r3, [r1, #12]
 8007e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e2c:	079d      	lsls	r5, r3, #30
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460c      	mov	r4, r1
 8007e32:	d507      	bpl.n	8007e44 <__smakebuf_r+0x1c>
 8007e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	6163      	str	r3, [r4, #20]
 8007e40:	b002      	add	sp, #8
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	ab01      	add	r3, sp, #4
 8007e46:	466a      	mov	r2, sp
 8007e48:	f7ff ffca 	bl	8007de0 <__swhatbuf_r>
 8007e4c:	9900      	ldr	r1, [sp, #0]
 8007e4e:	4605      	mov	r5, r0
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff f8db 	bl	800700c <_malloc_r>
 8007e56:	b948      	cbnz	r0, 8007e6c <__smakebuf_r+0x44>
 8007e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e5c:	059a      	lsls	r2, r3, #22
 8007e5e:	d4ef      	bmi.n	8007e40 <__smakebuf_r+0x18>
 8007e60:	f023 0303 	bic.w	r3, r3, #3
 8007e64:	f043 0302 	orr.w	r3, r3, #2
 8007e68:	81a3      	strh	r3, [r4, #12]
 8007e6a:	e7e3      	b.n	8007e34 <__smakebuf_r+0xc>
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <__smakebuf_r+0x7c>)
 8007e6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	6020      	str	r0, [r4, #0]
 8007e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e78:	81a3      	strh	r3, [r4, #12]
 8007e7a:	9b00      	ldr	r3, [sp, #0]
 8007e7c:	6163      	str	r3, [r4, #20]
 8007e7e:	9b01      	ldr	r3, [sp, #4]
 8007e80:	6120      	str	r0, [r4, #16]
 8007e82:	b15b      	cbz	r3, 8007e9c <__smakebuf_r+0x74>
 8007e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f000 f91d 	bl	80080c8 <_isatty_r>
 8007e8e:	b128      	cbz	r0, 8007e9c <__smakebuf_r+0x74>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f023 0303 	bic.w	r3, r3, #3
 8007e96:	f043 0301 	orr.w	r3, r3, #1
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	89a0      	ldrh	r0, [r4, #12]
 8007e9e:	4305      	orrs	r5, r0
 8007ea0:	81a5      	strh	r5, [r4, #12]
 8007ea2:	e7cd      	b.n	8007e40 <__smakebuf_r+0x18>
 8007ea4:	08007c39 	.word	0x08007c39

08007ea8 <__malloc_lock>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__malloc_lock+0x8>)
 8007eaa:	f7ff bf97 	b.w	8007ddc <__retarget_lock_acquire_recursive>
 8007eae:	bf00      	nop
 8007eb0:	200002c4 	.word	0x200002c4

08007eb4 <__malloc_unlock>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	; (8007ebc <__malloc_unlock+0x8>)
 8007eb6:	f7ff bf92 	b.w	8007dde <__retarget_lock_release_recursive>
 8007eba:	bf00      	nop
 8007ebc:	200002c4 	.word	0x200002c4

08007ec0 <_putc_r>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	4614      	mov	r4, r2
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	b118      	cbz	r0, 8007ed2 <_putc_r+0x12>
 8007eca:	6983      	ldr	r3, [r0, #24]
 8007ecc:	b90b      	cbnz	r3, 8007ed2 <_putc_r+0x12>
 8007ece:	f7ff fee7 	bl	8007ca0 <__sinit>
 8007ed2:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <_putc_r+0x84>)
 8007ed4:	429c      	cmp	r4, r3
 8007ed6:	d124      	bne.n	8007f22 <_putc_r+0x62>
 8007ed8:	6874      	ldr	r4, [r6, #4]
 8007eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007edc:	07d8      	lsls	r0, r3, #31
 8007ede:	d405      	bmi.n	8007eec <_putc_r+0x2c>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	0599      	lsls	r1, r3, #22
 8007ee4:	d402      	bmi.n	8007eec <_putc_r+0x2c>
 8007ee6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ee8:	f7ff ff78 	bl	8007ddc <__retarget_lock_acquire_recursive>
 8007eec:	68a3      	ldr	r3, [r4, #8]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	60a3      	str	r3, [r4, #8]
 8007ef4:	da05      	bge.n	8007f02 <_putc_r+0x42>
 8007ef6:	69a2      	ldr	r2, [r4, #24]
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	db1c      	blt.n	8007f36 <_putc_r+0x76>
 8007efc:	b2eb      	uxtb	r3, r5
 8007efe:	2b0a      	cmp	r3, #10
 8007f00:	d019      	beq.n	8007f36 <_putc_r+0x76>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	6022      	str	r2, [r4, #0]
 8007f08:	701d      	strb	r5, [r3, #0]
 8007f0a:	b2ed      	uxtb	r5, r5
 8007f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f0e:	07da      	lsls	r2, r3, #31
 8007f10:	d405      	bmi.n	8007f1e <_putc_r+0x5e>
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	059b      	lsls	r3, r3, #22
 8007f16:	d402      	bmi.n	8007f1e <_putc_r+0x5e>
 8007f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f1a:	f7ff ff60 	bl	8007dde <__retarget_lock_release_recursive>
 8007f1e:	4628      	mov	r0, r5
 8007f20:	bd70      	pop	{r4, r5, r6, pc}
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <_putc_r+0x88>)
 8007f24:	429c      	cmp	r4, r3
 8007f26:	d101      	bne.n	8007f2c <_putc_r+0x6c>
 8007f28:	68b4      	ldr	r4, [r6, #8]
 8007f2a:	e7d6      	b.n	8007eda <_putc_r+0x1a>
 8007f2c:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <_putc_r+0x8c>)
 8007f2e:	429c      	cmp	r4, r3
 8007f30:	bf08      	it	eq
 8007f32:	68f4      	ldreq	r4, [r6, #12]
 8007f34:	e7d1      	b.n	8007eda <_putc_r+0x1a>
 8007f36:	4629      	mov	r1, r5
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7ff fcce 	bl	80078dc <__swbuf_r>
 8007f40:	4605      	mov	r5, r0
 8007f42:	e7e3      	b.n	8007f0c <_putc_r+0x4c>
 8007f44:	08008430 	.word	0x08008430
 8007f48:	08008450 	.word	0x08008450
 8007f4c:	08008410 	.word	0x08008410

08007f50 <_raise_r>:
 8007f50:	291f      	cmp	r1, #31
 8007f52:	b538      	push	{r3, r4, r5, lr}
 8007f54:	4604      	mov	r4, r0
 8007f56:	460d      	mov	r5, r1
 8007f58:	d904      	bls.n	8007f64 <_raise_r+0x14>
 8007f5a:	2316      	movs	r3, #22
 8007f5c:	6003      	str	r3, [r0, #0]
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f66:	b112      	cbz	r2, 8007f6e <_raise_r+0x1e>
 8007f68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f6c:	b94b      	cbnz	r3, 8007f82 <_raise_r+0x32>
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 f830 	bl	8007fd4 <_getpid_r>
 8007f74:	462a      	mov	r2, r5
 8007f76:	4601      	mov	r1, r0
 8007f78:	4620      	mov	r0, r4
 8007f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f7e:	f000 b817 	b.w	8007fb0 <_kill_r>
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d00a      	beq.n	8007f9c <_raise_r+0x4c>
 8007f86:	1c59      	adds	r1, r3, #1
 8007f88:	d103      	bne.n	8007f92 <_raise_r+0x42>
 8007f8a:	2316      	movs	r3, #22
 8007f8c:	6003      	str	r3, [r0, #0]
 8007f8e:	2001      	movs	r0, #1
 8007f90:	e7e7      	b.n	8007f62 <_raise_r+0x12>
 8007f92:	2400      	movs	r4, #0
 8007f94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f98:	4628      	mov	r0, r5
 8007f9a:	4798      	blx	r3
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e7e0      	b.n	8007f62 <_raise_r+0x12>

08007fa0 <raise>:
 8007fa0:	4b02      	ldr	r3, [pc, #8]	; (8007fac <raise+0xc>)
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	f7ff bfd3 	b.w	8007f50 <_raise_r>
 8007faa:	bf00      	nop
 8007fac:	2000000c 	.word	0x2000000c

08007fb0 <_kill_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d07      	ldr	r5, [pc, #28]	; (8007fd0 <_kill_r+0x20>)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	4611      	mov	r1, r2
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	f7f9 fc6c 	bl	800189a <_kill>
 8007fc2:	1c43      	adds	r3, r0, #1
 8007fc4:	d102      	bne.n	8007fcc <_kill_r+0x1c>
 8007fc6:	682b      	ldr	r3, [r5, #0]
 8007fc8:	b103      	cbz	r3, 8007fcc <_kill_r+0x1c>
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	bd38      	pop	{r3, r4, r5, pc}
 8007fce:	bf00      	nop
 8007fd0:	200002cc 	.word	0x200002cc

08007fd4 <_getpid_r>:
 8007fd4:	f7f9 bc59 	b.w	800188a <_getpid>

08007fd8 <__sread>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	460c      	mov	r4, r1
 8007fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe0:	f000 f894 	bl	800810c <_read_r>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	bfab      	itete	ge
 8007fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fea:	89a3      	ldrhlt	r3, [r4, #12]
 8007fec:	181b      	addge	r3, r3, r0
 8007fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ff2:	bfac      	ite	ge
 8007ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ff6:	81a3      	strhlt	r3, [r4, #12]
 8007ff8:	bd10      	pop	{r4, pc}

08007ffa <__swrite>:
 8007ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffe:	461f      	mov	r7, r3
 8008000:	898b      	ldrh	r3, [r1, #12]
 8008002:	05db      	lsls	r3, r3, #23
 8008004:	4605      	mov	r5, r0
 8008006:	460c      	mov	r4, r1
 8008008:	4616      	mov	r6, r2
 800800a:	d505      	bpl.n	8008018 <__swrite+0x1e>
 800800c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008010:	2302      	movs	r3, #2
 8008012:	2200      	movs	r2, #0
 8008014:	f000 f868 	bl	80080e8 <_lseek_r>
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800801e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	4632      	mov	r2, r6
 8008026:	463b      	mov	r3, r7
 8008028:	4628      	mov	r0, r5
 800802a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800802e:	f000 b817 	b.w	8008060 <_write_r>

08008032 <__sseek>:
 8008032:	b510      	push	{r4, lr}
 8008034:	460c      	mov	r4, r1
 8008036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803a:	f000 f855 	bl	80080e8 <_lseek_r>
 800803e:	1c43      	adds	r3, r0, #1
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	bf15      	itete	ne
 8008044:	6560      	strne	r0, [r4, #84]	; 0x54
 8008046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800804a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800804e:	81a3      	strheq	r3, [r4, #12]
 8008050:	bf18      	it	ne
 8008052:	81a3      	strhne	r3, [r4, #12]
 8008054:	bd10      	pop	{r4, pc}

08008056 <__sclose>:
 8008056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805a:	f000 b813 	b.w	8008084 <_close_r>
	...

08008060 <_write_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4d07      	ldr	r5, [pc, #28]	; (8008080 <_write_r+0x20>)
 8008064:	4604      	mov	r4, r0
 8008066:	4608      	mov	r0, r1
 8008068:	4611      	mov	r1, r2
 800806a:	2200      	movs	r2, #0
 800806c:	602a      	str	r2, [r5, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	f7f9 fc4a 	bl	8001908 <_write>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d102      	bne.n	800807e <_write_r+0x1e>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	b103      	cbz	r3, 800807e <_write_r+0x1e>
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	200002cc 	.word	0x200002cc

08008084 <_close_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d06      	ldr	r5, [pc, #24]	; (80080a0 <_close_r+0x1c>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	f7f9 fc56 	bl	8001940 <_close>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_close_r+0x1a>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_close_r+0x1a>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	200002cc 	.word	0x200002cc

080080a4 <_fstat_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4d07      	ldr	r5, [pc, #28]	; (80080c4 <_fstat_r+0x20>)
 80080a8:	2300      	movs	r3, #0
 80080aa:	4604      	mov	r4, r0
 80080ac:	4608      	mov	r0, r1
 80080ae:	4611      	mov	r1, r2
 80080b0:	602b      	str	r3, [r5, #0]
 80080b2:	f7f9 fc51 	bl	8001958 <_fstat>
 80080b6:	1c43      	adds	r3, r0, #1
 80080b8:	d102      	bne.n	80080c0 <_fstat_r+0x1c>
 80080ba:	682b      	ldr	r3, [r5, #0]
 80080bc:	b103      	cbz	r3, 80080c0 <_fstat_r+0x1c>
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	bd38      	pop	{r3, r4, r5, pc}
 80080c2:	bf00      	nop
 80080c4:	200002cc 	.word	0x200002cc

080080c8 <_isatty_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d06      	ldr	r5, [pc, #24]	; (80080e4 <_isatty_r+0x1c>)
 80080cc:	2300      	movs	r3, #0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	f7f9 fc50 	bl	8001978 <_isatty>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_isatty_r+0x1a>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_isatty_r+0x1a>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	200002cc 	.word	0x200002cc

080080e8 <_lseek_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d07      	ldr	r5, [pc, #28]	; (8008108 <_lseek_r+0x20>)
 80080ec:	4604      	mov	r4, r0
 80080ee:	4608      	mov	r0, r1
 80080f0:	4611      	mov	r1, r2
 80080f2:	2200      	movs	r2, #0
 80080f4:	602a      	str	r2, [r5, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f7f9 fc49 	bl	800198e <_lseek>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d102      	bne.n	8008106 <_lseek_r+0x1e>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	b103      	cbz	r3, 8008106 <_lseek_r+0x1e>
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	bd38      	pop	{r3, r4, r5, pc}
 8008108:	200002cc 	.word	0x200002cc

0800810c <_read_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4d07      	ldr	r5, [pc, #28]	; (800812c <_read_r+0x20>)
 8008110:	4604      	mov	r4, r0
 8008112:	4608      	mov	r0, r1
 8008114:	4611      	mov	r1, r2
 8008116:	2200      	movs	r2, #0
 8008118:	602a      	str	r2, [r5, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	f7f9 fbd7 	bl	80018ce <_read>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_read_r+0x1e>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_read_r+0x1e>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	200002cc 	.word	0x200002cc

08008130 <_init>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr

0800813c <_fini>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr
